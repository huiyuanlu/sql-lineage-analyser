# Generated from PrestoSQL.g4 by ANTLR 4.8
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u00f0")
        buf.write("\u06f7\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\3\2\3\2\3\2\3\3\3\3\3\3\3\4\3\4\3\4\3\5\3\5\3")
        buf.write("\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\5\5\u00b3\n")
        buf.write("\5\3\5\3\5\3\5\5\5\u00b8\n\5\3\5\3\5\3\5\3\5\5\5\u00be")
        buf.write("\n\5\3\5\3\5\5\5\u00c2\n\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5")
        buf.write("\3\5\3\5\3\5\3\5\3\5\5\5\u00d0\n\5\3\5\3\5\5\5\u00d4\n")
        buf.write("\5\3\5\3\5\5\5\u00d8\n\5\3\5\3\5\5\5\u00dc\n\5\3\5\3\5")
        buf.write("\3\5\3\5\3\5\3\5\5\5\u00e4\n\5\3\5\3\5\5\5\u00e8\n\5\3")
        buf.write("\5\5\5\u00eb\n\5\3\5\3\5\3\5\3\5\3\5\5\5\u00f2\n\5\3\5")
        buf.write("\3\5\3\5\3\5\3\5\7\5\u00f9\n\5\f\5\16\5\u00fc\13\5\3\5")
        buf.write("\3\5\3\5\5\5\u0101\n\5\3\5\3\5\5\5\u0105\n\5\3\5\3\5\3")
        buf.write("\5\3\5\5\5\u010b\n\5\3\5\3\5\3\5\3\5\3\5\5\5\u0112\n\5")
        buf.write("\3\5\3\5\3\5\3\5\3\5\3\5\3\5\5\5\u011b\n\5\3\5\3\5\3\5")
        buf.write("\3\5\5\5\u0121\n\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5")
        buf.write("\5\5\u012c\n\5\3\5\3\5\3\5\3\5\3\5\5\5\u0133\n\5\3\5\3")
        buf.write("\5\3\5\3\5\3\5\3\5\3\5\3\5\5\5\u013d\n\5\3\5\3\5\3\5\3")
        buf.write("\5\3\5\5\5\u0144\n\5\3\5\3\5\3\5\3\5\3\5\3\5\5\5\u014c")
        buf.write("\n\5\3\5\3\5\3\5\3\5\3\5\3\5\5\5\u0154\n\5\3\5\3\5\3\5")
        buf.write("\3\5\3\5\3\5\5\5\u015c\n\5\3\5\3\5\3\5\5\5\u0161\n\5\3")
        buf.write("\5\3\5\3\5\3\5\5\5\u0167\n\5\3\5\3\5\3\5\3\5\3\5\3\5\3")
        buf.write("\5\5\5\u0170\n\5\3\5\3\5\3\5\3\5\5\5\u0176\n\5\3\5\3\5")
        buf.write("\3\5\3\5\3\5\3\5\7\5\u017e\n\5\f\5\16\5\u0181\13\5\5\5")
        buf.write("\u0183\n\5\3\5\3\5\3\5\3\5\3\5\5\5\u018a\n\5\3\5\3\5\3")
        buf.write("\5\3\5\3\5\3\5\3\5\5\5\u0193\n\5\3\5\3\5\3\5\3\5\3\5\3")
        buf.write("\5\5\5\u019b\n\5\3\5\3\5\5\5\u019f\n\5\3\5\3\5\3\5\3\5")
        buf.write("\3\5\3\5\7\5\u01a7\n\5\f\5\16\5\u01aa\13\5\5\5\u01ac\n")
        buf.write("\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\5\5\u01b6\n\5\3\5\3")
        buf.write("\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\7\5\u01c1\n\5\f\5\16\5")
        buf.write("\u01c4\13\5\3\5\3\5\3\5\5\5\u01c9\n\5\3\5\3\5\3\5\5\5")
        buf.write("\u01ce\n\5\3\5\3\5\3\5\3\5\5\5\u01d4\n\5\3\5\3\5\3\5\3")
        buf.write("\5\3\5\7\5\u01db\n\5\f\5\16\5\u01de\13\5\3\5\3\5\3\5\5")
        buf.write("\5\u01e3\n\5\3\5\3\5\3\5\3\5\3\5\5\5\u01ea\n\5\3\5\3\5")
        buf.write("\3\5\3\5\7\5\u01f0\n\5\f\5\16\5\u01f3\13\5\3\5\3\5\5\5")
        buf.write("\u01f7\n\5\3\5\3\5\5\5\u01fb\n\5\3\5\3\5\3\5\3\5\3\5\3")
        buf.write("\5\5\5\u0203\n\5\3\5\3\5\3\5\3\5\5\5\u0209\n\5\3\5\3\5")
        buf.write("\3\5\7\5\u020e\n\5\f\5\16\5\u0211\13\5\3\5\3\5\5\5\u0215")
        buf.write("\n\5\3\5\3\5\5\5\u0219\n\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5")
        buf.write("\3\5\5\5\u0223\n\5\3\5\5\5\u0226\n\5\3\5\3\5\5\5\u022a")
        buf.write("\n\5\3\5\5\5\u022d\n\5\3\5\3\5\3\5\3\5\7\5\u0233\n\5\f")
        buf.write("\5\16\5\u0236\13\5\3\5\3\5\5\5\u023a\n\5\3\5\3\5\3\5\3")
        buf.write("\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\5\5\u024a\n")
        buf.write("\5\3\5\3\5\3\5\3\5\5\5\u0250\n\5\3\5\3\5\3\5\3\5\5\5\u0256")
        buf.write("\n\5\5\5\u0258\n\5\3\5\3\5\3\5\3\5\5\5\u025e\n\5\3\5\3")
        buf.write("\5\3\5\3\5\5\5\u0264\n\5\5\5\u0266\n\5\3\5\3\5\3\5\3\5")
        buf.write("\5\5\u026c\n\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5")
        buf.write("\3\5\3\5\3\5\3\5\3\5\3\5\3\5\5\5\u027f\n\5\3\5\3\5\3\5")
        buf.write("\5\5\u0284\n\5\3\5\3\5\3\5\3\5\3\5\5\5\u028b\n\5\3\5\3")
        buf.write("\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\5\5\u0297\n\5\5\5\u0299")
        buf.write("\n\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3")
        buf.write("\5\3\5\3\5\3\5\7\5\u02ab\n\5\f\5\16\5\u02ae\13\5\5\5\u02b0")
        buf.write("\n\5\3\5\3\5\5\5\u02b4\n\5\3\5\3\5\5\5\u02b8\n\5\3\5\3")
        buf.write("\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\7\5")
        buf.write("\u02c8\n\5\f\5\16\5\u02cb\13\5\5\5\u02cd\n\5\3\5\3\5\3")
        buf.write("\5\3\5\3\5\3\5\5\5\u02d5\n\5\3\6\5\6\u02d8\n\6\3\6\3\6")
        buf.write("\3\7\3\7\5\7\u02de\n\7\3\7\3\7\3\7\7\7\u02e3\n\7\f\7\16")
        buf.write("\7\u02e6\13\7\3\b\3\b\5\b\u02ea\n\b\3\t\3\t\3\t\3\t\5")
        buf.write("\t\u02f0\n\t\3\t\3\t\5\t\u02f4\n\t\3\t\3\t\5\t\u02f8\n")
        buf.write("\t\3\n\3\n\3\n\3\n\5\n\u02fe\n\n\3\13\3\13\3\13\3\13\7")
        buf.write("\13\u0304\n\13\f\13\16\13\u0307\13\13\3\13\3\13\3\f\3")
        buf.write("\f\3\f\3\f\3\r\3\r\3\r\3\16\7\16\u0313\n\16\f\16\16\16")
        buf.write("\u0316\13\16\3\17\3\17\3\17\3\17\5\17\u031c\n\17\3\20")
        buf.write("\7\20\u031f\n\20\f\20\16\20\u0322\13\20\3\21\3\21\3\22")
        buf.write("\3\22\5\22\u0328\n\22\3\23\3\23\3\23\3\24\3\24\3\24\5")
        buf.write("\24\u0330\n\24\3\25\3\25\5\25\u0334\n\25\3\26\3\26\3\26")
        buf.write("\5\26\u0339\n\26\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3")
        buf.write("\27\3\27\5\27\u0344\n\27\3\30\3\30\3\31\3\31\3\31\3\31")
        buf.write("\3\31\3\31\7\31\u034e\n\31\f\31\16\31\u0351\13\31\5\31")
        buf.write("\u0353\n\31\3\31\3\31\5\31\u0357\n\31\3\32\3\32\3\32\3")
        buf.write("\32\3\32\3\32\5\32\u035f\n\32\3\32\3\32\3\32\3\32\5\32")
        buf.write("\u0365\n\32\3\32\7\32\u0368\n\32\f\32\16\32\u036b\13\32")
        buf.write("\3\33\3\33\3\33\3\33\3\33\3\33\3\33\7\33\u0374\n\33\f")
        buf.write("\33\16\33\u0377\13\33\3\33\3\33\3\33\3\33\5\33\u037d\n")
        buf.write("\33\3\34\3\34\5\34\u0381\n\34\3\34\3\34\5\34\u0385\n\34")
        buf.write("\3\35\3\35\5\35\u0389\n\35\3\35\3\35\3\35\7\35\u038e\n")
        buf.write("\35\f\35\16\35\u0391\13\35\3\35\3\35\3\35\3\35\7\35\u0397")
        buf.write("\n\35\f\35\16\35\u039a\13\35\5\35\u039c\n\35\3\35\3\35")
        buf.write("\5\35\u03a0\n\35\3\35\3\35\3\35\5\35\u03a5\n\35\3\35\3")
        buf.write("\35\5\35\u03a9\n\35\3\36\5\36\u03ac\n\36\3\36\3\36\3\36")
        buf.write("\7\36\u03b1\n\36\f\36\16\36\u03b4\13\36\3\37\3\37\3\37")
        buf.write("\3\37\3\37\3\37\7\37\u03bc\n\37\f\37\16\37\u03bf\13\37")
        buf.write("\5\37\u03c1\n\37\3\37\3\37\3\37\3\37\3\37\3\37\7\37\u03c9")
        buf.write("\n\37\f\37\16\37\u03cc\13\37\5\37\u03ce\n\37\3\37\3\37")
        buf.write("\3\37\3\37\3\37\3\37\3\37\7\37\u03d7\n\37\f\37\16\37\u03da")
        buf.write("\13\37\3\37\3\37\5\37\u03de\n\37\3 \3 \3 \3 \7 \u03e4")
        buf.write("\n \f \16 \u03e7\13 \5 \u03e9\n \3 \3 \5 \u03ed\n \3!")
        buf.write("\3!\5!\u03f1\n!\3!\3!\3!\3!\3!\3\"\3\"\3#\3#\5#\u03fc")
        buf.write("\n#\3#\5#\u03ff\n#\3#\3#\3#\3#\3#\5#\u0406\n#\3$\3$\3")
        buf.write("$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\5$\u0419\n")
        buf.write("$\7$\u041b\n$\f$\16$\u041e\13$\3%\5%\u0421\n%\3%\3%\5")
        buf.write("%\u0425\n%\3%\3%\5%\u0429\n%\3%\3%\5%\u042d\n%\5%\u042f")
        buf.write("\n%\3&\3&\3&\3&\3&\3&\3&\7&\u0438\n&\f&\16&\u043b\13&")
        buf.write("\3&\3&\5&\u043f\n&\3\'\3\'\3\'\3\'\3\'\3\'\3\'\5\'\u0448")
        buf.write("\n\'\3(\3(\3)\3)\5)\u044e\n)\3)\3)\5)\u0452\n)\5)\u0454")
        buf.write("\n)\3*\3*\3*\3*\7*\u045a\n*\f*\16*\u045d\13*\3*\3*\3+")
        buf.write("\3+\3+\3+\3+\3+\3+\3+\3+\3+\7+\u046b\n+\f+\16+\u046e\13")
        buf.write("+\3+\3+\3+\5+\u0473\n+\3+\3+\3+\3+\3+\3+\3+\3+\3+\5+\u047e")
        buf.write("\n+\3,\3,\3-\3-\3-\5-\u0485\n-\3-\3-\5-\u0489\n-\3-\3")
        buf.write("-\3-\3-\3-\3-\7-\u0491\n-\f-\16-\u0494\13-\3.\3.\3.\3")
        buf.write(".\3.\3.\3.\3.\3.\3.\5.\u04a0\n.\3.\3.\3.\3.\3.\3.\5.\u04a8")
        buf.write("\n.\3.\3.\3.\3.\3.\7.\u04af\n.\f.\16.\u04b2\13.\3.\3.")
        buf.write("\3.\5.\u04b7\n.\3.\3.\3.\3.\3.\3.\5.\u04bf\n.\3.\3.\3")
        buf.write(".\3.\5.\u04c5\n.\3.\3.\5.\u04c9\n.\3.\3.\3.\5.\u04ce\n")
        buf.write(".\3.\3.\3.\5.\u04d3\n.\3/\3/\3/\3/\5/\u04d9\n/\3/\3/\3")
        buf.write("/\3/\3/\3/\3/\3/\3/\3/\3/\3/\7/\u04e7\n/\f/\16/\u04ea")
        buf.write("\13/\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60")
        buf.write("\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60")
        buf.write("\3\60\3\60\3\60\6\60\u0504\n\60\r\60\16\60\u0505\3\60")
        buf.write("\3\60\3\60\3\60\3\60\3\60\3\60\7\60\u050f\n\60\f\60\16")
        buf.write("\60\u0512\13\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\5\60")
        buf.write("\u051b\n\60\3\60\5\60\u051e\n\60\3\60\3\60\3\60\5\60\u0523")
        buf.write("\n\60\3\60\3\60\3\60\7\60\u0528\n\60\f\60\16\60\u052b")
        buf.write("\13\60\5\60\u052d\n\60\3\60\3\60\3\60\3\60\3\60\7\60\u0534")
        buf.write("\n\60\f\60\16\60\u0537\13\60\5\60\u0539\n\60\3\60\3\60")
        buf.write("\5\60\u053d\n\60\3\60\5\60\u0540\n\60\3\60\5\60\u0543")
        buf.write("\n\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\7\60\u054d")
        buf.write("\n\60\f\60\16\60\u0550\13\60\5\60\u0552\n\60\3\60\3\60")
        buf.write("\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60")
        buf.write("\3\60\3\60\6\60\u0563\n\60\r\60\16\60\u0564\3\60\3\60")
        buf.write("\5\60\u0569\n\60\3\60\3\60\3\60\3\60\6\60\u056f\n\60\r")
        buf.write("\60\16\60\u0570\3\60\3\60\5\60\u0575\n\60\3\60\3\60\3")
        buf.write("\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60")
        buf.write("\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\7\60\u058c\n")
        buf.write("\60\f\60\16\60\u058f\13\60\5\60\u0591\n\60\3\60\3\60\3")
        buf.write("\60\3\60\3\60\3\60\3\60\5\60\u059a\n\60\3\60\3\60\3\60")
        buf.write("\3\60\5\60\u05a0\n\60\3\60\3\60\3\60\3\60\5\60\u05a6\n")
        buf.write("\60\3\60\3\60\3\60\3\60\5\60\u05ac\n\60\3\60\3\60\3\60")
        buf.write("\3\60\3\60\3\60\3\60\3\60\5\60\u05b6\n\60\3\60\3\60\3")
        buf.write("\60\3\60\3\60\3\60\3\60\5\60\u05bf\n\60\3\60\3\60\3\60")
        buf.write("\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60")
        buf.write("\3\60\3\60\3\60\3\60\7\60\u05d3\n\60\f\60\16\60\u05d6")
        buf.write("\13\60\5\60\u05d8\n\60\3\60\5\60\u05db\n\60\3\60\3\60")
        buf.write("\3\60\3\60\3\60\3\60\3\60\3\60\7\60\u05e5\n\60\f\60\16")
        buf.write("\60\u05e8\13\60\3\61\3\61\3\61\3\61\5\61\u05ee\n\61\5")
        buf.write("\61\u05f0\n\61\3\62\3\62\3\62\3\62\5\62\u05f6\n\62\3\63")
        buf.write("\3\63\3\63\3\63\3\63\3\63\5\63\u05fe\n\63\3\64\3\64\3")
        buf.write("\65\3\65\3\66\3\66\3\67\3\67\5\67\u0608\n\67\3\67\3\67")
        buf.write("\3\67\3\67\5\67\u060e\n\67\38\38\39\39\3:\3:\3:\3:\7:")
        buf.write("\u0618\n:\f:\16:\u061b\13:\5:\u061d\n:\3:\3:\3;\3;\3;")
        buf.write("\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3")
        buf.write(";\7;\u0636\n;\f;\16;\u0639\13;\3;\3;\3;\3;\3;\3;\3;\7")
        buf.write(";\u0642\n;\f;\16;\u0645\13;\3;\3;\5;\u0649\n;\3;\3;\3")
        buf.write(";\3;\3;\5;\u0650\n;\3;\3;\7;\u0654\n;\f;\16;\u0657\13")
        buf.write(";\3<\3<\5<\u065b\n<\3=\3=\3=\3=\5=\u0661\n=\3>\3>\3>\3")
        buf.write(">\3>\3?\3?\3?\3?\3?\3?\3@\3@\3@\3@\3@\3@\3@\7@\u0675\n")
        buf.write("@\f@\16@\u0678\13@\5@\u067a\n@\3@\3@\3@\3@\3@\7@\u0681")
        buf.write("\n@\f@\16@\u0684\13@\5@\u0686\n@\3@\5@\u0689\n@\3@\3@")
        buf.write("\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\5A\u069d")
        buf.write("\nA\3B\3B\3B\3B\3B\3B\3B\3B\3B\5B\u06a8\nB\3C\3C\3C\3")
        buf.write("C\5C\u06ae\nC\3D\3D\3D\3D\3D\5D\u06b5\nD\3E\3E\3E\3E\3")
        buf.write("E\3E\3E\5E\u06be\nE\3F\3F\3F\3F\3F\5F\u06c5\nF\3G\3G\3")
        buf.write("G\3G\5G\u06cb\nG\3H\3H\3H\7H\u06d0\nH\fH\16H\u06d3\13")
        buf.write("H\3I\3I\3I\5I\u06d8\nI\3J\3J\3J\3J\3J\5J\u06df\nJ\3K\3")
        buf.write("K\3K\7K\u06e4\nK\fK\16K\u06e7\13K\3L\3L\3L\3L\3L\5L\u06ee")
        buf.write("\nL\3M\3M\3M\5M\u06f3\nM\3N\3N\3N\2\b\62FX\\^tO\2\4\6")
        buf.write("\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\66")
        buf.write("8:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084")
        buf.write("\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096")
        buf.write("\u0098\u009a\2\30\4\2\34\34\u0099\u0099\4\2\63\63aa\4")
        buf.write("\2KKYY\4\2??ZZ\4\2\16\16\u00e2\u00e2\4\2>>\u00c3\u00c3")
        buf.write("\4\2\25\25\65\65\4\2GGhh\4\2\16\1688\4\2\27\27\u00b3\u00b3")
        buf.write("\3\2\u00d9\u00da\3\2\u00db\u00dd\3\2\u00d3\u00d8\5\2\16")
        buf.write("\16\22\22\u00ae\u00ae\4\2EE\u00bd\u00bd\7\2\61\61VVrs")
        buf.write("\u00a6\u00a6\u00d1\u00d1\3\2vy\4\2HH\u008d\u008d\5\2R")
        buf.write("Ree\u00b7\u00b7\6\299bbpp\u00c8\u00c8\4\2\u0082\u0082")
        buf.write("\u00d0\u00d0\61\2\f\16\20\20\22\23\25\27\32\34\37$))+")
        buf.write("+/\61\63\63\65\65\67\6799??BBDDFHJJMRVXZZ\\\\__abdegi")
        buf.write("kkmmptv{\177\u0080\u0082\u0083\u0086\u0086\u0088\u008d")
        buf.write("\u008f\u0092\u0094\u009c\u009e\u00a0\u00a2\u00a7\u00a9")
        buf.write("\u00b3\u00b5\u00b7\u00b9\u00bc\u00be\u00bf\u00c1\u00c2")
        buf.write("\u00c5\u00c6\u00c8\u00c8\u00ca\u00cb\u00cf\u00d2\2\u080b")
        buf.write("\2\u009c\3\2\2\2\4\u009f\3\2\2\2\6\u00a2\3\2\2\2\b\u02d4")
        buf.write("\3\2\2\2\n\u02d7\3\2\2\2\f\u02db\3\2\2\2\16\u02e9\3\2")
        buf.write("\2\2\20\u02eb\3\2\2\2\22\u02f9\3\2\2\2\24\u02ff\3\2\2")
        buf.write("\2\26\u030a\3\2\2\2\30\u030e\3\2\2\2\32\u0314\3\2\2\2")
        buf.write("\34\u031b\3\2\2\2\36\u0320\3\2\2\2 \u0323\3\2\2\2\"\u0327")
        buf.write("\3\2\2\2$\u0329\3\2\2\2&\u032c\3\2\2\2(\u0333\3\2\2\2")
        buf.write("*\u0338\3\2\2\2,\u0343\3\2\2\2.\u0345\3\2\2\2\60\u0347")
        buf.write("\3\2\2\2\62\u0358\3\2\2\2\64\u037c\3\2\2\2\66\u037e\3")
        buf.write("\2\2\28\u0386\3\2\2\2:\u03ab\3\2\2\2<\u03dd\3\2\2\2>\u03ec")
        buf.write("\3\2\2\2@\u03ee\3\2\2\2B\u03f7\3\2\2\2D\u0405\3\2\2\2")
        buf.write("F\u0407\3\2\2\2H\u042e\3\2\2\2J\u043e\3\2\2\2L\u0440\3")
        buf.write("\2\2\2N\u0449\3\2\2\2P\u044b\3\2\2\2R\u0455\3\2\2\2T\u047d")
        buf.write("\3\2\2\2V\u047f\3\2\2\2X\u0488\3\2\2\2Z\u04d2\3\2\2\2")
        buf.write("\\\u04d8\3\2\2\2^\u05da\3\2\2\2`\u05ef\3\2\2\2b\u05f5")
        buf.write("\3\2\2\2d\u05fd\3\2\2\2f\u05ff\3\2\2\2h\u0601\3\2\2\2")
        buf.write("j\u0603\3\2\2\2l\u0605\3\2\2\2n\u060f\3\2\2\2p\u0611\3")
        buf.write("\2\2\2r\u0613\3\2\2\2t\u064f\3\2\2\2v\u065a\3\2\2\2x\u0660")
        buf.write("\3\2\2\2z\u0662\3\2\2\2|\u0667\3\2\2\2~\u066d\3\2\2\2")
        buf.write("\u0080\u069c\3\2\2\2\u0082\u06a7\3\2\2\2\u0084\u06ad\3")
        buf.write("\2\2\2\u0086\u06b4\3\2\2\2\u0088\u06bd\3\2\2\2\u008a\u06c4")
        buf.write("\3\2\2\2\u008c\u06ca\3\2\2\2\u008e\u06cc\3\2\2\2\u0090")
        buf.write("\u06d7\3\2\2\2\u0092\u06de\3\2\2\2\u0094\u06e0\3\2\2\2")
        buf.write("\u0096\u06ed\3\2\2\2\u0098\u06f2\3\2\2\2\u009a\u06f4\3")
        buf.write("\2\2\2\u009c\u009d\5\b\5\2\u009d\u009e\7\2\2\3\u009e\3")
        buf.write("\3\2\2\2\u009f\u00a0\5V,\2\u00a0\u00a1\7\2\2\3\u00a1\5")
        buf.write("\3\2\2\2\u00a2\u00a3\5\"\22\2\u00a3\u00a4\7\2\2\3\u00a4")
        buf.write("\7\3\2\2\2\u00a5\u02d5\5\n\6\2\u00a6\u00a7\7\u00c5\2\2")
        buf.write("\u00a7\u02d5\5\u0096L\2\u00a8\u00a9\7\u00c5\2\2\u00a9")
        buf.write("\u00aa\5\u0096L\2\u00aa\u00ab\7\3\2\2\u00ab\u00ac\5\u0096")
        buf.write("L\2\u00ac\u02d5\3\2\2\2\u00ad\u00ae\7&\2\2\u00ae\u00b2")
        buf.write("\7\u00a4\2\2\u00af\u00b0\7W\2\2\u00b0\u00b1\7}\2\2\u00b1")
        buf.write("\u00b3\7A\2\2\u00b2\u00af\3\2\2\2\u00b2\u00b3\3\2\2\2")
        buf.write("\u00b3\u00b4\3\2\2\2\u00b4\u00b7\5\u008eH\2\u00b5\u00b6")
        buf.write("\7\u00ce\2\2\u00b6\u00b8\5\24\13\2\u00b7\u00b5\3\2\2\2")
        buf.write("\u00b7\u00b8\3\2\2\2\u00b8\u02d5\3\2\2\2\u00b9\u00ba\7")
        buf.write(":\2\2\u00ba\u00bd\7\u00a4\2\2\u00bb\u00bc\7W\2\2\u00bc")
        buf.write("\u00be\7A\2\2\u00bd\u00bb\3\2\2\2\u00bd\u00be\3\2\2\2")
        buf.write("\u00be\u00bf\3\2\2\2\u00bf\u00c1\5\u008eH\2\u00c0\u00c2")
        buf.write("\t\2\2\2\u00c1\u00c0\3\2\2\2\u00c1\u00c2\3\2\2\2\u00c2")
        buf.write("\u02d5\3\2\2\2\u00c3\u00c4\7\17\2\2\u00c4\u00c5\7\u00a4")
        buf.write("\2\2\u00c5\u00c6\5\u008eH\2\u00c6\u00c7\7\u0094\2\2\u00c7")
        buf.write("\u00c8\7\u00bb\2\2\u00c8\u00c9\5\u0096L\2\u00c9\u02d5")
        buf.write("\3\2\2\2\u00ca\u00cb\7&\2\2\u00cb\u00cf\7\u00b4\2\2\u00cc")
        buf.write("\u00cd\7W\2\2\u00cd\u00ce\7}\2\2\u00ce\u00d0\7A\2\2\u00cf")
        buf.write("\u00cc\3\2\2\2\u00cf\u00d0\3\2\2\2\u00d0\u00d1\3\2\2\2")
        buf.write("\u00d1\u00d3\5\u008eH\2\u00d2\u00d4\5R*\2\u00d3\u00d2")
        buf.write("\3\2\2\2\u00d3\u00d4\3\2\2\2\u00d4\u00d7\3\2\2\2\u00d5")
        buf.write("\u00d6\7\"\2\2\u00d6\u00d8\5`\61\2\u00d7\u00d5\3\2\2\2")
        buf.write("\u00d7\u00d8\3\2\2\2\u00d8\u00db\3\2\2\2\u00d9\u00da\7")
        buf.write("\u00ce\2\2\u00da\u00dc\5\24\13\2\u00db\u00d9\3\2\2\2\u00db")
        buf.write("\u00dc\3\2\2\2\u00dc\u00dd\3\2\2\2\u00dd\u00e3\7\24\2")
        buf.write("\2\u00de\u00e4\5\n\6\2\u00df\u00e0\7\4\2\2\u00e0\u00e1")
        buf.write("\5\n\6\2\u00e1\u00e2\7\5\2\2\u00e2\u00e4\3\2\2\2\u00e3")
        buf.write("\u00de\3\2\2\2\u00e3\u00df\3\2\2\2\u00e4\u00ea\3\2\2\2")
        buf.write("\u00e5\u00e7\7\u00ce\2\2\u00e6\u00e8\7z\2\2\u00e7\u00e6")
        buf.write("\3\2\2\2\u00e7\u00e8\3\2\2\2\u00e8\u00e9\3\2\2\2\u00e9")
        buf.write("\u00eb\7/\2\2\u00ea\u00e5\3\2\2\2\u00ea\u00eb\3\2\2\2")
        buf.write("\u00eb\u02d5\3\2\2\2\u00ec\u00ed\7&\2\2\u00ed\u00f1\7")
        buf.write("\u00b4\2\2\u00ee\u00ef\7W\2\2\u00ef\u00f0\7}\2\2\u00f0")
        buf.write("\u00f2\7A\2\2\u00f1\u00ee\3\2\2\2\u00f1\u00f2\3\2\2\2")
        buf.write("\u00f2\u00f3\3\2\2\2\u00f3\u00f4\5\u008eH\2\u00f4\u00f5")
        buf.write("\7\4\2\2\u00f5\u00fa\5\16\b\2\u00f6\u00f7\7\6\2\2\u00f7")
        buf.write("\u00f9\5\16\b\2\u00f8\u00f6\3\2\2\2\u00f9\u00fc\3\2\2")
        buf.write("\2\u00fa\u00f8\3\2\2\2\u00fa\u00fb\3\2\2\2\u00fb\u00fd")
        buf.write("\3\2\2\2\u00fc\u00fa\3\2\2\2\u00fd\u0100\7\5\2\2\u00fe")
        buf.write("\u00ff\7\"\2\2\u00ff\u0101\5`\61\2\u0100\u00fe\3\2\2\2")
        buf.write("\u0100\u0101\3\2\2\2\u0101\u0104\3\2\2\2\u0102\u0103\7")
        buf.write("\u00ce\2\2\u0103\u0105\5\24\13\2\u0104\u0102\3\2\2\2\u0104")
        buf.write("\u0105\3\2\2\2\u0105\u02d5\3\2\2\2\u0106\u0107\7:\2\2")
        buf.write("\u0107\u010a\7\u00b4\2\2\u0108\u0109\7W\2\2\u0109\u010b")
        buf.write("\7A\2\2\u010a\u0108\3\2\2\2\u010a\u010b\3\2\2\2\u010b")
        buf.write("\u010c\3\2\2\2\u010c\u02d5\5\u008eH\2\u010d\u010e\7]\2")
        buf.write("\2\u010e\u010f\7`\2\2\u010f\u0111\5\u008eH\2\u0110\u0112")
        buf.write("\5R*\2\u0111\u0110\3\2\2\2\u0111\u0112\3\2\2\2\u0112\u0113")
        buf.write("\3\2\2\2\u0113\u0114\5\n\6\2\u0114\u02d5\3\2\2\2\u0115")
        buf.write("\u0116\7\64\2\2\u0116\u0117\7K\2\2\u0117\u011a\5\u008e")
        buf.write("H\2\u0118\u0119\7\u00cd\2\2\u0119\u011b\5X-\2\u011a\u0118")
        buf.write("\3\2\2\2\u011a\u011b\3\2\2\2\u011b\u02d5\3\2\2\2\u011c")
        buf.write("\u011d\7\17\2\2\u011d\u0120\7\u00b4\2\2\u011e\u011f\7")
        buf.write("W\2\2\u011f\u0121\7A\2\2\u0120\u011e\3\2\2\2\u0120\u0121")
        buf.write("\3\2\2\2\u0121\u0122\3\2\2\2\u0122\u0123\5\u008eH\2\u0123")
        buf.write("\u0124\7\u0094\2\2\u0124\u0125\7\u00bb\2\2\u0125\u0126")
        buf.write("\5\u008eH\2\u0126\u02d5\3\2\2\2\u0127\u0128\7\17\2\2\u0128")
        buf.write("\u012b\7\u00b4\2\2\u0129\u012a\7W\2\2\u012a\u012c\7A\2")
        buf.write("\2\u012b\u0129\3\2\2\2\u012b\u012c\3\2\2\2\u012c\u012d")
        buf.write("\3\2\2\2\u012d\u012e\5\u008eH\2\u012e\u012f\7\u0094\2")
        buf.write("\2\u012f\u0132\7 \2\2\u0130\u0131\7W\2\2\u0131\u0133\7")
        buf.write("A\2\2\u0132\u0130\3\2\2\2\u0132\u0133\3\2\2\2\u0133\u0134")
        buf.write("\3\2\2\2\u0134\u0135\5\u0096L\2\u0135\u0136\7\u00bb\2")
        buf.write("\2\u0136\u0137\5\u0096L\2\u0137\u02d5\3\2\2\2\u0138\u0139")
        buf.write("\7\17\2\2\u0139\u013c\7\u00b4\2\2\u013a\u013b\7W\2\2\u013b")
        buf.write("\u013d\7A\2\2\u013c\u013a\3\2\2\2\u013c\u013d\3\2\2\2")
        buf.write("\u013d\u013e\3\2\2\2\u013e\u013f\5\u008eH\2\u013f\u0140")
        buf.write("\7:\2\2\u0140\u0143\7 \2\2\u0141\u0142\7W\2\2\u0142\u0144")
        buf.write("\7A\2\2\u0143\u0141\3\2\2\2\u0143\u0144\3\2\2\2\u0144")
        buf.write("\u0145\3\2\2\2\u0145\u0146\5\u008eH\2\u0146\u02d5\3\2")
        buf.write("\2\2\u0147\u0148\7\17\2\2\u0148\u014b\7\u00b4\2\2\u0149")
        buf.write("\u014a\7W\2\2\u014a\u014c\7A\2\2\u014b\u0149\3\2\2\2\u014b")
        buf.write("\u014c\3\2\2\2\u014c\u014d\3\2\2\2\u014d\u014e\5\u008e")
        buf.write("H\2\u014e\u014f\7\f\2\2\u014f\u0153\7 \2\2\u0150\u0151")
        buf.write("\7W\2\2\u0151\u0152\7}\2\2\u0152\u0154\7A\2\2\u0153\u0150")
        buf.write("\3\2\2\2\u0153\u0154\3\2\2\2\u0154\u0155\3\2\2\2\u0155")
        buf.write("\u0156\5\20\t\2\u0156\u02d5\3\2\2\2\u0157\u0158\7\20\2")
        buf.write("\2\u0158\u015b\5\u008eH\2\u0159\u015a\7\u00ce\2\2\u015a")
        buf.write("\u015c\5\24\13\2\u015b\u0159\3\2\2\2\u015b\u015c\3\2\2")
        buf.write("\2\u015c\u02d5\3\2\2\2\u015d\u0160\7&\2\2\u015e\u015f")
        buf.write("\7\u0084\2\2\u015f\u0161\7\u0096\2\2\u0160\u015e\3\2\2")
        buf.write("\2\u0160\u0161\3\2\2\2\u0161\u0162\3\2\2\2\u0162\u0163")
        buf.write("\7\u00cb\2\2\u0163\u0166\5\u008eH\2\u0164\u0165\7\u00a7")
        buf.write("\2\2\u0165\u0167\t\3\2\2\u0166\u0164\3\2\2\2\u0166\u0167")
        buf.write("\3\2\2\2\u0167\u0168\3\2\2\2\u0168\u0169\7\24\2\2\u0169")
        buf.write("\u016a\5\n\6\2\u016a\u02d5\3\2\2\2\u016b\u016c\7:\2\2")
        buf.write("\u016c\u016f\7\u00cb\2\2\u016d\u016e\7W\2\2\u016e\u0170")
        buf.write("\7A\2\2\u016f\u016d\3\2\2\2\u016f\u0170\3\2\2\2\u0170")
        buf.write("\u0171\3\2\2\2\u0171\u02d5\5\u008eH\2\u0172\u0175\7&\2")
        buf.write("\2\u0173\u0174\7\u0084\2\2\u0174\u0176\7\u0096\2\2\u0175")
        buf.write("\u0173\3\2\2\2\u0175\u0176\3\2\2\2\u0176\u0177\3\2\2\2")
        buf.write("\u0177\u0178\7M\2\2\u0178\u0179\5\u008eH\2\u0179\u0182")
        buf.write("\7\4\2\2\u017a\u017f\5\30\r\2\u017b\u017c\7\6\2\2\u017c")
        buf.write("\u017e\5\30\r\2\u017d\u017b\3\2\2\2\u017e\u0181\3\2\2")
        buf.write("\2\u017f\u017d\3\2\2\2\u017f\u0180\3\2\2\2\u0180\u0183")
        buf.write("\3\2\2\2\u0181\u017f\3\2\2\2\u0182\u017a\3\2\2\2\u0182")
        buf.write("\u0183\3\2\2\2\u0183\u0184\3\2\2\2\u0184\u0185\7\5\2\2")
        buf.write("\u0185\u0186\7\u009b\2\2\u0186\u0189\5t;\2\u0187\u0188")
        buf.write("\7\"\2\2\u0188\u018a\5`\61\2\u0189\u0187\3\2\2\2\u0189")
        buf.write("\u018a\3\2\2\2\u018a\u018b\3\2\2\2\u018b\u018c\5\32\16")
        buf.write("\2\u018c\u018d\5\"\22\2\u018d\u02d5\3\2\2\2\u018e\u018f")
        buf.write("\7\17\2\2\u018f\u0190\7M\2\2\u0190\u0192\5\u008eH\2\u0191")
        buf.write("\u0193\5r:\2\u0192\u0191\3\2\2\2\u0192\u0193\3\2\2\2\u0193")
        buf.write("\u0194\3\2\2\2\u0194\u0195\5\36\20\2\u0195\u02d5\3\2\2")
        buf.write("\2\u0196\u0197\7:\2\2\u0197\u019a\7M\2\2\u0198\u0199\7")
        buf.write("W\2\2\u0199\u019b\7A\2\2\u019a\u0198\3\2\2\2\u019a\u019b")
        buf.write("\3\2\2\2\u019b\u019c\3\2\2\2\u019c\u019e\5\u008eH\2\u019d")
        buf.write("\u019f\5r:\2\u019e\u019d\3\2\2\2\u019e\u019f\3\2\2\2\u019f")
        buf.write("\u02d5\3\2\2\2\u01a0\u01a1\7\32\2\2\u01a1\u01a2\5\u008e")
        buf.write("H\2\u01a2\u01ab\7\4\2\2\u01a3\u01a8\5\u008aF\2\u01a4\u01a5")
        buf.write("\7\6\2\2\u01a5\u01a7\5\u008aF\2\u01a6\u01a4\3\2\2\2\u01a7")
        buf.write("\u01aa\3\2\2\2\u01a8\u01a6\3\2\2\2\u01a8\u01a9\3\2\2\2")
        buf.write("\u01a9\u01ac\3\2\2\2\u01aa\u01a8\3\2\2\2\u01ab\u01a3\3")
        buf.write("\2\2\2\u01ab\u01ac\3\2\2\2\u01ac\u01ad\3\2\2\2\u01ad\u01ae")
        buf.write("\7\5\2\2\u01ae\u02d5\3\2\2\2\u01af\u01b0\7&\2\2\u01b0")
        buf.write("\u01b1\7\u009e\2\2\u01b1\u01b5\5\u0096L\2\u01b2\u01b3")
        buf.write("\7\u00ce\2\2\u01b3\u01b4\7\r\2\2\u01b4\u01b6\5\u0090I")
        buf.write("\2\u01b5\u01b2\3\2\2\2\u01b5\u01b6\3\2\2\2\u01b6\u02d5")
        buf.write("\3\2\2\2\u01b7\u01b8\7:\2\2\u01b8\u01b9\7\u009e\2\2\u01b9")
        buf.write("\u02d5\5\u0096L\2\u01ba\u01bb\7O\2\2\u01bb\u01bc\5\u0094")
        buf.write("K\2\u01bc\u01bd\7\u00bb\2\2\u01bd\u01c2\5\u0092J\2\u01be")
        buf.write("\u01bf\7\6\2\2\u01bf\u01c1\5\u0092J\2\u01c0\u01be\3\2")
        buf.write("\2\2\u01c1\u01c4\3\2\2\2\u01c2\u01c0\3\2\2\2\u01c2\u01c3")
        buf.write("\3\2\2\2\u01c3\u01c8\3\2\2\2\u01c4\u01c2\3\2\2\2\u01c5")
        buf.write("\u01c6\7\u00ce\2\2\u01c6\u01c7\7\r\2\2\u01c7\u01c9\7\u0083")
        buf.write("\2\2\u01c8\u01c5\3\2\2\2\u01c8\u01c9\3\2\2\2\u01c9\u01cd")
        buf.write("\3\2\2\2\u01ca\u01cb\7P\2\2\u01cb\u01cc\7\31\2\2\u01cc")
        buf.write("\u01ce\5\u0090I\2\u01cd\u01ca\3\2\2\2\u01cd\u01ce\3\2")
        buf.write("\2\2\u01ce\u02d5\3\2\2\2\u01cf\u01d3\7\u009c\2\2\u01d0")
        buf.write("\u01d1\7\r\2\2\u01d1\u01d2\7\u0083\2\2\u01d2\u01d4\7I")
        buf.write("\2\2\u01d3\u01d0\3\2\2\2\u01d3\u01d4\3\2\2\2\u01d4\u01d5")
        buf.write("\3\2\2\2\u01d5\u01d6\5\u0094K\2\u01d6\u01d7\7K\2\2\u01d7")
        buf.write("\u01dc\5\u0092J\2\u01d8\u01d9\7\6\2\2\u01d9\u01db\5\u0092")
        buf.write("J\2\u01da\u01d8\3\2\2\2\u01db\u01de\3\2\2\2\u01dc\u01da")
        buf.write("\3\2\2\2\u01dc\u01dd\3\2\2\2\u01dd\u01e2\3\2\2\2\u01de")
        buf.write("\u01dc\3\2\2\2\u01df\u01e0\7P\2\2\u01e0\u01e1\7\31\2\2")
        buf.write("\u01e1\u01e3\5\u0090I\2\u01e2\u01df\3\2\2\2\u01e2\u01e3")
        buf.write("\3\2\2\2\u01e3\u02d5\3\2\2\2\u01e4\u01e5\7\u00ab\2\2\u01e5")
        buf.write("\u01e9\7\u009e\2\2\u01e6\u01ea\7\16\2\2\u01e7\u01ea\7")
        buf.write("{\2\2\u01e8\u01ea\5\u0096L\2\u01e9\u01e6\3\2\2\2\u01e9")
        buf.write("\u01e7\3\2\2\2\u01e9\u01e8\3\2\2\2\u01ea\u02d5\3\2\2\2")
        buf.write("\u01eb\u01f6\7O\2\2\u01ec\u01f1\5\u008cG\2\u01ed\u01ee")
        buf.write("\7\6\2\2\u01ee\u01f0\5\u008cG\2\u01ef\u01ed\3\2\2\2\u01f0")
        buf.write("\u01f3\3\2\2\2\u01f1\u01ef\3\2\2\2\u01f1\u01f2\3\2\2\2")
        buf.write("\u01f2\u01f7\3\2\2\2\u01f3\u01f1\3\2\2\2\u01f4\u01f5\7")
        buf.write("\16\2\2\u01f5\u01f7\7\u008f\2\2\u01f6\u01ec\3\2\2\2\u01f6")
        buf.write("\u01f4\3\2\2\2\u01f7\u01f8\3\2\2\2\u01f8\u01fa\7\u0081")
        buf.write("\2\2\u01f9\u01fb\7\u00b4\2\2\u01fa\u01f9\3\2\2\2\u01fa")
        buf.write("\u01fb\3\2\2\2\u01fb\u01fc\3\2\2\2\u01fc\u01fd\5\u008e")
        buf.write("H\2\u01fd\u01fe\7\u00bb\2\2\u01fe\u0202\5\u0092J\2\u01ff")
        buf.write("\u0200\7\u00ce\2\2\u0200\u0201\7O\2\2\u0201\u0203\7\u0083")
        buf.write("\2\2\u0202\u01ff\3\2\2\2\u0202\u0203\3\2\2\2\u0203\u02d5")
        buf.write("\3\2\2\2\u0204\u0208\7\u009c\2\2\u0205\u0206\7O\2\2\u0206")
        buf.write("\u0207\7\u0083\2\2\u0207\u0209\7I\2\2\u0208\u0205\3\2")
        buf.write("\2\2\u0208\u0209\3\2\2\2\u0209\u0214\3\2\2\2\u020a\u020f")
        buf.write("\5\u008cG\2\u020b\u020c\7\6\2\2\u020c\u020e\5\u008cG\2")
        buf.write("\u020d\u020b\3\2\2\2\u020e\u0211\3\2\2\2\u020f\u020d\3")
        buf.write("\2\2\2\u020f\u0210\3\2\2\2\u0210\u0215\3\2\2\2\u0211\u020f")
        buf.write("\3\2\2\2\u0212\u0213\7\16\2\2\u0213\u0215\7\u008f\2\2")
        buf.write("\u0214\u020a\3\2\2\2\u0214\u0212\3\2\2\2\u0215\u0216\3")
        buf.write("\2\2\2\u0216\u0218\7\u0081\2\2\u0217\u0219\7\u00b4\2\2")
        buf.write("\u0218\u0217\3\2\2\2\u0218\u0219\3\2\2\2\u0219\u021a\3")
        buf.write("\2\2\2\u021a\u021b\5\u008eH\2\u021b\u021c\7K\2\2\u021c")
        buf.write("\u021d\5\u0092J\2\u021d\u02d5\3\2\2\2\u021e\u021f\7\u00ad")
        buf.write("\2\2\u021f\u0225\7Q\2\2\u0220\u0222\7\u0081\2\2\u0221")
        buf.write("\u0223\7\u00b4\2\2\u0222\u0221\3\2\2\2\u0222\u0223\3\2")
        buf.write("\2\2\u0223\u0224\3\2\2\2\u0224\u0226\5\u008eH\2\u0225")
        buf.write("\u0220\3\2\2\2\u0225\u0226\3\2\2\2\u0226\u02d5\3\2\2\2")
        buf.write("\u0227\u0229\7B\2\2\u0228\u022a\7\20\2\2\u0229\u0228\3")
        buf.write("\2\2\2\u0229\u022a\3\2\2\2\u022a\u022c\3\2\2\2\u022b\u022d")
        buf.write("\7\u00ca\2\2\u022c\u022b\3\2\2\2\u022c\u022d\3\2\2\2\u022d")
        buf.write("\u0239\3\2\2\2\u022e\u022f\7\4\2\2\u022f\u0234\5\u0084")
        buf.write("C\2\u0230\u0231\7\6\2\2\u0231\u0233\5\u0084C\2\u0232\u0230")
        buf.write("\3\2\2\2\u0233\u0236\3\2\2\2\u0234\u0232\3\2\2\2\u0234")
        buf.write("\u0235\3\2\2\2\u0235\u0237\3\2\2\2\u0236\u0234\3\2\2\2")
        buf.write("\u0237\u0238\7\5\2\2\u0238\u023a\3\2\2\2\u0239\u022e\3")
        buf.write("\2\2\2\u0239\u023a\3\2\2\2\u023a\u023b\3\2\2\2\u023b\u02d5")
        buf.write("\5\b\5\2\u023c\u023d\7\u00ad\2\2\u023d\u023e\7&\2\2\u023e")
        buf.write("\u023f\7\u00b4\2\2\u023f\u02d5\5\u008eH\2\u0240\u0241")
        buf.write("\7\u00ad\2\2\u0241\u0242\7&\2\2\u0242\u0243\7\u00cb\2")
        buf.write("\2\u0243\u02d5\5\u008eH\2\u0244\u0245\7\u00ad\2\2\u0245")
        buf.write("\u0246\7&\2\2\u0246\u0247\7M\2\2\u0247\u0249\5\u008eH")
        buf.write("\2\u0248\u024a\5r:\2\u0249\u0248\3\2\2\2\u0249\u024a\3")
        buf.write("\2\2\2\u024a\u02d5\3\2\2\2\u024b\u024c\7\u00ad\2\2\u024c")
        buf.write("\u024f\7\u00b5\2\2\u024d\u024e\t\4\2\2\u024e\u0250\5\u008e")
        buf.write("H\2\u024f\u024d\3\2\2\2\u024f\u0250\3\2\2\2\u0250\u0257")
        buf.write("\3\2\2\2\u0251\u0252\7l\2\2\u0252\u0255\5`\61\2\u0253")
        buf.write("\u0254\7=\2\2\u0254\u0256\5`\61\2\u0255\u0253\3\2\2\2")
        buf.write("\u0255\u0256\3\2\2\2\u0256\u0258\3\2\2\2\u0257\u0251\3")
        buf.write("\2\2\2\u0257\u0258\3\2\2\2\u0258\u02d5\3\2\2\2\u0259\u025a")
        buf.write("\7\u00ad\2\2\u025a\u025d\7\u00a5\2\2\u025b\u025c\t\4\2")
        buf.write("\2\u025c\u025e\5\u0096L\2\u025d\u025b\3\2\2\2\u025d\u025e")
        buf.write("\3\2\2\2\u025e\u0265\3\2\2\2\u025f\u0260\7l\2\2\u0260")
        buf.write("\u0263\5`\61\2\u0261\u0262\7=\2\2\u0262\u0264\5`\61\2")
        buf.write("\u0263\u0261\3\2\2\2\u0263\u0264\3\2\2\2\u0264\u0266\3")
        buf.write("\2\2\2\u0265\u025f\3\2\2\2\u0265\u0266\3\2\2\2\u0266\u02d5")
        buf.write("\3\2\2\2\u0267\u0268\7\u00ad\2\2\u0268\u026b\7\37\2\2")
        buf.write("\u0269\u026a\7l\2\2\u026a\u026c\5`\61\2\u026b\u0269\3")
        buf.write("\2\2\2\u026b\u026c\3\2\2\2\u026c\u02d5\3\2\2\2\u026d\u026e")
        buf.write("\7\u00ad\2\2\u026e\u026f\7!\2\2\u026f\u0270\t\4\2\2\u0270")
        buf.write("\u02d5\5\u008eH\2\u0271\u0272\7\u00ad\2\2\u0272\u0273")
        buf.write("\7\u00b1\2\2\u0273\u0274\7I\2\2\u0274\u02d5\5\u008eH\2")
        buf.write("\u0275\u0276\7\u00ad\2\2\u0276\u0277\7\u00b1\2\2\u0277")
        buf.write("\u0278\7I\2\2\u0278\u0279\7\4\2\2\u0279\u027a\58\35\2")
        buf.write("\u027a\u027b\7\5\2\2\u027b\u02d5\3\2\2\2\u027c\u027e\7")
        buf.write("\u00ad\2\2\u027d\u027f\7)\2\2\u027e\u027d\3\2\2\2\u027e")
        buf.write("\u027f\3\2\2\2\u027f\u0280\3\2\2\2\u0280\u0283\7\u009f")
        buf.write("\2\2\u0281\u0282\t\4\2\2\u0282\u0284\5\u0096L\2\u0283")
        buf.write("\u0281\3\2\2\2\u0283\u0284\3\2\2\2\u0284\u02d5\3\2\2\2")
        buf.write("\u0285\u0286\7\u00ad\2\2\u0286\u0287\7\u009e\2\2\u0287")
        buf.write("\u028a\7Q\2\2\u0288\u0289\t\4\2\2\u0289\u028b\5\u0096")
        buf.write("L\2\u028a\u0288\3\2\2\2\u028a\u028b\3\2\2\2\u028b\u02d5")
        buf.write("\3\2\2\2\u028c\u028d\7\66\2\2\u028d\u02d5\5\u008eH\2\u028e")
        buf.write("\u028f\7\65\2\2\u028f\u02d5\5\u008eH\2\u0290\u0291\7\u00ad")
        buf.write("\2\2\u0291\u0298\7N\2\2\u0292\u0293\7l\2\2\u0293\u0296")
        buf.write("\5`\61\2\u0294\u0295\7=\2\2\u0295\u0297\5`\61\2\u0296")
        buf.write("\u0294\3\2\2\2\u0296\u0297\3\2\2\2\u0297\u0299\3\2\2\2")
        buf.write("\u0298\u0292\3\2\2\2\u0298\u0299\3\2\2\2\u0299\u02d5\3")
        buf.write("\2\2\2\u029a\u029b\7\u00ad\2\2\u029b\u02d5\7\u00aa\2\2")
        buf.write("\u029c\u029d\7\u00ab\2\2\u029d\u029e\7\u00aa\2\2\u029e")
        buf.write("\u029f\5\u008eH\2\u029f\u02a0\7\u00d3\2\2\u02a0\u02a1")
        buf.write("\5V,\2\u02a1\u02d5\3\2\2\2\u02a2\u02a3\7\u0097\2\2\u02a3")
        buf.write("\u02a4\7\u00aa\2\2\u02a4\u02d5\5\u008eH\2\u02a5\u02a6")
        buf.write("\7\u00b0\2\2\u02a6\u02af\7\u00bc\2\2\u02a7\u02ac\5\u0086")
        buf.write("D\2\u02a8\u02a9\7\6\2\2\u02a9\u02ab\5\u0086D\2\u02aa\u02a8")
        buf.write("\3\2\2\2\u02ab\u02ae\3\2\2\2\u02ac\u02aa\3\2\2\2\u02ac")
        buf.write("\u02ad\3\2\2\2\u02ad\u02b0\3\2\2\2\u02ae\u02ac\3\2\2\2")
        buf.write("\u02af\u02a7\3\2\2\2\u02af\u02b0\3\2\2\2\u02b0\u02d5\3")
        buf.write("\2\2\2\u02b1\u02b3\7#\2\2\u02b2\u02b4\7\u00cf\2\2\u02b3")
        buf.write("\u02b2\3\2\2\2\u02b3\u02b4\3\2\2\2\u02b4\u02d5\3\2\2\2")
        buf.write("\u02b5\u02b7\7\u00a0\2\2\u02b6\u02b8\7\u00cf\2\2\u02b7")
        buf.write("\u02b6\3\2\2\2\u02b7\u02b8\3\2\2\2\u02b8\u02d5\3\2\2\2")
        buf.write("\u02b9\u02ba\7\u008e\2\2\u02ba\u02bb\5\u0096L\2\u02bb")
        buf.write("\u02bc\7K\2\2\u02bc\u02bd\5\b\5\2\u02bd\u02d5\3\2\2\2")
        buf.write("\u02be\u02bf\7\62\2\2\u02bf\u02c0\7\u008e\2\2\u02c0\u02d5")
        buf.write("\5\u0096L\2\u02c1\u02c2\7@\2\2\u02c2\u02cc\5\u0096L\2")
        buf.write("\u02c3\u02c4\7\u00c7\2\2\u02c4\u02c9\5V,\2\u02c5\u02c6")
        buf.write("\7\6\2\2\u02c6\u02c8\5V,\2\u02c7\u02c5\3\2\2\2\u02c8\u02cb")
        buf.write("\3\2\2\2\u02c9\u02c7\3\2\2\2\u02c9\u02ca\3\2\2\2\u02ca")
        buf.write("\u02cd\3\2\2\2\u02cb\u02c9\3\2\2\2\u02cc\u02c3\3\2\2\2")
        buf.write("\u02cc\u02cd\3\2\2\2\u02cd\u02d5\3\2\2\2\u02ce\u02cf\7")
        buf.write("\66\2\2\u02cf\u02d0\7\\\2\2\u02d0\u02d5\5\u0096L\2\u02d1")
        buf.write("\u02d2\7\66\2\2\u02d2\u02d3\7\u0088\2\2\u02d3\u02d5\5")
        buf.write("\u0096L\2\u02d4\u00a5\3\2\2\2\u02d4\u00a6\3\2\2\2\u02d4")
        buf.write("\u00a8\3\2\2\2\u02d4\u00ad\3\2\2\2\u02d4\u00b9\3\2\2\2")
        buf.write("\u02d4\u00c3\3\2\2\2\u02d4\u00ca\3\2\2\2\u02d4\u00ec\3")
        buf.write("\2\2\2\u02d4\u0106\3\2\2\2\u02d4\u010d\3\2\2\2\u02d4\u0115")
        buf.write("\3\2\2\2\u02d4\u011c\3\2\2\2\u02d4\u0127\3\2\2\2\u02d4")
        buf.write("\u0138\3\2\2\2\u02d4\u0147\3\2\2\2\u02d4\u0157\3\2\2\2")
        buf.write("\u02d4\u015d\3\2\2\2\u02d4\u016b\3\2\2\2\u02d4\u0172\3")
        buf.write("\2\2\2\u02d4\u018e\3\2\2\2\u02d4\u0196\3\2\2\2\u02d4\u01a0")
        buf.write("\3\2\2\2\u02d4\u01af\3\2\2\2\u02d4\u01b7\3\2\2\2\u02d4")
        buf.write("\u01ba\3\2\2\2\u02d4\u01cf\3\2\2\2\u02d4\u01e4\3\2\2\2")
        buf.write("\u02d4\u01eb\3\2\2\2\u02d4\u0204\3\2\2\2\u02d4\u021e\3")
        buf.write("\2\2\2\u02d4\u0227\3\2\2\2\u02d4\u023c\3\2\2\2\u02d4\u0240")
        buf.write("\3\2\2\2\u02d4\u0244\3\2\2\2\u02d4\u024b\3\2\2\2\u02d4")
        buf.write("\u0259\3\2\2\2\u02d4\u0267\3\2\2\2\u02d4\u026d\3\2\2\2")
        buf.write("\u02d4\u0271\3\2\2\2\u02d4\u0275\3\2\2\2\u02d4\u027c\3")
        buf.write("\2\2\2\u02d4\u0285\3\2\2\2\u02d4\u028c\3\2\2\2\u02d4\u028e")
        buf.write("\3\2\2\2\u02d4\u0290\3\2\2\2\u02d4\u029a\3\2\2\2\u02d4")
        buf.write("\u029c\3\2\2\2\u02d4\u02a2\3\2\2\2\u02d4\u02a5\3\2\2\2")
        buf.write("\u02d4\u02b1\3\2\2\2\u02d4\u02b5\3\2\2\2\u02d4\u02b9\3")
        buf.write("\2\2\2\u02d4\u02be\3\2\2\2\u02d4\u02c1\3\2\2\2\u02d4\u02ce")
        buf.write("\3\2\2\2\u02d4\u02d1\3\2\2\2\u02d5\t\3\2\2\2\u02d6\u02d8")
        buf.write("\5\f\7\2\u02d7\u02d6\3\2\2\2\u02d7\u02d8\3\2\2\2\u02d8")
        buf.write("\u02d9\3\2\2\2\u02d9\u02da\5\60\31\2\u02da\13\3\2\2\2")
        buf.write("\u02db\u02dd\7\u00ce\2\2\u02dc\u02de\7\u0093\2\2\u02dd")
        buf.write("\u02dc\3\2\2\2\u02dd\u02de\3\2\2\2\u02de\u02df\3\2\2\2")
        buf.write("\u02df\u02e4\5@!\2\u02e0\u02e1\7\6\2\2\u02e1\u02e3\5@")
        buf.write("!\2\u02e2\u02e0\3\2\2\2\u02e3\u02e6\3\2\2\2\u02e4\u02e2")
        buf.write("\3\2\2\2\u02e4\u02e5\3\2\2\2\u02e5\r\3\2\2\2\u02e6\u02e4")
        buf.write("\3\2\2\2\u02e7\u02ea\5\20\t\2\u02e8\u02ea\5\22\n\2\u02e9")
        buf.write("\u02e7\3\2\2\2\u02e9\u02e8\3\2\2\2\u02ea\17\3\2\2\2\u02eb")
        buf.write("\u02ec\5\u0096L\2\u02ec\u02ef\5t;\2\u02ed\u02ee\7}\2\2")
        buf.write("\u02ee\u02f0\7~\2\2\u02ef\u02ed\3\2\2\2\u02ef\u02f0\3")
        buf.write("\2\2\2\u02f0\u02f3\3\2\2\2\u02f1\u02f2\7\"\2\2\u02f2\u02f4")
        buf.write("\5`\61\2\u02f3\u02f1\3\2\2\2\u02f3\u02f4\3\2\2\2\u02f4")
        buf.write("\u02f7\3\2\2\2\u02f5\u02f6\7\u00ce\2\2\u02f6\u02f8\5\24")
        buf.write("\13\2\u02f7\u02f5\3\2\2\2\u02f7\u02f8\3\2\2\2\u02f8\21")
        buf.write("\3\2\2\2\u02f9\u02fa\7l\2\2\u02fa\u02fd\5\u008eH\2\u02fb")
        buf.write("\u02fc\t\5\2\2\u02fc\u02fe\7\u0090\2\2\u02fd\u02fb\3\2")
        buf.write("\2\2\u02fd\u02fe\3\2\2\2\u02fe\23\3\2\2\2\u02ff\u0300")
        buf.write("\7\4\2\2\u0300\u0305\5\26\f\2\u0301\u0302\7\6\2\2\u0302")
        buf.write("\u0304\5\26\f\2\u0303\u0301\3\2\2\2\u0304\u0307\3\2\2")
        buf.write("\2\u0305\u0303\3\2\2\2\u0305\u0306\3\2\2\2\u0306\u0308")
        buf.write("\3\2\2\2\u0307\u0305\3\2\2\2\u0308\u0309\7\5\2\2\u0309")
        buf.write("\25\3\2\2\2\u030a\u030b\5\u0096L\2\u030b\u030c\7\u00d3")
        buf.write("\2\2\u030c\u030d\5V,\2\u030d\27\3\2\2\2\u030e\u030f\5")
        buf.write("\u0096L\2\u030f\u0310\5t;\2\u0310\31\3\2\2\2\u0311\u0313")
        buf.write("\5\34\17\2\u0312\u0311\3\2\2\2\u0313\u0316\3\2\2\2\u0314")
        buf.write("\u0312\3\2\2\2\u0314\u0315\3\2\2\2\u0315\33\3\2\2\2\u0316")
        buf.write("\u0314\3\2\2\2\u0317\u0318\7g\2\2\u0318\u031c\5(\25\2")
        buf.write("\u0319\u031c\5*\26\2\u031a\u031c\5,\27\2\u031b\u0317\3")
        buf.write("\2\2\2\u031b\u0319\3\2\2\2\u031b\u031a\3\2\2\2\u031c\35")
        buf.write("\3\2\2\2\u031d\u031f\5 \21\2\u031e\u031d\3\2\2\2\u031f")
        buf.write("\u0322\3\2\2\2\u0320\u031e\3\2\2\2\u0320\u0321\3\2\2\2")
        buf.write("\u0321\37\3\2\2\2\u0322\u0320\3\2\2\2\u0323\u0324\5,\27")
        buf.write("\2\u0324!\3\2\2\2\u0325\u0328\5$\23\2\u0326\u0328\5&\24")
        buf.write("\2\u0327\u0325\3\2\2\2\u0327\u0326\3\2\2\2\u0328#\3\2")
        buf.write("\2\2\u0329\u032a\7\u009a\2\2\u032a\u032b\5V,\2\u032b%")
        buf.write("\3\2\2\2\u032c\u032f\7D\2\2\u032d\u032e\7t\2\2\u032e\u0330")
        buf.write("\5.\30\2\u032f\u032d\3\2\2\2\u032f\u0330\3\2\2\2\u0330")
        buf.write("\'\3\2\2\2\u0331\u0334\7\u00af\2\2\u0332\u0334\5\u0096")
        buf.write("L\2\u0333\u0331\3\2\2\2\u0333\u0332\3\2\2\2\u0334)\3\2")
        buf.write("\2\2\u0335\u0339\7\67\2\2\u0336\u0337\7}\2\2\u0337\u0339")
        buf.write("\7\67\2\2\u0338\u0335\3\2\2\2\u0338\u0336\3\2\2\2\u0339")
        buf.write("+\3\2\2\2\u033a\u033b\7\u009b\2\2\u033b\u033c\7~\2\2\u033c")
        buf.write("\u033d\7\u0081\2\2\u033d\u033e\7~\2\2\u033e\u0344\7\\")
        buf.write("\2\2\u033f\u0340\7\33\2\2\u0340\u0341\7\u0081\2\2\u0341")
        buf.write("\u0342\7~\2\2\u0342\u0344\7\\\2\2\u0343\u033a\3\2\2\2")
        buf.write("\u0343\u033f\3\2\2\2\u0344-\3\2\2\2\u0345\u0346\5\u0096")
        buf.write("L\2\u0346/\3\2\2\2\u0347\u0352\5\62\32\2\u0348\u0349\7")
        buf.write("\u0085\2\2\u0349\u034a\7\31\2\2\u034a\u034f\5\66\34\2")
        buf.write("\u034b\u034c\7\6\2\2\u034c\u034e\5\66\34\2\u034d\u034b")
        buf.write("\3\2\2\2\u034e\u0351\3\2\2\2\u034f\u034d\3\2\2\2\u034f")
        buf.write("\u0350\3\2\2\2\u0350\u0353\3\2\2\2\u0351\u034f\3\2\2\2")
        buf.write("\u0352\u0348\3\2\2\2\u0352\u0353\3\2\2\2\u0353\u0356\3")
        buf.write("\2\2\2\u0354\u0355\7m\2\2\u0355\u0357\t\6\2\2\u0356\u0354")
        buf.write("\3\2\2\2\u0356\u0357\3\2\2\2\u0357\61\3\2\2\2\u0358\u0359")
        buf.write("\b\32\1\2\u0359\u035a\5\64\33\2\u035a\u0369\3\2\2\2\u035b")
        buf.write("\u035c\f\4\2\2\u035c\u035e\7^\2\2\u035d\u035f\5B\"\2\u035e")
        buf.write("\u035d\3\2\2\2\u035e\u035f\3\2\2\2\u035f\u0360\3\2\2\2")
        buf.write("\u0360\u0368\5\62\32\5\u0361\u0362\f\3\2\2\u0362\u0364")
        buf.write("\t\7\2\2\u0363\u0365\5B\"\2\u0364\u0363\3\2\2\2\u0364")
        buf.write("\u0365\3\2\2\2\u0365\u0366\3\2\2\2\u0366\u0368\5\62\32")
        buf.write("\4\u0367\u035b\3\2\2\2\u0367\u0361\3\2\2\2\u0368\u036b")
        buf.write("\3\2\2\2\u0369\u0367\3\2\2\2\u0369\u036a\3\2\2\2\u036a")
        buf.write("\63\3\2\2\2\u036b\u0369\3\2\2\2\u036c\u037d\58\35\2\u036d")
        buf.write("\u036e\7\u00b4\2\2\u036e\u037d\5\u008eH\2\u036f\u0370")
        buf.write("\7\u00c9\2\2\u0370\u0375\5V,\2\u0371\u0372\7\6\2\2\u0372")
        buf.write("\u0374\5V,\2\u0373\u0371\3\2\2\2\u0374\u0377\3\2\2\2\u0375")
        buf.write("\u0373\3\2\2\2\u0375\u0376\3\2\2\2\u0376\u037d\3\2\2\2")
        buf.write("\u0377\u0375\3\2\2\2\u0378\u0379\7\4\2\2\u0379\u037a\5")
        buf.write("\60\31\2\u037a\u037b\7\5\2\2\u037b\u037d\3\2\2\2\u037c")
        buf.write("\u036c\3\2\2\2\u037c\u036d\3\2\2\2\u037c\u036f\3\2\2\2")
        buf.write("\u037c\u0378\3\2\2\2\u037d\65\3\2\2\2\u037e\u0380\5V,")
        buf.write("\2\u037f\u0381\t\b\2\2\u0380\u037f\3\2\2\2\u0380\u0381")
        buf.write("\3\2\2\2\u0381\u0384\3\2\2\2\u0382\u0383\7\u0080\2\2\u0383")
        buf.write("\u0385\t\t\2\2\u0384\u0382\3\2\2\2\u0384\u0385\3\2\2\2")
        buf.write("\u0385\67\3\2\2\2\u0386\u0388\7\u00a8\2\2\u0387\u0389")
        buf.write("\5B\"\2\u0388\u0387\3\2\2\2\u0388\u0389\3\2\2\2\u0389")
        buf.write("\u038a\3\2\2\2\u038a\u038f\5D#\2\u038b\u038c\7\6\2\2\u038c")
        buf.write("\u038e\5D#\2\u038d\u038b\3\2\2\2\u038e\u0391\3\2\2\2\u038f")
        buf.write("\u038d\3\2\2\2\u038f\u0390\3\2\2\2\u0390\u039b\3\2\2\2")
        buf.write("\u0391\u038f\3\2\2\2\u0392\u0393\7K\2\2\u0393\u0398\5")
        buf.write("F$\2\u0394\u0395\7\6\2\2\u0395\u0397\5F$\2\u0396\u0394")
        buf.write("\3\2\2\2\u0397\u039a\3\2\2\2\u0398\u0396\3\2\2\2\u0398")
        buf.write("\u0399\3\2\2\2\u0399\u039c\3\2\2\2\u039a\u0398\3\2\2\2")
        buf.write("\u039b\u0392\3\2\2\2\u039b\u039c\3\2\2\2\u039c\u039f\3")
        buf.write("\2\2\2\u039d\u039e\7\u00cd\2\2\u039e\u03a0\5X-\2\u039f")
        buf.write("\u039d\3\2\2\2\u039f\u03a0\3\2\2\2\u03a0\u03a4\3\2\2\2")
        buf.write("\u03a1\u03a2\7S\2\2\u03a2\u03a3\7\31\2\2\u03a3\u03a5\5")
        buf.write(":\36\2\u03a4\u03a1\3\2\2\2\u03a4\u03a5\3\2\2\2\u03a5\u03a8")
        buf.write("\3\2\2\2\u03a6\u03a7\7U\2\2\u03a7\u03a9\5X-\2\u03a8\u03a6")
        buf.write("\3\2\2\2\u03a8\u03a9\3\2\2\2\u03a99\3\2\2\2\u03aa\u03ac")
        buf.write("\5B\"\2\u03ab\u03aa\3\2\2\2\u03ab\u03ac\3\2\2\2\u03ac")
        buf.write("\u03ad\3\2\2\2\u03ad\u03b2\5<\37\2\u03ae\u03af\7\6\2\2")
        buf.write("\u03af\u03b1\5<\37\2\u03b0\u03ae\3\2\2\2\u03b1\u03b4\3")
        buf.write("\2\2\2\u03b2\u03b0\3\2\2\2\u03b2\u03b3\3\2\2\2\u03b3;")
        buf.write("\3\2\2\2\u03b4\u03b2\3\2\2\2\u03b5\u03de\5> \2\u03b6\u03b7")
        buf.write("\7\u00a1\2\2\u03b7\u03c0\7\4\2\2\u03b8\u03bd\5V,\2\u03b9")
        buf.write("\u03ba\7\6\2\2\u03ba\u03bc\5V,\2\u03bb\u03b9\3\2\2\2\u03bc")
        buf.write("\u03bf\3\2\2\2\u03bd\u03bb\3\2\2\2\u03bd\u03be\3\2\2\2")
        buf.write("\u03be\u03c1\3\2\2\2\u03bf\u03bd\3\2\2\2\u03c0\u03b8\3")
        buf.write("\2\2\2\u03c0\u03c1\3\2\2\2\u03c1\u03c2\3\2\2\2\u03c2\u03de")
        buf.write("\7\5\2\2\u03c3\u03c4\7(\2\2\u03c4\u03cd\7\4\2\2\u03c5")
        buf.write("\u03ca\5V,\2\u03c6\u03c7\7\6\2\2\u03c7\u03c9\5V,\2\u03c8")
        buf.write("\u03c6\3\2\2\2\u03c9\u03cc\3\2\2\2\u03ca\u03c8\3\2\2\2")
        buf.write("\u03ca\u03cb\3\2\2\2\u03cb\u03ce\3\2\2\2\u03cc\u03ca\3")
        buf.write("\2\2\2\u03cd\u03c5\3\2\2\2\u03cd\u03ce\3\2\2\2\u03ce\u03cf")
        buf.write("\3\2\2\2\u03cf\u03de\7\5\2\2\u03d0\u03d1\7T\2\2\u03d1")
        buf.write("\u03d2\7\u00ac\2\2\u03d2\u03d3\7\4\2\2\u03d3\u03d8\5>")
        buf.write(" \2\u03d4\u03d5\7\6\2\2\u03d5\u03d7\5> \2\u03d6\u03d4")
        buf.write("\3\2\2\2\u03d7\u03da\3\2\2\2\u03d8\u03d6\3\2\2\2\u03d8")
        buf.write("\u03d9\3\2\2\2\u03d9\u03db\3\2\2\2\u03da\u03d8\3\2\2\2")
        buf.write("\u03db\u03dc\7\5\2\2\u03dc\u03de\3\2\2\2\u03dd\u03b5\3")
        buf.write("\2\2\2\u03dd\u03b6\3\2\2\2\u03dd\u03c3\3\2\2\2\u03dd\u03d0")
        buf.write("\3\2\2\2\u03de=\3\2\2\2\u03df\u03e8\7\4\2\2\u03e0\u03e5")
        buf.write("\5V,\2\u03e1\u03e2\7\6\2\2\u03e2\u03e4\5V,\2\u03e3\u03e1")
        buf.write("\3\2\2\2\u03e4\u03e7\3\2\2\2\u03e5\u03e3\3\2\2\2\u03e5")
        buf.write("\u03e6\3\2\2\2\u03e6\u03e9\3\2\2\2\u03e7\u03e5\3\2\2\2")
        buf.write("\u03e8\u03e0\3\2\2\2\u03e8\u03e9\3\2\2\2\u03e9\u03ea\3")
        buf.write("\2\2\2\u03ea\u03ed\7\5\2\2\u03eb\u03ed\5V,\2\u03ec\u03df")
        buf.write("\3\2\2\2\u03ec\u03eb\3\2\2\2\u03ed?\3\2\2\2\u03ee\u03f0")
        buf.write("\5\u0096L\2\u03ef\u03f1\5R*\2\u03f0\u03ef\3\2\2\2\u03f0")
        buf.write("\u03f1\3\2\2\2\u03f1\u03f2\3\2\2\2\u03f2\u03f3\7\24\2")
        buf.write("\2\u03f3\u03f4\7\4\2\2\u03f4\u03f5\5\n\6\2\u03f5\u03f6")
        buf.write("\7\5\2\2\u03f6A\3\2\2\2\u03f7\u03f8\t\n\2\2\u03f8C\3\2")
        buf.write("\2\2\u03f9\u03fe\5V,\2\u03fa\u03fc\7\24\2\2\u03fb\u03fa")
        buf.write("\3\2\2\2\u03fb\u03fc\3\2\2\2\u03fc\u03fd\3\2\2\2\u03fd")
        buf.write("\u03ff\5\u0096L\2\u03fe\u03fb\3\2\2\2\u03fe\u03ff\3\2")
        buf.write("\2\2\u03ff\u0406\3\2\2\2\u0400\u0401\5\u008eH\2\u0401")
        buf.write("\u0402\7\3\2\2\u0402\u0403\7\u00db\2\2\u0403\u0406\3\2")
        buf.write("\2\2\u0404\u0406\7\u00db\2\2\u0405\u03f9\3\2\2\2\u0405")
        buf.write("\u0400\3\2\2\2\u0405\u0404\3\2\2\2\u0406E\3\2\2\2\u0407")
        buf.write("\u0408\b$\1\2\u0408\u0409\5L\'\2\u0409\u041c\3\2\2\2\u040a")
        buf.write("\u0418\f\4\2\2\u040b\u040c\7\'\2\2\u040c\u040d\7f\2\2")
        buf.write("\u040d\u0419\5L\'\2\u040e\u040f\5H%\2\u040f\u0410\7f\2")
        buf.write("\2\u0410\u0411\5F$\2\u0411\u0412\5J&\2\u0412\u0419\3\2")
        buf.write("\2\2\u0413\u0414\7u\2\2\u0414\u0415\5H%\2\u0415\u0416")
        buf.write("\7f\2\2\u0416\u0417\5L\'\2\u0417\u0419\3\2\2\2\u0418\u040b")
        buf.write("\3\2\2\2\u0418\u040e\3\2\2\2\u0418\u0413\3\2\2\2\u0419")
        buf.write("\u041b\3\2\2\2\u041a\u040a\3\2\2\2\u041b\u041e\3\2\2\2")
        buf.write("\u041c\u041a\3\2\2\2\u041c\u041d\3\2\2\2\u041dG\3\2\2")
        buf.write("\2\u041e\u041c\3\2\2\2\u041f\u0421\7[\2\2\u0420\u041f")
        buf.write("\3\2\2\2\u0420\u0421\3\2\2\2\u0421\u042f\3\2\2\2\u0422")
        buf.write("\u0424\7j\2\2\u0423\u0425\7\u0087\2\2\u0424\u0423\3\2")
        buf.write("\2\2\u0424\u0425\3\2\2\2\u0425\u042f\3\2\2\2\u0426\u0428")
        buf.write("\7\u009d\2\2\u0427\u0429\7\u0087\2\2\u0428\u0427\3\2\2")
        buf.write("\2\u0428\u0429\3\2\2\2\u0429\u042f\3\2\2\2\u042a\u042c")
        buf.write("\7L\2\2\u042b\u042d\7\u0087\2\2\u042c\u042b\3\2\2\2\u042c")
        buf.write("\u042d\3\2\2\2\u042d\u042f\3\2\2\2\u042e\u0420\3\2\2\2")
        buf.write("\u042e\u0422\3\2\2\2\u042e\u0426\3\2\2\2\u042e\u042a\3")
        buf.write("\2\2\2\u042fI\3\2\2\2\u0430\u0431\7\u0081\2\2\u0431\u043f")
        buf.write("\5X-\2\u0432\u0433\7\u00c7\2\2\u0433\u0434\7\4\2\2\u0434")
        buf.write("\u0439\5\u0096L\2\u0435\u0436\7\6\2\2\u0436\u0438\5\u0096")
        buf.write("L\2\u0437\u0435\3\2\2\2\u0438\u043b\3\2\2\2\u0439\u0437")
        buf.write("\3\2\2\2\u0439\u043a\3\2\2\2\u043a\u043c\3\2\2\2\u043b")
        buf.write("\u0439\3\2\2\2\u043c\u043d\7\5\2\2\u043d\u043f\3\2\2\2")
        buf.write("\u043e\u0430\3\2\2\2\u043e\u0432\3\2\2\2\u043fK\3\2\2")
        buf.write("\2\u0440\u0447\5P)\2\u0441\u0442\7\u00b6\2\2\u0442\u0443")
        buf.write("\5N(\2\u0443\u0444\7\4\2\2\u0444\u0445\5V,\2\u0445\u0446")
        buf.write("\7\5\2\2\u0446\u0448\3\2\2\2\u0447\u0441\3\2\2\2\u0447")
        buf.write("\u0448\3\2\2\2\u0448M\3\2\2\2\u0449\u044a\t\13\2\2\u044a")
        buf.write("O\3\2\2\2\u044b\u0453\5T+\2\u044c\u044e\7\24\2\2\u044d")
        buf.write("\u044c\3\2\2\2\u044d\u044e\3\2\2\2\u044e\u044f\3\2\2\2")
        buf.write("\u044f\u0451\5\u0096L\2\u0450\u0452\5R*\2\u0451\u0450")
        buf.write("\3\2\2\2\u0451\u0452\3\2\2\2\u0452\u0454\3\2\2\2\u0453")
        buf.write("\u044d\3\2\2\2\u0453\u0454\3\2\2\2\u0454Q\3\2\2\2\u0455")
        buf.write("\u0456\7\4\2\2\u0456\u045b\5\u0096L\2\u0457\u0458\7\6")
        buf.write("\2\2\u0458\u045a\5\u0096L\2\u0459\u0457\3\2\2\2\u045a")
        buf.write("\u045d\3\2\2\2\u045b\u0459\3\2\2\2\u045b\u045c\3\2\2\2")
        buf.write("\u045c\u045e\3\2\2\2\u045d\u045b\3\2\2\2\u045e\u045f\7")
        buf.write("\5\2\2\u045fS\3\2\2\2\u0460\u047e\5\u008eH\2\u0461\u0462")
        buf.write("\7\4\2\2\u0462\u0463\5\n\6\2\u0463\u0464\7\5\2\2\u0464")
        buf.write("\u047e\3\2\2\2\u0465\u0466\7\u00c4\2\2\u0466\u0467\7\4")
        buf.write("\2\2\u0467\u046c\5V,\2\u0468\u0469\7\6\2\2\u0469\u046b")
        buf.write("\5V,\2\u046a\u0468\3\2\2\2\u046b\u046e\3\2\2\2\u046c\u046a")
        buf.write("\3\2\2\2\u046c\u046d\3\2\2\2\u046d\u046f\3\2\2\2\u046e")
        buf.write("\u046c\3\2\2\2\u046f\u0472\7\5\2\2\u0470\u0471\7\u00ce")
        buf.write("\2\2\u0471\u0473\7\u0086\2\2\u0472\u0470\3\2\2\2\u0472")
        buf.write("\u0473\3\2\2\2\u0473\u047e\3\2\2\2\u0474\u0475\7i\2\2")
        buf.write("\u0475\u0476\7\4\2\2\u0476\u0477\5\n\6\2\u0477\u0478\7")
        buf.write("\5\2\2\u0478\u047e\3\2\2\2\u0479\u047a\7\4\2\2\u047a\u047b")
        buf.write("\5F$\2\u047b\u047c\7\5\2\2\u047c\u047e\3\2\2\2\u047d\u0460")
        buf.write("\3\2\2\2\u047d\u0461\3\2\2\2\u047d\u0465\3\2\2\2\u047d")
        buf.write("\u0474\3\2\2\2\u047d\u0479\3\2\2\2\u047eU\3\2\2\2\u047f")
        buf.write("\u0480\5X-\2\u0480W\3\2\2\2\u0481\u0482\b-\1\2\u0482\u0484")
        buf.write("\5\\/\2\u0483\u0485\5Z.\2\u0484\u0483\3\2\2\2\u0484\u0485")
        buf.write("\3\2\2\2\u0485\u0489\3\2\2\2\u0486\u0487\7}\2\2\u0487")
        buf.write("\u0489\5X-\5\u0488\u0481\3\2\2\2\u0488\u0486\3\2\2\2\u0489")
        buf.write("\u0492\3\2\2\2\u048a\u048b\f\4\2\2\u048b\u048c\7\21\2")
        buf.write("\2\u048c\u0491\5X-\5\u048d\u048e\f\3\2\2\u048e\u048f\7")
        buf.write("\u0084\2\2\u048f\u0491\5X-\4\u0490\u048a\3\2\2\2\u0490")
        buf.write("\u048d\3\2\2\2\u0491\u0494\3\2\2\2\u0492\u0490\3\2\2\2")
        buf.write("\u0492\u0493\3\2\2\2\u0493Y\3\2\2\2\u0494\u0492\3\2\2")
        buf.write("\2\u0495\u0496\5f\64\2\u0496\u0497\5\\/\2\u0497\u04d3")
        buf.write("\3\2\2\2\u0498\u0499\5f\64\2\u0499\u049a\5h\65\2\u049a")
        buf.write("\u049b\7\4\2\2\u049b\u049c\5\n\6\2\u049c\u049d\7\5\2\2")
        buf.write("\u049d\u04d3\3\2\2\2\u049e\u04a0\7}\2\2\u049f\u049e\3")
        buf.write("\2\2\2\u049f\u04a0\3\2\2\2\u04a0\u04a1\3\2\2\2\u04a1\u04a2")
        buf.write("\7\30\2\2\u04a2\u04a3\5\\/\2\u04a3\u04a4\7\21\2\2\u04a4")
        buf.write("\u04a5\5\\/\2\u04a5\u04d3\3\2\2\2\u04a6\u04a8\7}\2\2\u04a7")
        buf.write("\u04a6\3\2\2\2\u04a7\u04a8\3\2\2\2\u04a8\u04a9\3\2\2\2")
        buf.write("\u04a9\u04aa\7Y\2\2\u04aa\u04ab\7\4\2\2\u04ab\u04b0\5")
        buf.write("V,\2\u04ac\u04ad\7\6\2\2\u04ad\u04af\5V,\2\u04ae\u04ac")
        buf.write("\3\2\2\2\u04af\u04b2\3\2\2\2\u04b0\u04ae\3\2\2\2\u04b0")
        buf.write("\u04b1\3\2\2\2\u04b1\u04b3\3\2\2\2\u04b2\u04b0\3\2\2\2")
        buf.write("\u04b3\u04b4\7\5\2\2\u04b4\u04d3\3\2\2\2\u04b5\u04b7\7")
        buf.write("}\2\2\u04b6\u04b5\3\2\2\2\u04b6\u04b7\3\2\2\2\u04b7\u04b8")
        buf.write("\3\2\2\2\u04b8\u04b9\7Y\2\2\u04b9\u04ba\7\4\2\2\u04ba")
        buf.write("\u04bb\5\n\6\2\u04bb\u04bc\7\5\2\2\u04bc\u04d3\3\2\2\2")
        buf.write("\u04bd\u04bf\7}\2\2\u04be\u04bd\3\2\2\2\u04be\u04bf\3")
        buf.write("\2\2\2\u04bf\u04c0\3\2\2\2\u04c0\u04c1\7l\2\2\u04c1\u04c4")
        buf.write("\5\\/\2\u04c2\u04c3\7=\2\2\u04c3\u04c5\5\\/\2\u04c4\u04c2")
        buf.write("\3\2\2\2\u04c4\u04c5\3\2\2\2\u04c5\u04d3\3\2\2\2\u04c6")
        buf.write("\u04c8\7c\2\2\u04c7\u04c9\7}\2\2\u04c8\u04c7\3\2\2\2\u04c8")
        buf.write("\u04c9\3\2\2\2\u04c9\u04ca\3\2\2\2\u04ca\u04d3\7~\2\2")
        buf.write("\u04cb\u04cd\7c\2\2\u04cc\u04ce\7}\2\2\u04cd\u04cc\3\2")
        buf.write("\2\2\u04cd\u04ce\3\2\2\2\u04ce\u04cf\3\2\2\2\u04cf\u04d0")
        buf.write("\78\2\2\u04d0\u04d1\7K\2\2\u04d1\u04d3\5\\/\2\u04d2\u0495")
        buf.write("\3\2\2\2\u04d2\u0498\3\2\2\2\u04d2\u049f\3\2\2\2\u04d2")
        buf.write("\u04a7\3\2\2\2\u04d2\u04b6\3\2\2\2\u04d2\u04be\3\2\2\2")
        buf.write("\u04d2\u04c6\3\2\2\2\u04d2\u04cb\3\2\2\2\u04d3[\3\2\2")
        buf.write("\2\u04d4\u04d5\b/\1\2\u04d5\u04d9\5^\60\2\u04d6\u04d7")
        buf.write("\t\f\2\2\u04d7\u04d9\5\\/\6\u04d8\u04d4\3\2\2\2\u04d8")
        buf.write("\u04d6\3\2\2\2\u04d9\u04e8\3\2\2\2\u04da\u04db\f\5\2\2")
        buf.write("\u04db\u04dc\t\r\2\2\u04dc\u04e7\5\\/\6\u04dd\u04de\f")
        buf.write("\4\2\2\u04de\u04df\t\f\2\2\u04df\u04e7\5\\/\5\u04e0\u04e1")
        buf.write("\f\3\2\2\u04e1\u04e2\7\u00de\2\2\u04e2\u04e7\5\\/\4\u04e3")
        buf.write("\u04e4\f\7\2\2\u04e4\u04e5\7\26\2\2\u04e5\u04e7\5d\63")
        buf.write("\2\u04e6\u04da\3\2\2\2\u04e6\u04dd\3\2\2\2\u04e6\u04e0")
        buf.write("\3\2\2\2\u04e6\u04e3\3\2\2\2\u04e7\u04ea\3\2\2\2\u04e8")
        buf.write("\u04e6\3\2\2\2\u04e8\u04e9\3\2\2\2\u04e9]\3\2\2\2\u04ea")
        buf.write("\u04e8\3\2\2\2\u04eb\u04ec\b\60\1\2\u04ec\u05db\7~\2\2")
        buf.write("\u04ed\u05db\5l\67\2\u04ee\u04ef\5\u0096L\2\u04ef\u04f0")
        buf.write("\5`\61\2\u04f0\u05db\3\2\2\2\u04f1\u04f2\7\u00eb\2\2\u04f2")
        buf.write("\u05db\5`\61\2\u04f3\u05db\5\u0098M\2\u04f4\u05db\5j\66")
        buf.write("\2\u04f5\u05db\5`\61\2\u04f6\u05db\7\u00e1\2\2\u04f7\u05db")
        buf.write("\7\7\2\2\u04f8\u04f9\7\u008c\2\2\u04f9\u04fa\7\4\2\2\u04fa")
        buf.write("\u04fb\5\\/\2\u04fb\u04fc\7Y\2\2\u04fc\u04fd\5\\/\2\u04fd")
        buf.write("\u04fe\7\5\2\2\u04fe\u05db\3\2\2\2\u04ff\u0500\7\4\2\2")
        buf.write("\u0500\u0503\5V,\2\u0501\u0502\7\6\2\2\u0502\u0504\5V")
        buf.write(",\2\u0503\u0501\3\2\2\2\u0504\u0505\3\2\2\2\u0505\u0503")
        buf.write("\3\2\2\2\u0505\u0506\3\2\2\2\u0506\u0507\3\2\2\2\u0507")
        buf.write("\u0508\7\5\2\2\u0508\u05db\3\2\2\2\u0509\u050a\7\u00a2")
        buf.write("\2\2\u050a\u050b\7\4\2\2\u050b\u0510\5V,\2\u050c\u050d")
        buf.write("\7\6\2\2\u050d\u050f\5V,\2\u050e\u050c\3\2\2\2\u050f\u0512")
        buf.write("\3\2\2\2\u0510\u050e\3\2\2\2\u0510\u0511\3\2\2\2\u0511")
        buf.write("\u0513\3\2\2\2\u0512\u0510\3\2\2\2\u0513\u0514\7\5\2\2")
        buf.write("\u0514\u05db\3\2\2\2\u0515\u0516\5\u008eH\2\u0516\u0517")
        buf.write("\7\4\2\2\u0517\u0518\7\u00db\2\2\u0518\u051a\7\5\2\2\u0519")
        buf.write("\u051b\5|?\2\u051a\u0519\3\2\2\2\u051a\u051b\3\2\2\2\u051b")
        buf.write("\u051d\3\2\2\2\u051c\u051e\5~@\2\u051d\u051c\3\2\2\2\u051d")
        buf.write("\u051e\3\2\2\2\u051e\u05db\3\2\2\2\u051f\u0520\5\u008e")
        buf.write("H\2\u0520\u052c\7\4\2\2\u0521\u0523\5B\"\2\u0522\u0521")
        buf.write("\3\2\2\2\u0522\u0523\3\2\2\2\u0523\u0524\3\2\2\2\u0524")
        buf.write("\u0529\5V,\2\u0525\u0526\7\6\2\2\u0526\u0528\5V,\2\u0527")
        buf.write("\u0525\3\2\2\2\u0528\u052b\3\2\2\2\u0529\u0527\3\2\2\2")
        buf.write("\u0529\u052a\3\2\2\2\u052a\u052d\3\2\2\2\u052b\u0529\3")
        buf.write("\2\2\2\u052c\u0522\3\2\2\2\u052c\u052d\3\2\2\2\u052d\u0538")
        buf.write("\3\2\2\2\u052e\u052f\7\u0085\2\2\u052f\u0530\7\31\2\2")
        buf.write("\u0530\u0535\5\66\34\2\u0531\u0532\7\6\2\2\u0532\u0534")
        buf.write("\5\66\34\2\u0533\u0531\3\2\2\2\u0534\u0537\3\2\2\2\u0535")
        buf.write("\u0533\3\2\2\2\u0535\u0536\3\2\2\2\u0536\u0539\3\2\2\2")
        buf.write("\u0537\u0535\3\2\2\2\u0538\u052e\3\2\2\2\u0538\u0539\3")
        buf.write("\2\2\2\u0539\u053a\3\2\2\2\u053a\u053c\7\5\2\2\u053b\u053d")
        buf.write("\5|?\2\u053c\u053b\3\2\2\2\u053c\u053d\3\2\2\2\u053d\u0542")
        buf.write("\3\2\2\2\u053e\u0540\5b\62\2\u053f\u053e\3\2\2\2\u053f")
        buf.write("\u0540\3\2\2\2\u0540\u0541\3\2\2\2\u0541\u0543\5~@\2\u0542")
        buf.write("\u053f\3\2\2\2\u0542\u0543\3\2\2\2\u0543\u05db\3\2\2\2")
        buf.write("\u0544\u0545\5\u0096L\2\u0545\u0546\7\b\2\2\u0546\u0547")
        buf.write("\5V,\2\u0547\u05db\3\2\2\2\u0548\u0551\7\4\2\2\u0549\u054e")
        buf.write("\5\u0096L\2\u054a\u054b\7\6\2\2\u054b\u054d\5\u0096L\2")
        buf.write("\u054c\u054a\3\2\2\2\u054d\u0550\3\2\2\2\u054e\u054c\3")
        buf.write("\2\2\2\u054e\u054f\3\2\2\2\u054f\u0552\3\2\2\2\u0550\u054e")
        buf.write("\3\2\2\2\u0551\u0549\3\2\2\2\u0551\u0552\3\2\2\2\u0552")
        buf.write("\u0553\3\2\2\2\u0553\u0554\7\5\2\2\u0554\u0555\7\b\2\2")
        buf.write("\u0555\u05db\5V,\2\u0556\u0557\7\4\2\2\u0557\u0558\5\n")
        buf.write("\6\2\u0558\u0559\7\5\2\2\u0559\u05db\3\2\2\2\u055a\u055b")
        buf.write("\7A\2\2\u055b\u055c\7\4\2\2\u055c\u055d\5\n\6\2\u055d")
        buf.write("\u055e\7\5\2\2\u055e\u05db\3\2\2\2\u055f\u0560\7\35\2")
        buf.write("\2\u0560\u0562\5\\/\2\u0561\u0563\5z>\2\u0562\u0561\3")
        buf.write("\2\2\2\u0563\u0564\3\2\2\2\u0564\u0562\3\2\2\2\u0564\u0565")
        buf.write("\3\2\2\2\u0565\u0568\3\2\2\2\u0566\u0567\7;\2\2\u0567")
        buf.write("\u0569\5V,\2\u0568\u0566\3\2\2\2\u0568\u0569\3\2\2\2\u0569")
        buf.write("\u056a\3\2\2\2\u056a\u056b\7<\2\2\u056b\u05db\3\2\2\2")
        buf.write("\u056c\u056e\7\35\2\2\u056d\u056f\5z>\2\u056e\u056d\3")
        buf.write("\2\2\2\u056f\u0570\3\2\2\2\u0570\u056e\3\2\2\2\u0570\u0571")
        buf.write("\3\2\2\2\u0571\u0574\3\2\2\2\u0572\u0573\7;\2\2\u0573")
        buf.write("\u0575\5V,\2\u0574\u0572\3\2\2\2\u0574\u0575\3\2\2\2\u0575")
        buf.write("\u0576\3\2\2\2\u0576\u0577\7<\2\2\u0577\u05db\3\2\2\2")
        buf.write("\u0578\u0579\7\36\2\2\u0579\u057a\7\4\2\2\u057a\u057b")
        buf.write("\5V,\2\u057b\u057c\7\24\2\2\u057c\u057d\5t;\2\u057d\u057e")
        buf.write("\7\5\2\2\u057e\u05db\3\2\2\2\u057f\u0580\7\u00be\2\2\u0580")
        buf.write("\u0581\7\4\2\2\u0581\u0582\5V,\2\u0582\u0583\7\24\2\2")
        buf.write("\u0583\u0584\5t;\2\u0584\u0585\7\5\2\2\u0585\u05db\3\2")
        buf.write("\2\2\u0586\u0587\7\23\2\2\u0587\u0590\7\t\2\2\u0588\u058d")
        buf.write("\5V,\2\u0589\u058a\7\6\2\2\u058a\u058c\5V,\2\u058b\u0589")
        buf.write("\3\2\2\2\u058c\u058f\3\2\2\2\u058d\u058b\3\2\2\2\u058d")
        buf.write("\u058e\3\2\2\2\u058e\u0591\3\2\2\2\u058f\u058d\3\2\2\2")
        buf.write("\u0590\u0588\3\2\2\2\u0590\u0591\3\2\2\2\u0591\u0592\3")
        buf.write("\2\2\2\u0592\u05db\7\n\2\2\u0593\u05db\5\u0096L\2\u0594")
        buf.write("\u05db\7*\2\2\u0595\u0599\7,\2\2\u0596\u0597\7\4\2\2\u0597")
        buf.write("\u0598\7\u00e2\2\2\u0598\u059a\7\5\2\2\u0599\u0596\3\2")
        buf.write("\2\2\u0599\u059a\3\2\2\2\u059a\u05db\3\2\2\2\u059b\u059f")
        buf.write("\7-\2\2\u059c\u059d\7\4\2\2\u059d\u059e\7\u00e2\2\2\u059e")
        buf.write("\u05a0\7\5\2\2\u059f\u059c\3\2\2\2\u059f\u05a0\3\2\2\2")
        buf.write("\u05a0\u05db\3\2\2\2\u05a1\u05a5\7n\2\2\u05a2\u05a3\7")
        buf.write("\4\2\2\u05a3\u05a4\7\u00e2\2\2\u05a4\u05a6\7\5\2\2\u05a5")
        buf.write("\u05a2\3\2\2\2\u05a5\u05a6\3\2\2\2\u05a6\u05db\3\2\2\2")
        buf.write("\u05a7\u05ab\7o\2\2\u05a8\u05a9\7\4\2\2\u05a9\u05aa\7")
        buf.write("\u00e2\2\2\u05aa\u05ac\7\5\2\2\u05ab\u05a8\3\2\2\2\u05ab")
        buf.write("\u05ac\3\2\2\2\u05ac\u05db\3\2\2\2\u05ad\u05db\7.\2\2")
        buf.write("\u05ae\u05af\7\u00b2\2\2\u05af\u05b0\7\4\2\2\u05b0\u05b1")
        buf.write("\5\\/\2\u05b1\u05b2\7K\2\2\u05b2\u05b5\5\\/\2\u05b3\u05b4")
        buf.write("\7I\2\2\u05b4\u05b6\5\\/\2\u05b5\u05b3\3\2\2\2\u05b5\u05b6")
        buf.write("\3\2\2\2\u05b6\u05b7\3\2\2\2\u05b7\u05b8\7\5\2\2\u05b8")
        buf.write("\u05db\3\2\2\2\u05b9\u05ba\7|\2\2\u05ba\u05bb\7\4\2\2")
        buf.write("\u05bb\u05be\5\\/\2\u05bc\u05bd\7\6\2\2\u05bd\u05bf\5")
        buf.write("p9\2\u05be\u05bc\3\2\2\2\u05be\u05bf\3\2\2\2\u05bf\u05c0")
        buf.write("\3\2\2\2\u05c0\u05c1\7\5\2\2\u05c1\u05db\3\2\2\2\u05c2")
        buf.write("\u05c3\7C\2\2\u05c3\u05c4\7\4\2\2\u05c4\u05c5\5\u0096")
        buf.write("L\2\u05c5\u05c6\7K\2\2\u05c6\u05c7\5\\/\2\u05c7\u05c8")
        buf.write("\7\5\2\2\u05c8\u05db\3\2\2\2\u05c9\u05ca\7\4\2\2\u05ca")
        buf.write("\u05cb\5V,\2\u05cb\u05cc\7\5\2\2\u05cc\u05db\3\2\2\2\u05cd")
        buf.write("\u05ce\7T\2\2\u05ce\u05d7\7\4\2\2\u05cf\u05d4\5\u008e")
        buf.write("H\2\u05d0\u05d1\7\6\2\2\u05d1\u05d3\5\u008eH\2\u05d2\u05d0")
        buf.write("\3\2\2\2\u05d3\u05d6\3\2\2\2\u05d4\u05d2\3\2\2\2\u05d4")
        buf.write("\u05d5\3\2\2\2\u05d5\u05d8\3\2\2\2\u05d6\u05d4\3\2\2\2")
        buf.write("\u05d7\u05cf\3\2\2\2\u05d7\u05d8\3\2\2\2\u05d8\u05d9\3")
        buf.write("\2\2\2\u05d9\u05db\7\5\2\2\u05da\u04eb\3\2\2\2\u05da\u04ed")
        buf.write("\3\2\2\2\u05da\u04ee\3\2\2\2\u05da\u04f1\3\2\2\2\u05da")
        buf.write("\u04f3\3\2\2\2\u05da\u04f4\3\2\2\2\u05da\u04f5\3\2\2\2")
        buf.write("\u05da\u04f6\3\2\2\2\u05da\u04f7\3\2\2\2\u05da\u04f8\3")
        buf.write("\2\2\2\u05da\u04ff\3\2\2\2\u05da\u0509\3\2\2\2\u05da\u0515")
        buf.write("\3\2\2\2\u05da\u051f\3\2\2\2\u05da\u0544\3\2\2\2\u05da")
        buf.write("\u0548\3\2\2\2\u05da\u0556\3\2\2\2\u05da\u055a\3\2\2\2")
        buf.write("\u05da\u055f\3\2\2\2\u05da\u056c\3\2\2\2\u05da\u0578\3")
        buf.write("\2\2\2\u05da\u057f\3\2\2\2\u05da\u0586\3\2\2\2\u05da\u0593")
        buf.write("\3\2\2\2\u05da\u0594\3\2\2\2\u05da\u0595\3\2\2\2\u05da")
        buf.write("\u059b\3\2\2\2\u05da\u05a1\3\2\2\2\u05da\u05a7\3\2\2\2")
        buf.write("\u05da\u05ad\3\2\2\2\u05da\u05ae\3\2\2\2\u05da\u05b9\3")
        buf.write("\2\2\2\u05da\u05c2\3\2\2\2\u05da\u05c9\3\2\2\2\u05da\u05cd")
        buf.write("\3\2\2\2\u05db\u05e6\3\2\2\2\u05dc\u05dd\f\20\2\2\u05dd")
        buf.write("\u05de\7\t\2\2\u05de\u05df\5\\/\2\u05df\u05e0\7\n\2\2")
        buf.write("\u05e0\u05e5\3\2\2\2\u05e1\u05e2\f\16\2\2\u05e2\u05e3")
        buf.write("\7\3\2\2\u05e3\u05e5\5\u0096L\2\u05e4\u05dc\3\2\2\2\u05e4")
        buf.write("\u05e1\3\2\2\2\u05e5\u05e8\3\2\2\2\u05e6\u05e4\3\2\2\2")
        buf.write("\u05e6\u05e7\3\2\2\2\u05e7_\3\2\2\2\u05e8\u05e6\3\2\2")
        buf.write("\2\u05e9\u05f0\7\u00df\2\2\u05ea\u05ed\7\u00e0\2\2\u05eb")
        buf.write("\u05ec\7\u00c0\2\2\u05ec\u05ee\7\u00df\2\2\u05ed\u05eb")
        buf.write("\3\2\2\2\u05ed\u05ee\3\2\2\2\u05ee\u05f0\3\2\2\2\u05ef")
        buf.write("\u05e9\3\2\2\2\u05ef\u05ea\3\2\2\2\u05f0a\3\2\2\2\u05f1")
        buf.write("\u05f2\7X\2\2\u05f2\u05f6\7\u0080\2\2\u05f3\u05f4\7\u0098")
        buf.write("\2\2\u05f4\u05f6\7\u0080\2\2\u05f5\u05f1\3\2\2\2\u05f5")
        buf.write("\u05f3\3\2\2\2\u05f6c\3\2\2\2\u05f7\u05f8\7\u00b9\2\2")
        buf.write("\u05f8\u05f9\7\u00d2\2\2\u05f9\u05fe\5l\67\2\u05fa\u05fb")
        buf.write("\7\u00b9\2\2\u05fb\u05fc\7\u00d2\2\2\u05fc\u05fe\5`\61")
        buf.write("\2\u05fd\u05f7\3\2\2\2\u05fd\u05fa\3\2\2\2\u05fee\3\2")
        buf.write("\2\2\u05ff\u0600\t\16\2\2\u0600g\3\2\2\2\u0601\u0602\t")
        buf.write("\17\2\2\u0602i\3\2\2\2\u0603\u0604\t\20\2\2\u0604k\3\2")
        buf.write("\2\2\u0605\u0607\7_\2\2\u0606\u0608\t\f\2\2\u0607\u0606")
        buf.write("\3\2\2\2\u0607\u0608\3\2\2\2\u0608\u0609\3\2\2\2\u0609")
        buf.write("\u060a\5`\61\2\u060a\u060d\5n8\2\u060b\u060c\7\u00bb\2")
        buf.write("\2\u060c\u060e\5n8\2\u060d\u060b\3\2\2\2\u060d\u060e\3")
        buf.write("\2\2\2\u060em\3\2\2\2\u060f\u0610\t\21\2\2\u0610o\3\2")
        buf.write("\2\2\u0611\u0612\t\22\2\2\u0612q\3\2\2\2\u0613\u061c\7")
        buf.write("\4\2\2\u0614\u0619\5t;\2\u0615\u0616\7\6\2\2\u0616\u0618")
        buf.write("\5t;\2\u0617\u0615\3\2\2\2\u0618\u061b\3\2\2\2\u0619\u0617")
        buf.write("\3\2\2\2\u0619\u061a\3\2\2\2\u061a\u061d\3\2\2\2\u061b")
        buf.write("\u0619\3\2\2\2\u061c\u0614\3\2\2\2\u061c\u061d\3\2\2\2")
        buf.write("\u061d\u061e\3\2\2\2\u061e\u061f\7\5\2\2\u061fs\3\2\2")
        buf.write("\2\u0620\u0621\b;\1\2\u0621\u0622\7\23\2\2\u0622\u0623")
        buf.write("\7\u00d5\2\2\u0623\u0624\5t;\2\u0624\u0625\7\u00d7\2\2")
        buf.write("\u0625\u0650\3\2\2\2\u0626\u0627\7q\2\2\u0627\u0628\7")
        buf.write("\u00d5\2\2\u0628\u0629\5t;\2\u0629\u062a\7\6\2\2\u062a")
        buf.write("\u062b\5t;\2\u062b\u062c\7\u00d7\2\2\u062c\u0650\3\2\2")
        buf.write("\2\u062d\u062e\7\u00a2\2\2\u062e\u062f\7\4\2\2\u062f\u0630")
        buf.write("\5\u0096L\2\u0630\u0637\5t;\2\u0631\u0632\7\6\2\2\u0632")
        buf.write("\u0633\5\u0096L\2\u0633\u0634\5t;\2\u0634\u0636\3\2\2")
        buf.write("\2\u0635\u0631\3\2\2\2\u0636\u0639\3\2\2\2\u0637\u0635")
        buf.write("\3\2\2\2\u0637\u0638\3\2\2\2\u0638\u063a\3\2\2\2\u0639")
        buf.write("\u0637\3\2\2\2\u063a\u063b\7\5\2\2\u063b\u0650\3\2\2\2")
        buf.write("\u063c\u0648\5x=\2\u063d\u063e\7\4\2\2\u063e\u0643\5v")
        buf.write("<\2\u063f\u0640\7\6\2\2\u0640\u0642\5v<\2\u0641\u063f")
        buf.write("\3\2\2\2\u0642\u0645\3\2\2\2\u0643\u0641\3\2\2\2\u0643")
        buf.write("\u0644\3\2\2\2\u0644\u0646\3\2\2\2\u0645\u0643\3\2\2\2")
        buf.write("\u0646\u0647\7\5\2\2\u0647\u0649\3\2\2\2\u0648\u063d\3")
        buf.write("\2\2\2\u0648\u0649\3\2\2\2\u0649\u0650\3\2\2\2\u064a\u064b")
        buf.write("\7_\2\2\u064b\u064c\5n8\2\u064c\u064d\7\u00bb\2\2\u064d")
        buf.write("\u064e\5n8\2\u064e\u0650\3\2\2\2\u064f\u0620\3\2\2\2\u064f")
        buf.write("\u0626\3\2\2\2\u064f\u062d\3\2\2\2\u064f\u063c\3\2\2\2")
        buf.write("\u064f\u064a\3\2\2\2\u0650\u0655\3\2\2\2\u0651\u0652\f")
        buf.write("\b\2\2\u0652\u0654\7\23\2\2\u0653\u0651\3\2\2\2\u0654")
        buf.write("\u0657\3\2\2\2\u0655\u0653\3\2\2\2\u0655\u0656\3\2\2\2")
        buf.write("\u0656u\3\2\2\2\u0657\u0655\3\2\2\2\u0658\u065b\7\u00e2")
        buf.write("\2\2\u0659\u065b\5t;\2\u065a\u0658\3\2\2\2\u065a\u0659")
        buf.write("\3\2\2\2\u065bw\3\2\2\2\u065c\u0661\7\u00e9\2\2\u065d")
        buf.write("\u0661\7\u00ea\2\2\u065e\u0661\7\u00eb\2\2\u065f\u0661")
        buf.write("\5\u0096L\2\u0660\u065c\3\2\2\2\u0660\u065d\3\2\2\2\u0660")
        buf.write("\u065e\3\2\2\2\u0660\u065f\3\2\2\2\u0661y\3\2\2\2\u0662")
        buf.write("\u0663\7\u00cc\2\2\u0663\u0664\5V,\2\u0664\u0665\7\u00b8")
        buf.write("\2\2\u0665\u0666\5V,\2\u0666{\3\2\2\2\u0667\u0668\7F\2")
        buf.write("\2\u0668\u0669\7\4\2\2\u0669\u066a\7\u00cd\2\2\u066a\u066b")
        buf.write("\5X-\2\u066b\u066c\7\5\2\2\u066c}\3\2\2\2\u066d\u066e")
        buf.write("\7\u0089\2\2\u066e\u0679\7\4\2\2\u066f\u0670\7\u008a\2")
        buf.write("\2\u0670\u0671\7\31\2\2\u0671\u0676\5V,\2\u0672\u0673")
        buf.write("\7\6\2\2\u0673\u0675\5V,\2\u0674\u0672\3\2\2\2\u0675\u0678")
        buf.write("\3\2\2\2\u0676\u0674\3\2\2\2\u0676\u0677\3\2\2\2\u0677")
        buf.write("\u067a\3\2\2\2\u0678\u0676\3\2\2\2\u0679\u066f\3\2\2\2")
        buf.write("\u0679\u067a\3\2\2\2\u067a\u0685\3\2\2\2\u067b\u067c\7")
        buf.write("\u0085\2\2\u067c\u067d\7\31\2\2\u067d\u0682\5\66\34\2")
        buf.write("\u067e\u067f\7\6\2\2\u067f\u0681\5\66\34\2\u0680\u067e")
        buf.write("\3\2\2\2\u0681\u0684\3\2\2\2\u0682\u0680\3\2\2\2\u0682")
        buf.write("\u0683\3\2\2\2\u0683\u0686\3\2\2\2\u0684\u0682\3\2\2\2")
        buf.write("\u0685\u067b\3\2\2\2\u0685\u0686\3\2\2\2\u0686\u0688\3")
        buf.write("\2\2\2\u0687\u0689\5\u0080A\2\u0688\u0687\3\2\2\2\u0688")
        buf.write("\u0689\3\2\2\2\u0689\u068a\3\2\2\2\u068a\u068b\7\5\2\2")
        buf.write("\u068b\177\3\2\2\2\u068c\u068d\7\u0091\2\2\u068d\u069d")
        buf.write("\5\u0082B\2\u068e\u068f\7\u00a3\2\2\u068f\u069d\5\u0082")
        buf.write("B\2\u0690\u0691\7\u0091\2\2\u0691\u0692\7\30\2\2\u0692")
        buf.write("\u0693\5\u0082B\2\u0693\u0694\7\21\2\2\u0694\u0695\5\u0082")
        buf.write("B\2\u0695\u069d\3\2\2\2\u0696\u0697\7\u00a3\2\2\u0697")
        buf.write("\u0698\7\30\2\2\u0698\u0699\5\u0082B\2\u0699\u069a\7\21")
        buf.write("\2\2\u069a\u069b\5\u0082B\2\u069b\u069d\3\2\2\2\u069c")
        buf.write("\u068c\3\2\2\2\u069c\u068e\3\2\2\2\u069c\u0690\3\2\2\2")
        buf.write("\u069c\u0696\3\2\2\2\u069d\u0081\3\2\2\2\u069e\u069f\7")
        buf.write("\u00c1\2\2\u069f\u06a8\7\u008d\2\2\u06a0\u06a1\7\u00c1")
        buf.write("\2\2\u06a1\u06a8\7H\2\2\u06a2\u06a3\7)\2\2\u06a3\u06a8")
        buf.write("\7\u00a2\2\2\u06a4\u06a5\5V,\2\u06a5\u06a6\t\23\2\2\u06a6")
        buf.write("\u06a8\3\2\2\2\u06a7\u069e\3\2\2\2\u06a7\u06a0\3\2\2\2")
        buf.write("\u06a7\u06a2\3\2\2\2\u06a7\u06a4\3\2\2\2\u06a8\u0083\3")
        buf.write("\2\2\2\u06a9\u06aa\7J\2\2\u06aa\u06ae\t\24\2\2\u06ab\u06ac")
        buf.write("\7\u00bf\2\2\u06ac\u06ae\t\25\2\2\u06ad\u06a9\3\2\2\2")
        buf.write("\u06ad\u06ab\3\2\2\2\u06ae\u0085\3\2\2\2\u06af\u06b0\7")
        buf.write("d\2\2\u06b0\u06b1\7k\2\2\u06b1\u06b5\5\u0088E\2\u06b2")
        buf.write("\u06b3\7\u0092\2\2\u06b3\u06b5\t\26\2\2\u06b4\u06af\3")
        buf.write("\2\2\2\u06b4\u06b2\3\2\2\2\u06b5\u0087\3\2\2\2\u06b6\u06b7")
        buf.write("\7\u0092\2\2\u06b7\u06be\7\u00c2\2\2\u06b8\u06b9\7\u0092")
        buf.write("\2\2\u06b9\u06be\7$\2\2\u06ba\u06bb\7\u0095\2\2\u06bb")
        buf.write("\u06be\7\u0092\2\2\u06bc\u06be\7\u00a9\2\2\u06bd\u06b6")
        buf.write("\3\2\2\2\u06bd\u06b8\3\2\2\2\u06bd\u06ba\3\2\2\2\u06bd")
        buf.write("\u06bc\3\2\2\2\u06be\u0089\3\2\2\2\u06bf\u06c5\5V,\2\u06c0")
        buf.write("\u06c1\5\u0096L\2\u06c1\u06c2\7\13\2\2\u06c2\u06c3\5V")
        buf.write(",\2\u06c3\u06c5\3\2\2\2\u06c4\u06bf\3\2\2\2\u06c4\u06c0")
        buf.write("\3\2\2\2\u06c5\u008b\3\2\2\2\u06c6\u06cb\7\u00a8\2\2\u06c7")
        buf.write("\u06cb\7\64\2\2\u06c8\u06cb\7]\2\2\u06c9\u06cb\5\u0096")
        buf.write("L\2\u06ca\u06c6\3\2\2\2\u06ca\u06c7\3\2\2\2\u06ca\u06c8")
        buf.write("\3\2\2\2\u06ca\u06c9\3\2\2\2\u06cb\u008d\3\2\2\2\u06cc")
        buf.write("\u06d1\5\u0096L\2\u06cd\u06ce\7\3\2\2\u06ce\u06d0\5\u0096")
        buf.write("L\2\u06cf\u06cd\3\2\2\2\u06d0\u06d3\3\2\2\2\u06d1\u06cf")
        buf.write("\3\2\2\2\u06d1\u06d2\3\2\2\2\u06d2\u008f\3\2\2\2\u06d3")
        buf.write("\u06d1\3\2\2\2\u06d4\u06d8\7.\2\2\u06d5\u06d8\7+\2\2\u06d6")
        buf.write("\u06d8\5\u0092J\2\u06d7\u06d4\3\2\2\2\u06d7\u06d5\3\2")
        buf.write("\2\2\u06d7\u06d6\3\2\2\2\u06d8\u0091\3\2\2\2\u06d9\u06da")
        buf.write("\7\u00c6\2\2\u06da\u06df\5\u0096L\2\u06db\u06dc\7\u009e")
        buf.write("\2\2\u06dc\u06df\5\u0096L\2\u06dd\u06df\5\u0096L\2\u06de")
        buf.write("\u06d9\3\2\2\2\u06de\u06db\3\2\2\2\u06de\u06dd\3\2\2\2")
        buf.write("\u06df\u0093\3\2\2\2\u06e0\u06e5\5\u0096L\2\u06e1\u06e2")
        buf.write("\7\6\2\2\u06e2\u06e4\5\u0096L\2\u06e3\u06e1\3\2\2\2\u06e4")
        buf.write("\u06e7\3\2\2\2\u06e5\u06e3\3\2\2\2\u06e5\u06e6\3\2\2\2")
        buf.write("\u06e6\u0095\3\2\2\2\u06e7\u06e5\3\2\2\2\u06e8\u06ee\7")
        buf.write("\u00e5\2\2\u06e9\u06ee\7\u00e7\2\2\u06ea\u06ee\5\u009a")
        buf.write("N\2\u06eb\u06ee\7\u00e8\2\2\u06ec\u06ee\7\u00e6\2\2\u06ed")
        buf.write("\u06e8\3\2\2\2\u06ed\u06e9\3\2\2\2\u06ed\u06ea\3\2\2\2")
        buf.write("\u06ed\u06eb\3\2\2\2\u06ed\u06ec\3\2\2\2\u06ee\u0097\3")
        buf.write("\2\2\2\u06ef\u06f3\7\u00e3\2\2\u06f0\u06f3\7\u00e4\2\2")
        buf.write("\u06f1\u06f3\7\u00e2\2\2\u06f2\u06ef\3\2\2\2\u06f2\u06f0")
        buf.write("\3\2\2\2\u06f2\u06f1\3\2\2\2\u06f3\u0099\3\2\2\2\u06f4")
        buf.write("\u06f5\t\27\2\2\u06f5\u009b\3\2\2\2\u00e5\u00b2\u00b7")
        buf.write("\u00bd\u00c1\u00cf\u00d3\u00d7\u00db\u00e3\u00e7\u00ea")
        buf.write("\u00f1\u00fa\u0100\u0104\u010a\u0111\u011a\u0120\u012b")
        buf.write("\u0132\u013c\u0143\u014b\u0153\u015b\u0160\u0166\u016f")
        buf.write("\u0175\u017f\u0182\u0189\u0192\u019a\u019e\u01a8\u01ab")
        buf.write("\u01b5\u01c2\u01c8\u01cd\u01d3\u01dc\u01e2\u01e9\u01f1")
        buf.write("\u01f6\u01fa\u0202\u0208\u020f\u0214\u0218\u0222\u0225")
        buf.write("\u0229\u022c\u0234\u0239\u0249\u024f\u0255\u0257\u025d")
        buf.write("\u0263\u0265\u026b\u027e\u0283\u028a\u0296\u0298\u02ac")
        buf.write("\u02af\u02b3\u02b7\u02c9\u02cc\u02d4\u02d7\u02dd\u02e4")
        buf.write("\u02e9\u02ef\u02f3\u02f7\u02fd\u0305\u0314\u031b\u0320")
        buf.write("\u0327\u032f\u0333\u0338\u0343\u034f\u0352\u0356\u035e")
        buf.write("\u0364\u0367\u0369\u0375\u037c\u0380\u0384\u0388\u038f")
        buf.write("\u0398\u039b\u039f\u03a4\u03a8\u03ab\u03b2\u03bd\u03c0")
        buf.write("\u03ca\u03cd\u03d8\u03dd\u03e5\u03e8\u03ec\u03f0\u03fb")
        buf.write("\u03fe\u0405\u0418\u041c\u0420\u0424\u0428\u042c\u042e")
        buf.write("\u0439\u043e\u0447\u044d\u0451\u0453\u045b\u046c\u0472")
        buf.write("\u047d\u0484\u0488\u0490\u0492\u049f\u04a7\u04b0\u04b6")
        buf.write("\u04be\u04c4\u04c8\u04cd\u04d2\u04d8\u04e6\u04e8\u0505")
        buf.write("\u0510\u051a\u051d\u0522\u0529\u052c\u0535\u0538\u053c")
        buf.write("\u053f\u0542\u054e\u0551\u0564\u0568\u0570\u0574\u058d")
        buf.write("\u0590\u0599\u059f\u05a5\u05ab\u05b5\u05be\u05d4\u05d7")
        buf.write("\u05da\u05e4\u05e6\u05ed\u05ef\u05f5\u05fd\u0607\u060d")
        buf.write("\u0619\u061c\u0637\u0643\u0648\u064f\u0655\u065a\u0660")
        buf.write("\u0676\u0679\u0682\u0685\u0688\u069c\u06a7\u06ad\u06b4")
        buf.write("\u06bd\u06c4\u06ca\u06d1\u06d7\u06de\u06e5\u06ed\u06f2")
        return buf.getvalue()


class PrestoSQLParser ( Parser ):

    grammarFileName = "PrestoSQL.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'.'", "'('", "')'", "','", "'?'", "'->'", 
                     "'['", "']'", "'=>'", "'ADD'", "'ADMIN'", "'ALL'", 
                     "'ALTER'", "'ANALYZE'", "'AND'", "'ANY'", "'ARRAY'", 
                     "'AS'", "'ASC'", "'AT'", "'BERNOULLI'", "'BETWEEN'", 
                     "'BY'", "'CALL'", "'CALLED'", "'CASCADE'", "'CASE'", 
                     "'CAST'", "'CATALOGS'", "'COLUMN'", "'COLUMNS'", "'COMMENT'", 
                     "'COMMIT'", "'COMMITTED'", "'CONSTRAINT'", "'CREATE'", 
                     "'CROSS'", "'CUBE'", "'CURRENT'", "'CURRENT_DATE'", 
                     "'CURRENT_ROLE'", "'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", 
                     "'CURRENT_USER'", "'DATA'", "'DATE'", "'DAY'", "'DEALLOCATE'", 
                     "'DEFINER'", "'DELETE'", "'DESC'", "'DESCRIBE'", "'DETERMINISTIC'", 
                     "'DISTINCT'", "'DISTRIBUTED'", "'DROP'", "'ELSE'", 
                     "'END'", "'ESCAPE'", "'EXCEPT'", "'EXCLUDING'", "'EXECUTE'", 
                     "'EXISTS'", "'EXPLAIN'", "'EXTRACT'", "'EXTERNAL'", 
                     "'FALSE'", "'FILTER'", "'FIRST'", "'FOLLOWING'", "'FOR'", 
                     "'FORMAT'", "'FROM'", "'FULL'", "'FUNCTION'", "'FUNCTIONS'", 
                     "'GRANT'", "'GRANTED'", "'GRANTS'", "'GRAPHVIZ'", "'GROUP'", 
                     "'GROUPING'", "'HAVING'", "'HOUR'", "'IF'", "'IGNORE'", 
                     "'IN'", "'INCLUDING'", "'INNER'", "'INPUT'", "'INSERT'", 
                     "'INTERSECT'", "'INTERVAL'", "'INTO'", "'INVOKER'", 
                     "'IO'", "'IS'", "'ISOLATION'", "'JSON'", "'JOIN'", 
                     "'LANGUAGE'", "'LAST'", "'LATERAL'", "'LEFT'", "'LEVEL'", 
                     "'LIKE'", "'LIMIT'", "'LOCALTIME'", "'LOCALTIMESTAMP'", 
                     "'LOGICAL'", "'MAP'", "'MINUTE'", "'MONTH'", "'NAME'", 
                     "'NATURAL'", "'NFC'", "'NFD'", "'NFKC'", "'NFKD'", 
                     "'NO'", "'NONE'", "'NORMALIZE'", "'NOT'", "'NULL'", 
                     "'NULLIF'", "'NULLS'", "'ON'", "'ONLY'", "'OPTION'", 
                     "'OR'", "'ORDER'", "'ORDINALITY'", "'OUTER'", "'OUTPUT'", 
                     "'OVER'", "'PARTITION'", "'PARTITIONS'", "'POSITION'", 
                     "'PRECEDING'", "'PREPARE'", "'PRIVILEGES'", "'PROPERTIES'", 
                     "'RANGE'", "'READ'", "'RECURSIVE'", "'RENAME'", "'REPEATABLE'", 
                     "'REPLACE'", "'RESET'", "'RESPECT'", "'RESTRICT'", 
                     "'RETURN'", "'RETURNS'", "'REVOKE'", "'RIGHT'", "'ROLE'", 
                     "'ROLES'", "'ROLLBACK'", "'ROLLUP'", "'ROW'", "'ROWS'", 
                     "'SCHEMA'", "'SCHEMAS'", "'SECOND'", "'SECURITY'", 
                     "'SELECT'", "'SERIALIZABLE'", "'SESSION'", "'SET'", 
                     "'SETS'", "'SHOW'", "'SOME'", "'SQL'", "'START'", "'STATS'", 
                     "'SUBSTRING'", "'SYSTEM'", "'TABLE'", "'TABLES'", "'TABLESAMPLE'", 
                     "'TEXT'", "'THEN'", "'TIME'", "'TIMESTAMP'", "'TO'", 
                     "'TRANSACTION'", "'TRUE'", "'TRY_CAST'", "'TYPE'", 
                     "'UESCAPE'", "'UNBOUNDED'", "'UNCOMMITTED'", "'UNION'", 
                     "'UNNEST'", "'USE'", "'USER'", "'USING'", "'VALIDATE'", 
                     "'VALUES'", "'VERBOSE'", "'VIEW'", "'WHEN'", "'WHERE'", 
                     "'WITH'", "'WORK'", "'WRITE'", "'YEAR'", "'ZONE'", 
                     "'='", "<INVALID>", "'<'", "'<='", "'>'", "'>='", "'+'", 
                     "'-'", "'*'", "'/'", "'%'", "'||'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "ADD", "ADMIN", "ALL", "ALTER", 
                      "ANALYZE", "AND", "ANY", "ARRAY", "AS", "ASC", "AT", 
                      "BERNOULLI", "BETWEEN", "BY", "CALL", "CALLED", "CASCADE", 
                      "CASE", "CAST", "CATALOGS", "COLUMN", "COLUMNS", "COMMENT", 
                      "COMMIT", "COMMITTED", "CONSTRAINT", "CREATE", "CROSS", 
                      "CUBE", "CURRENT", "CURRENT_DATE", "CURRENT_ROLE", 
                      "CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_USER", 
                      "DATA", "DATE", "DAY", "DEALLOCATE", "DEFINER", "DELETE", 
                      "DESC", "DESCRIBE", "DETERMINISTIC", "DISTINCT", "DISTRIBUTED", 
                      "DROP", "ELSE", "END", "ESCAPE", "EXCEPT", "EXCLUDING", 
                      "EXECUTE", "EXISTS", "EXPLAIN", "EXTRACT", "EXTERNAL", 
                      "FALSE", "FILTER", "FIRST", "FOLLOWING", "FOR", "FORMAT", 
                      "FROM", "FULL", "FUNCTION", "FUNCTIONS", "GRANT", 
                      "GRANTED", "GRANTS", "GRAPHVIZ", "GROUP", "GROUPING", 
                      "HAVING", "HOUR", "IF", "IGNORE", "IN", "INCLUDING", 
                      "INNER", "INPUT", "INSERT", "INTERSECT", "INTERVAL", 
                      "INTO", "INVOKER", "IO", "IS", "ISOLATION", "JSON", 
                      "JOIN", "LANGUAGE", "LAST", "LATERAL", "LEFT", "LEVEL", 
                      "LIKE", "LIMIT", "LOCALTIME", "LOCALTIMESTAMP", "LOGICAL", 
                      "MAP", "MINUTE", "MONTH", "NAME", "NATURAL", "NFC", 
                      "NFD", "NFKC", "NFKD", "NO", "NONE", "NORMALIZE", 
                      "NOT", "NULL", "NULLIF", "NULLS", "ON", "ONLY", "OPTION", 
                      "OR", "ORDER", "ORDINALITY", "OUTER", "OUTPUT", "OVER", 
                      "PARTITION", "PARTITIONS", "POSITION", "PRECEDING", 
                      "PREPARE", "PRIVILEGES", "PROPERTIES", "RANGE", "READ", 
                      "RECURSIVE", "RENAME", "REPEATABLE", "REPLACE", "RESET", 
                      "RESPECT", "RESTRICT", "RETURN", "RETURNS", "REVOKE", 
                      "RIGHT", "ROLE", "ROLES", "ROLLBACK", "ROLLUP", "ROW", 
                      "ROWS", "SCHEMA", "SCHEMAS", "SECOND", "SECURITY", 
                      "SELECT", "SERIALIZABLE", "SESSION", "SET", "SETS", 
                      "SHOW", "SOME", "SQL", "START", "STATS", "SUBSTRING", 
                      "SYSTEM", "TABLE", "TABLES", "TABLESAMPLE", "TEXT", 
                      "THEN", "TIME", "TIMESTAMP", "TO", "TRANSACTION", 
                      "TRUE", "TRY_CAST", "TYPE", "UESCAPE", "UNBOUNDED", 
                      "UNCOMMITTED", "UNION", "UNNEST", "USE", "USER", "USING", 
                      "VALIDATE", "VALUES", "VERBOSE", "VIEW", "WHEN", "WHERE", 
                      "WITH", "WORK", "WRITE", "YEAR", "ZONE", "EQ", "NEQ", 
                      "LT", "LTE", "GT", "GTE", "PLUS", "MINUS", "ASTERISK", 
                      "SLASH", "PERCENT", "CONCAT", "STRING", "UNICODE_STRING", 
                      "BINARY_LITERAL", "INTEGER_VALUE", "DECIMAL_VALUE", 
                      "DOUBLE_VALUE", "IDENTIFIER", "DIGIT_IDENTIFIER", 
                      "QUOTED_IDENTIFIER", "BACKQUOTED_IDENTIFIER", "TIME_WITH_TIME_ZONE", 
                      "TIMESTAMP_WITH_TIME_ZONE", "DOUBLE_PRECISION", "SIMPLE_COMMENT", 
                      "BRACKETED_COMMENT", "WS", "UNRECOGNIZED", "DELIMITER" ]

    RULE_singleStatement = 0
    RULE_standaloneExpression = 1
    RULE_standaloneRoutineBody = 2
    RULE_statement = 3
    RULE_query = 4
    RULE_r_with = 5
    RULE_tableElement = 6
    RULE_columnDefinition = 7
    RULE_likeClause = 8
    RULE_properties = 9
    RULE_r_property = 10
    RULE_sqlParameterDeclaration = 11
    RULE_routineCharacteristics = 12
    RULE_routineCharacteristic = 13
    RULE_alterRoutineCharacteristics = 14
    RULE_alterRoutineCharacteristic = 15
    RULE_routineBody = 16
    RULE_returnStatement = 17
    RULE_externalBodyReference = 18
    RULE_language = 19
    RULE_determinism = 20
    RULE_nullCallClause = 21
    RULE_externalRoutineName = 22
    RULE_queryNoWith = 23
    RULE_queryTerm = 24
    RULE_queryPrimary = 25
    RULE_sortItem = 26
    RULE_querySpecification = 27
    RULE_groupBy = 28
    RULE_groupingElement = 29
    RULE_groupingSet = 30
    RULE_namedQuery = 31
    RULE_setQuantifier = 32
    RULE_selectItem = 33
    RULE_relation = 34
    RULE_joinType = 35
    RULE_joinCriteria = 36
    RULE_sampledRelation = 37
    RULE_sampleType = 38
    RULE_aliasedRelation = 39
    RULE_columnAliases = 40
    RULE_relationPrimary = 41
    RULE_expression = 42
    RULE_booleanExpression = 43
    RULE_predicate = 44
    RULE_valueExpression = 45
    RULE_primaryExpression = 46
    RULE_string = 47
    RULE_nullTreatment = 48
    RULE_timeZoneSpecifier = 49
    RULE_comparisonOperator = 50
    RULE_comparisonQuantifier = 51
    RULE_booleanValue = 52
    RULE_interval = 53
    RULE_intervalField = 54
    RULE_normalForm = 55
    RULE_types = 56
    RULE_r_type = 57
    RULE_typeParameter = 58
    RULE_baseType = 59
    RULE_whenClause = 60
    RULE_r_filter = 61
    RULE_over = 62
    RULE_windowFrame = 63
    RULE_frameBound = 64
    RULE_explainOption = 65
    RULE_transactionMode = 66
    RULE_levelOfIsolation = 67
    RULE_callArgument = 68
    RULE_privilege = 69
    RULE_qualifiedName = 70
    RULE_grantor = 71
    RULE_principal = 72
    RULE_roles = 73
    RULE_identifier = 74
    RULE_number = 75
    RULE_nonReserved = 76

    ruleNames =  [ "singleStatement", "standaloneExpression", "standaloneRoutineBody", 
                   "statement", "query", "r_with", "tableElement", "columnDefinition", 
                   "likeClause", "properties", "r_property", "sqlParameterDeclaration", 
                   "routineCharacteristics", "routineCharacteristic", "alterRoutineCharacteristics", 
                   "alterRoutineCharacteristic", "routineBody", "returnStatement", 
                   "externalBodyReference", "language", "determinism", "nullCallClause", 
                   "externalRoutineName", "queryNoWith", "queryTerm", "queryPrimary", 
                   "sortItem", "querySpecification", "groupBy", "groupingElement", 
                   "groupingSet", "namedQuery", "setQuantifier", "selectItem", 
                   "relation", "joinType", "joinCriteria", "sampledRelation", 
                   "sampleType", "aliasedRelation", "columnAliases", "relationPrimary", 
                   "expression", "booleanExpression", "predicate", "valueExpression", 
                   "primaryExpression", "string", "nullTreatment", "timeZoneSpecifier", 
                   "comparisonOperator", "comparisonQuantifier", "booleanValue", 
                   "interval", "intervalField", "normalForm", "types", "r_type", 
                   "typeParameter", "baseType", "whenClause", "r_filter", 
                   "over", "windowFrame", "frameBound", "explainOption", 
                   "transactionMode", "levelOfIsolation", "callArgument", 
                   "privilege", "qualifiedName", "grantor", "principal", 
                   "roles", "identifier", "number", "nonReserved" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    ADD=10
    ADMIN=11
    ALL=12
    ALTER=13
    ANALYZE=14
    AND=15
    ANY=16
    ARRAY=17
    AS=18
    ASC=19
    AT=20
    BERNOULLI=21
    BETWEEN=22
    BY=23
    CALL=24
    CALLED=25
    CASCADE=26
    CASE=27
    CAST=28
    CATALOGS=29
    COLUMN=30
    COLUMNS=31
    COMMENT=32
    COMMIT=33
    COMMITTED=34
    CONSTRAINT=35
    CREATE=36
    CROSS=37
    CUBE=38
    CURRENT=39
    CURRENT_DATE=40
    CURRENT_ROLE=41
    CURRENT_TIME=42
    CURRENT_TIMESTAMP=43
    CURRENT_USER=44
    DATA=45
    DATE=46
    DAY=47
    DEALLOCATE=48
    DEFINER=49
    DELETE=50
    DESC=51
    DESCRIBE=52
    DETERMINISTIC=53
    DISTINCT=54
    DISTRIBUTED=55
    DROP=56
    ELSE=57
    END=58
    ESCAPE=59
    EXCEPT=60
    EXCLUDING=61
    EXECUTE=62
    EXISTS=63
    EXPLAIN=64
    EXTRACT=65
    EXTERNAL=66
    FALSE=67
    FILTER=68
    FIRST=69
    FOLLOWING=70
    FOR=71
    FORMAT=72
    FROM=73
    FULL=74
    FUNCTION=75
    FUNCTIONS=76
    GRANT=77
    GRANTED=78
    GRANTS=79
    GRAPHVIZ=80
    GROUP=81
    GROUPING=82
    HAVING=83
    HOUR=84
    IF=85
    IGNORE=86
    IN=87
    INCLUDING=88
    INNER=89
    INPUT=90
    INSERT=91
    INTERSECT=92
    INTERVAL=93
    INTO=94
    INVOKER=95
    IO=96
    IS=97
    ISOLATION=98
    JSON=99
    JOIN=100
    LANGUAGE=101
    LAST=102
    LATERAL=103
    LEFT=104
    LEVEL=105
    LIKE=106
    LIMIT=107
    LOCALTIME=108
    LOCALTIMESTAMP=109
    LOGICAL=110
    MAP=111
    MINUTE=112
    MONTH=113
    NAME=114
    NATURAL=115
    NFC=116
    NFD=117
    NFKC=118
    NFKD=119
    NO=120
    NONE=121
    NORMALIZE=122
    NOT=123
    NULL=124
    NULLIF=125
    NULLS=126
    ON=127
    ONLY=128
    OPTION=129
    OR=130
    ORDER=131
    ORDINALITY=132
    OUTER=133
    OUTPUT=134
    OVER=135
    PARTITION=136
    PARTITIONS=137
    POSITION=138
    PRECEDING=139
    PREPARE=140
    PRIVILEGES=141
    PROPERTIES=142
    RANGE=143
    READ=144
    RECURSIVE=145
    RENAME=146
    REPEATABLE=147
    REPLACE=148
    RESET=149
    RESPECT=150
    RESTRICT=151
    RETURN=152
    RETURNS=153
    REVOKE=154
    RIGHT=155
    ROLE=156
    ROLES=157
    ROLLBACK=158
    ROLLUP=159
    ROW=160
    ROWS=161
    SCHEMA=162
    SCHEMAS=163
    SECOND=164
    SECURITY=165
    SELECT=166
    SERIALIZABLE=167
    SESSION=168
    SET=169
    SETS=170
    SHOW=171
    SOME=172
    SQL=173
    START=174
    STATS=175
    SUBSTRING=176
    SYSTEM=177
    TABLE=178
    TABLES=179
    TABLESAMPLE=180
    TEXT=181
    THEN=182
    TIME=183
    TIMESTAMP=184
    TO=185
    TRANSACTION=186
    TRUE=187
    TRY_CAST=188
    TYPE=189
    UESCAPE=190
    UNBOUNDED=191
    UNCOMMITTED=192
    UNION=193
    UNNEST=194
    USE=195
    USER=196
    USING=197
    VALIDATE=198
    VALUES=199
    VERBOSE=200
    VIEW=201
    WHEN=202
    WHERE=203
    WITH=204
    WORK=205
    WRITE=206
    YEAR=207
    ZONE=208
    EQ=209
    NEQ=210
    LT=211
    LTE=212
    GT=213
    GTE=214
    PLUS=215
    MINUS=216
    ASTERISK=217
    SLASH=218
    PERCENT=219
    CONCAT=220
    STRING=221
    UNICODE_STRING=222
    BINARY_LITERAL=223
    INTEGER_VALUE=224
    DECIMAL_VALUE=225
    DOUBLE_VALUE=226
    IDENTIFIER=227
    DIGIT_IDENTIFIER=228
    QUOTED_IDENTIFIER=229
    BACKQUOTED_IDENTIFIER=230
    TIME_WITH_TIME_ZONE=231
    TIMESTAMP_WITH_TIME_ZONE=232
    DOUBLE_PRECISION=233
    SIMPLE_COMMENT=234
    BRACKETED_COMMENT=235
    WS=236
    UNRECOGNIZED=237
    DELIMITER=238

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.8")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class SingleStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(PrestoSQLParser.StatementContext,0)


        def EOF(self):
            return self.getToken(PrestoSQLParser.EOF, 0)

        def getRuleIndex(self):
            return PrestoSQLParser.RULE_singleStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleStatement" ):
                listener.enterSingleStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleStatement" ):
                listener.exitSingleStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleStatement" ):
                return visitor.visitSingleStatement(self)
            else:
                return visitor.visitChildren(self)




    def singleStatement(self):

        localctx = PrestoSQLParser.SingleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_singleStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 154
            self.statement()
            self.state = 155
            self.match(PrestoSQLParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StandaloneExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(PrestoSQLParser.ExpressionContext,0)


        def EOF(self):
            return self.getToken(PrestoSQLParser.EOF, 0)

        def getRuleIndex(self):
            return PrestoSQLParser.RULE_standaloneExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStandaloneExpression" ):
                listener.enterStandaloneExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStandaloneExpression" ):
                listener.exitStandaloneExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStandaloneExpression" ):
                return visitor.visitStandaloneExpression(self)
            else:
                return visitor.visitChildren(self)




    def standaloneExpression(self):

        localctx = PrestoSQLParser.StandaloneExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_standaloneExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 157
            self.expression()
            self.state = 158
            self.match(PrestoSQLParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StandaloneRoutineBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def routineBody(self):
            return self.getTypedRuleContext(PrestoSQLParser.RoutineBodyContext,0)


        def EOF(self):
            return self.getToken(PrestoSQLParser.EOF, 0)

        def getRuleIndex(self):
            return PrestoSQLParser.RULE_standaloneRoutineBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStandaloneRoutineBody" ):
                listener.enterStandaloneRoutineBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStandaloneRoutineBody" ):
                listener.exitStandaloneRoutineBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStandaloneRoutineBody" ):
                return visitor.visitStandaloneRoutineBody(self)
            else:
                return visitor.visitChildren(self)




    def standaloneRoutineBody(self):

        localctx = PrestoSQLParser.StandaloneRoutineBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_standaloneRoutineBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 160
            self.routineBody()
            self.state = 161
            self.match(PrestoSQLParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PrestoSQLParser.RULE_statement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ExplainContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXPLAIN(self):
            return self.getToken(PrestoSQLParser.EXPLAIN, 0)
        def statement(self):
            return self.getTypedRuleContext(PrestoSQLParser.StatementContext,0)

        def ANALYZE(self):
            return self.getToken(PrestoSQLParser.ANALYZE, 0)
        def VERBOSE(self):
            return self.getToken(PrestoSQLParser.VERBOSE, 0)
        def explainOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrestoSQLParser.ExplainOptionContext)
            else:
                return self.getTypedRuleContext(PrestoSQLParser.ExplainOptionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplain" ):
                listener.enterExplain(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplain" ):
                listener.exitExplain(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExplain" ):
                return visitor.visitExplain(self)
            else:
                return visitor.visitChildren(self)


    class PrepareContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PREPARE(self):
            return self.getToken(PrestoSQLParser.PREPARE, 0)
        def identifier(self):
            return self.getTypedRuleContext(PrestoSQLParser.IdentifierContext,0)

        def FROM(self):
            return self.getToken(PrestoSQLParser.FROM, 0)
        def statement(self):
            return self.getTypedRuleContext(PrestoSQLParser.StatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrepare" ):
                listener.enterPrepare(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrepare" ):
                listener.exitPrepare(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrepare" ):
                return visitor.visitPrepare(self)
            else:
                return visitor.visitChildren(self)


    class UseContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.StatementContext
            super().__init__(parser)
            self.schema = None # IdentifierContext
            self.catalog = None # IdentifierContext
            self.copyFrom(ctx)

        def USE(self):
            return self.getToken(PrestoSQLParser.USE, 0)
        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrestoSQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(PrestoSQLParser.IdentifierContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUse" ):
                listener.enterUse(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUse" ):
                listener.exitUse(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUse" ):
                return visitor.visitUse(self)
            else:
                return visitor.visitChildren(self)


    class DeallocateContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DEALLOCATE(self):
            return self.getToken(PrestoSQLParser.DEALLOCATE, 0)
        def PREPARE(self):
            return self.getToken(PrestoSQLParser.PREPARE, 0)
        def identifier(self):
            return self.getTypedRuleContext(PrestoSQLParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeallocate" ):
                listener.enterDeallocate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeallocate" ):
                listener.exitDeallocate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeallocate" ):
                return visitor.visitDeallocate(self)
            else:
                return visitor.visitChildren(self)


    class RenameTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.StatementContext
            super().__init__(parser)
            self.r_from = None # QualifiedNameContext
            self.to = None # QualifiedNameContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(PrestoSQLParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(PrestoSQLParser.TABLE, 0)
        def RENAME(self):
            return self.getToken(PrestoSQLParser.RENAME, 0)
        def TO(self):
            return self.getToken(PrestoSQLParser.TO, 0)
        def qualifiedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrestoSQLParser.QualifiedNameContext)
            else:
                return self.getTypedRuleContext(PrestoSQLParser.QualifiedNameContext,i)

        def IF(self):
            return self.getToken(PrestoSQLParser.IF, 0)
        def EXISTS(self):
            return self.getToken(PrestoSQLParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenameTable" ):
                listener.enterRenameTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenameTable" ):
                listener.exitRenameTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRenameTable" ):
                return visitor.visitRenameTable(self)
            else:
                return visitor.visitChildren(self)


    class CommitContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COMMIT(self):
            return self.getToken(PrestoSQLParser.COMMIT, 0)
        def WORK(self):
            return self.getToken(PrestoSQLParser.WORK, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommit" ):
                listener.enterCommit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommit" ):
                listener.exitCommit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommit" ):
                return visitor.visitCommit(self)
            else:
                return visitor.visitChildren(self)


    class CreateRoleContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.StatementContext
            super().__init__(parser)
            self.name = None # IdentifierContext
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(PrestoSQLParser.CREATE, 0)
        def ROLE(self):
            return self.getToken(PrestoSQLParser.ROLE, 0)
        def identifier(self):
            return self.getTypedRuleContext(PrestoSQLParser.IdentifierContext,0)

        def WITH(self):
            return self.getToken(PrestoSQLParser.WITH, 0)
        def ADMIN(self):
            return self.getToken(PrestoSQLParser.ADMIN, 0)
        def grantor(self):
            return self.getTypedRuleContext(PrestoSQLParser.GrantorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRole" ):
                listener.enterCreateRole(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRole" ):
                listener.exitCreateRole(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateRole" ):
                return visitor.visitCreateRole(self)
            else:
                return visitor.visitChildren(self)


    class ShowCreateFunctionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(PrestoSQLParser.SHOW, 0)
        def CREATE(self):
            return self.getToken(PrestoSQLParser.CREATE, 0)
        def FUNCTION(self):
            return self.getToken(PrestoSQLParser.FUNCTION, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(PrestoSQLParser.QualifiedNameContext,0)

        def types(self):
            return self.getTypedRuleContext(PrestoSQLParser.TypesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateFunction" ):
                listener.enterShowCreateFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateFunction" ):
                listener.exitShowCreateFunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowCreateFunction" ):
                return visitor.visitShowCreateFunction(self)
            else:
                return visitor.visitChildren(self)


    class DropColumnContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.StatementContext
            super().__init__(parser)
            self.tableName = None # QualifiedNameContext
            self.column = None # QualifiedNameContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(PrestoSQLParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(PrestoSQLParser.TABLE, 0)
        def DROP(self):
            return self.getToken(PrestoSQLParser.DROP, 0)
        def COLUMN(self):
            return self.getToken(PrestoSQLParser.COLUMN, 0)
        def qualifiedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrestoSQLParser.QualifiedNameContext)
            else:
                return self.getTypedRuleContext(PrestoSQLParser.QualifiedNameContext,i)

        def IF(self, i:int=None):
            if i is None:
                return self.getTokens(PrestoSQLParser.IF)
            else:
                return self.getToken(PrestoSQLParser.IF, i)
        def EXISTS(self, i:int=None):
            if i is None:
                return self.getTokens(PrestoSQLParser.EXISTS)
            else:
                return self.getToken(PrestoSQLParser.EXISTS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropColumn" ):
                listener.enterDropColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropColumn" ):
                listener.exitDropColumn(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropColumn" ):
                return visitor.visitDropColumn(self)
            else:
                return visitor.visitChildren(self)


    class DropViewContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(PrestoSQLParser.DROP, 0)
        def VIEW(self):
            return self.getToken(PrestoSQLParser.VIEW, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(PrestoSQLParser.QualifiedNameContext,0)

        def IF(self):
            return self.getToken(PrestoSQLParser.IF, 0)
        def EXISTS(self):
            return self.getToken(PrestoSQLParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropView" ):
                listener.enterDropView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropView" ):
                listener.exitDropView(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropView" ):
                return visitor.visitDropView(self)
            else:
                return visitor.visitChildren(self)


    class ShowTablesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.StatementContext
            super().__init__(parser)
            self.pattern = None # StringContext
            self.escape = None # StringContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(PrestoSQLParser.SHOW, 0)
        def TABLES(self):
            return self.getToken(PrestoSQLParser.TABLES, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(PrestoSQLParser.QualifiedNameContext,0)

        def LIKE(self):
            return self.getToken(PrestoSQLParser.LIKE, 0)
        def FROM(self):
            return self.getToken(PrestoSQLParser.FROM, 0)
        def IN(self):
            return self.getToken(PrestoSQLParser.IN, 0)
        def string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrestoSQLParser.StringContext)
            else:
                return self.getTypedRuleContext(PrestoSQLParser.StringContext,i)

        def ESCAPE(self):
            return self.getToken(PrestoSQLParser.ESCAPE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowTables" ):
                listener.enterShowTables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowTables" ):
                listener.exitShowTables(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowTables" ):
                return visitor.visitShowTables(self)
            else:
                return visitor.visitChildren(self)


    class ShowCatalogsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.StatementContext
            super().__init__(parser)
            self.pattern = None # StringContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(PrestoSQLParser.SHOW, 0)
        def CATALOGS(self):
            return self.getToken(PrestoSQLParser.CATALOGS, 0)
        def LIKE(self):
            return self.getToken(PrestoSQLParser.LIKE, 0)
        def string(self):
            return self.getTypedRuleContext(PrestoSQLParser.StringContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCatalogs" ):
                listener.enterShowCatalogs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCatalogs" ):
                listener.exitShowCatalogs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowCatalogs" ):
                return visitor.visitShowCatalogs(self)
            else:
                return visitor.visitChildren(self)


    class ShowRolesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(PrestoSQLParser.SHOW, 0)
        def ROLES(self):
            return self.getToken(PrestoSQLParser.ROLES, 0)
        def CURRENT(self):
            return self.getToken(PrestoSQLParser.CURRENT, 0)
        def identifier(self):
            return self.getTypedRuleContext(PrestoSQLParser.IdentifierContext,0)

        def FROM(self):
            return self.getToken(PrestoSQLParser.FROM, 0)
        def IN(self):
            return self.getToken(PrestoSQLParser.IN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRoles" ):
                listener.enterShowRoles(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRoles" ):
                listener.exitShowRoles(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowRoles" ):
                return visitor.visitShowRoles(self)
            else:
                return visitor.visitChildren(self)


    class RenameColumnContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.StatementContext
            super().__init__(parser)
            self.tableName = None # QualifiedNameContext
            self.r_from = None # IdentifierContext
            self.to = None # IdentifierContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(PrestoSQLParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(PrestoSQLParser.TABLE, 0)
        def RENAME(self):
            return self.getToken(PrestoSQLParser.RENAME, 0)
        def COLUMN(self):
            return self.getToken(PrestoSQLParser.COLUMN, 0)
        def TO(self):
            return self.getToken(PrestoSQLParser.TO, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(PrestoSQLParser.QualifiedNameContext,0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrestoSQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(PrestoSQLParser.IdentifierContext,i)

        def IF(self, i:int=None):
            if i is None:
                return self.getTokens(PrestoSQLParser.IF)
            else:
                return self.getToken(PrestoSQLParser.IF, i)
        def EXISTS(self, i:int=None):
            if i is None:
                return self.getTokens(PrestoSQLParser.EXISTS)
            else:
                return self.getToken(PrestoSQLParser.EXISTS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenameColumn" ):
                listener.enterRenameColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenameColumn" ):
                listener.exitRenameColumn(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRenameColumn" ):
                return visitor.visitRenameColumn(self)
            else:
                return visitor.visitChildren(self)


    class RevokeRolesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REVOKE(self):
            return self.getToken(PrestoSQLParser.REVOKE, 0)
        def roles(self):
            return self.getTypedRuleContext(PrestoSQLParser.RolesContext,0)

        def FROM(self):
            return self.getToken(PrestoSQLParser.FROM, 0)
        def principal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrestoSQLParser.PrincipalContext)
            else:
                return self.getTypedRuleContext(PrestoSQLParser.PrincipalContext,i)

        def ADMIN(self):
            return self.getToken(PrestoSQLParser.ADMIN, 0)
        def OPTION(self):
            return self.getToken(PrestoSQLParser.OPTION, 0)
        def FOR(self):
            return self.getToken(PrestoSQLParser.FOR, 0)
        def GRANTED(self):
            return self.getToken(PrestoSQLParser.GRANTED, 0)
        def BY(self):
            return self.getToken(PrestoSQLParser.BY, 0)
        def grantor(self):
            return self.getTypedRuleContext(PrestoSQLParser.GrantorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevokeRoles" ):
                listener.enterRevokeRoles(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevokeRoles" ):
                listener.exitRevokeRoles(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRevokeRoles" ):
                return visitor.visitRevokeRoles(self)
            else:
                return visitor.visitChildren(self)


    class ShowCreateTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(PrestoSQLParser.SHOW, 0)
        def CREATE(self):
            return self.getToken(PrestoSQLParser.CREATE, 0)
        def TABLE(self):
            return self.getToken(PrestoSQLParser.TABLE, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(PrestoSQLParser.QualifiedNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateTable" ):
                listener.enterShowCreateTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateTable" ):
                listener.exitShowCreateTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowCreateTable" ):
                return visitor.visitShowCreateTable(self)
            else:
                return visitor.visitChildren(self)


    class ShowColumnsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(PrestoSQLParser.SHOW, 0)
        def COLUMNS(self):
            return self.getToken(PrestoSQLParser.COLUMNS, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(PrestoSQLParser.QualifiedNameContext,0)

        def FROM(self):
            return self.getToken(PrestoSQLParser.FROM, 0)
        def IN(self):
            return self.getToken(PrestoSQLParser.IN, 0)
        def DESCRIBE(self):
            return self.getToken(PrestoSQLParser.DESCRIBE, 0)
        def DESC(self):
            return self.getToken(PrestoSQLParser.DESC, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowColumns" ):
                listener.enterShowColumns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowColumns" ):
                listener.exitShowColumns(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowColumns" ):
                return visitor.visitShowColumns(self)
            else:
                return visitor.visitChildren(self)


    class ShowRoleGrantsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(PrestoSQLParser.SHOW, 0)
        def ROLE(self):
            return self.getToken(PrestoSQLParser.ROLE, 0)
        def GRANTS(self):
            return self.getToken(PrestoSQLParser.GRANTS, 0)
        def identifier(self):
            return self.getTypedRuleContext(PrestoSQLParser.IdentifierContext,0)

        def FROM(self):
            return self.getToken(PrestoSQLParser.FROM, 0)
        def IN(self):
            return self.getToken(PrestoSQLParser.IN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRoleGrants" ):
                listener.enterShowRoleGrants(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRoleGrants" ):
                listener.exitShowRoleGrants(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowRoleGrants" ):
                return visitor.visitShowRoleGrants(self)
            else:
                return visitor.visitChildren(self)


    class AddColumnContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.StatementContext
            super().__init__(parser)
            self.tableName = None # QualifiedNameContext
            self.column = None # ColumnDefinitionContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(PrestoSQLParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(PrestoSQLParser.TABLE, 0)
        def ADD(self):
            return self.getToken(PrestoSQLParser.ADD, 0)
        def COLUMN(self):
            return self.getToken(PrestoSQLParser.COLUMN, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(PrestoSQLParser.QualifiedNameContext,0)

        def columnDefinition(self):
            return self.getTypedRuleContext(PrestoSQLParser.ColumnDefinitionContext,0)

        def IF(self, i:int=None):
            if i is None:
                return self.getTokens(PrestoSQLParser.IF)
            else:
                return self.getToken(PrestoSQLParser.IF, i)
        def EXISTS(self, i:int=None):
            if i is None:
                return self.getTokens(PrestoSQLParser.EXISTS)
            else:
                return self.getToken(PrestoSQLParser.EXISTS, i)
        def NOT(self):
            return self.getToken(PrestoSQLParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddColumn" ):
                listener.enterAddColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddColumn" ):
                listener.exitAddColumn(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAddColumn" ):
                return visitor.visitAddColumn(self)
            else:
                return visitor.visitChildren(self)


    class ResetSessionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RESET(self):
            return self.getToken(PrestoSQLParser.RESET, 0)
        def SESSION(self):
            return self.getToken(PrestoSQLParser.SESSION, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(PrestoSQLParser.QualifiedNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResetSession" ):
                listener.enterResetSession(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResetSession" ):
                listener.exitResetSession(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitResetSession" ):
                return visitor.visitResetSession(self)
            else:
                return visitor.visitChildren(self)


    class InsertIntoContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INSERT(self):
            return self.getToken(PrestoSQLParser.INSERT, 0)
        def INTO(self):
            return self.getToken(PrestoSQLParser.INTO, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(PrestoSQLParser.QualifiedNameContext,0)

        def query(self):
            return self.getTypedRuleContext(PrestoSQLParser.QueryContext,0)

        def columnAliases(self):
            return self.getTypedRuleContext(PrestoSQLParser.ColumnAliasesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertInto" ):
                listener.enterInsertInto(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertInto" ):
                listener.exitInsertInto(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsertInto" ):
                return visitor.visitInsertInto(self)
            else:
                return visitor.visitChildren(self)


    class ShowSessionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(PrestoSQLParser.SHOW, 0)
        def SESSION(self):
            return self.getToken(PrestoSQLParser.SESSION, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowSession" ):
                listener.enterShowSession(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowSession" ):
                listener.exitShowSession(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowSession" ):
                return visitor.visitShowSession(self)
            else:
                return visitor.visitChildren(self)


    class CreateSchemaContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(PrestoSQLParser.CREATE, 0)
        def SCHEMA(self):
            return self.getToken(PrestoSQLParser.SCHEMA, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(PrestoSQLParser.QualifiedNameContext,0)

        def IF(self):
            return self.getToken(PrestoSQLParser.IF, 0)
        def NOT(self):
            return self.getToken(PrestoSQLParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(PrestoSQLParser.EXISTS, 0)
        def WITH(self):
            return self.getToken(PrestoSQLParser.WITH, 0)
        def properties(self):
            return self.getTypedRuleContext(PrestoSQLParser.PropertiesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateSchema" ):
                listener.enterCreateSchema(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateSchema" ):
                listener.exitCreateSchema(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateSchema" ):
                return visitor.visitCreateSchema(self)
            else:
                return visitor.visitChildren(self)


    class ExecuteContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXECUTE(self):
            return self.getToken(PrestoSQLParser.EXECUTE, 0)
        def identifier(self):
            return self.getTypedRuleContext(PrestoSQLParser.IdentifierContext,0)

        def USING(self):
            return self.getToken(PrestoSQLParser.USING, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrestoSQLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PrestoSQLParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecute" ):
                listener.enterExecute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecute" ):
                listener.exitExecute(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExecute" ):
                return visitor.visitExecute(self)
            else:
                return visitor.visitChildren(self)


    class RenameSchemaContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(PrestoSQLParser.ALTER, 0)
        def SCHEMA(self):
            return self.getToken(PrestoSQLParser.SCHEMA, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(PrestoSQLParser.QualifiedNameContext,0)

        def RENAME(self):
            return self.getToken(PrestoSQLParser.RENAME, 0)
        def TO(self):
            return self.getToken(PrestoSQLParser.TO, 0)
        def identifier(self):
            return self.getTypedRuleContext(PrestoSQLParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenameSchema" ):
                listener.enterRenameSchema(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenameSchema" ):
                listener.exitRenameSchema(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRenameSchema" ):
                return visitor.visitRenameSchema(self)
            else:
                return visitor.visitChildren(self)


    class DropRoleContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.StatementContext
            super().__init__(parser)
            self.name = None # IdentifierContext
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(PrestoSQLParser.DROP, 0)
        def ROLE(self):
            return self.getToken(PrestoSQLParser.ROLE, 0)
        def identifier(self):
            return self.getTypedRuleContext(PrestoSQLParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRole" ):
                listener.enterDropRole(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRole" ):
                listener.exitDropRole(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropRole" ):
                return visitor.visitDropRole(self)
            else:
                return visitor.visitChildren(self)


    class AnalyzeContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ANALYZE(self):
            return self.getToken(PrestoSQLParser.ANALYZE, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(PrestoSQLParser.QualifiedNameContext,0)

        def WITH(self):
            return self.getToken(PrestoSQLParser.WITH, 0)
        def properties(self):
            return self.getTypedRuleContext(PrestoSQLParser.PropertiesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnalyze" ):
                listener.enterAnalyze(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnalyze" ):
                listener.exitAnalyze(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnalyze" ):
                return visitor.visitAnalyze(self)
            else:
                return visitor.visitChildren(self)


    class SetRoleContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.StatementContext
            super().__init__(parser)
            self.role = None # IdentifierContext
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(PrestoSQLParser.SET, 0)
        def ROLE(self):
            return self.getToken(PrestoSQLParser.ROLE, 0)
        def ALL(self):
            return self.getToken(PrestoSQLParser.ALL, 0)
        def NONE(self):
            return self.getToken(PrestoSQLParser.NONE, 0)
        def identifier(self):
            return self.getTypedRuleContext(PrestoSQLParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetRole" ):
                listener.enterSetRole(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetRole" ):
                listener.exitSetRole(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetRole" ):
                return visitor.visitSetRole(self)
            else:
                return visitor.visitChildren(self)


    class CreateFunctionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.StatementContext
            super().__init__(parser)
            self.functionName = None # QualifiedNameContext
            self.returnType = None # R_typeContext
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(PrestoSQLParser.CREATE, 0)
        def FUNCTION(self):
            return self.getToken(PrestoSQLParser.FUNCTION, 0)
        def RETURNS(self):
            return self.getToken(PrestoSQLParser.RETURNS, 0)
        def routineCharacteristics(self):
            return self.getTypedRuleContext(PrestoSQLParser.RoutineCharacteristicsContext,0)

        def routineBody(self):
            return self.getTypedRuleContext(PrestoSQLParser.RoutineBodyContext,0)

        def qualifiedName(self):
            return self.getTypedRuleContext(PrestoSQLParser.QualifiedNameContext,0)

        def r_type(self):
            return self.getTypedRuleContext(PrestoSQLParser.R_typeContext,0)

        def OR(self):
            return self.getToken(PrestoSQLParser.OR, 0)
        def REPLACE(self):
            return self.getToken(PrestoSQLParser.REPLACE, 0)
        def sqlParameterDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrestoSQLParser.SqlParameterDeclarationContext)
            else:
                return self.getTypedRuleContext(PrestoSQLParser.SqlParameterDeclarationContext,i)

        def COMMENT(self):
            return self.getToken(PrestoSQLParser.COMMENT, 0)
        def string(self):
            return self.getTypedRuleContext(PrestoSQLParser.StringContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateFunction" ):
                listener.enterCreateFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateFunction" ):
                listener.exitCreateFunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateFunction" ):
                return visitor.visitCreateFunction(self)
            else:
                return visitor.visitChildren(self)


    class ShowGrantsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(PrestoSQLParser.SHOW, 0)
        def GRANTS(self):
            return self.getToken(PrestoSQLParser.GRANTS, 0)
        def ON(self):
            return self.getToken(PrestoSQLParser.ON, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(PrestoSQLParser.QualifiedNameContext,0)

        def TABLE(self):
            return self.getToken(PrestoSQLParser.TABLE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowGrants" ):
                listener.enterShowGrants(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowGrants" ):
                listener.exitShowGrants(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowGrants" ):
                return visitor.visitShowGrants(self)
            else:
                return visitor.visitChildren(self)


    class DropSchemaContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(PrestoSQLParser.DROP, 0)
        def SCHEMA(self):
            return self.getToken(PrestoSQLParser.SCHEMA, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(PrestoSQLParser.QualifiedNameContext,0)

        def IF(self):
            return self.getToken(PrestoSQLParser.IF, 0)
        def EXISTS(self):
            return self.getToken(PrestoSQLParser.EXISTS, 0)
        def CASCADE(self):
            return self.getToken(PrestoSQLParser.CASCADE, 0)
        def RESTRICT(self):
            return self.getToken(PrestoSQLParser.RESTRICT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropSchema" ):
                listener.enterDropSchema(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropSchema" ):
                listener.exitDropSchema(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropSchema" ):
                return visitor.visitDropSchema(self)
            else:
                return visitor.visitChildren(self)


    class ShowCreateViewContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(PrestoSQLParser.SHOW, 0)
        def CREATE(self):
            return self.getToken(PrestoSQLParser.CREATE, 0)
        def VIEW(self):
            return self.getToken(PrestoSQLParser.VIEW, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(PrestoSQLParser.QualifiedNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateView" ):
                listener.enterShowCreateView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateView" ):
                listener.exitShowCreateView(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowCreateView" ):
                return visitor.visitShowCreateView(self)
            else:
                return visitor.visitChildren(self)


    class CreateTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(PrestoSQLParser.CREATE, 0)
        def TABLE(self):
            return self.getToken(PrestoSQLParser.TABLE, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(PrestoSQLParser.QualifiedNameContext,0)

        def tableElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrestoSQLParser.TableElementContext)
            else:
                return self.getTypedRuleContext(PrestoSQLParser.TableElementContext,i)

        def IF(self):
            return self.getToken(PrestoSQLParser.IF, 0)
        def NOT(self):
            return self.getToken(PrestoSQLParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(PrestoSQLParser.EXISTS, 0)
        def COMMENT(self):
            return self.getToken(PrestoSQLParser.COMMENT, 0)
        def string(self):
            return self.getTypedRuleContext(PrestoSQLParser.StringContext,0)

        def WITH(self):
            return self.getToken(PrestoSQLParser.WITH, 0)
        def properties(self):
            return self.getTypedRuleContext(PrestoSQLParser.PropertiesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTable" ):
                listener.enterCreateTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTable" ):
                listener.exitCreateTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateTable" ):
                return visitor.visitCreateTable(self)
            else:
                return visitor.visitChildren(self)


    class StartTransactionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def START(self):
            return self.getToken(PrestoSQLParser.START, 0)
        def TRANSACTION(self):
            return self.getToken(PrestoSQLParser.TRANSACTION, 0)
        def transactionMode(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrestoSQLParser.TransactionModeContext)
            else:
                return self.getTypedRuleContext(PrestoSQLParser.TransactionModeContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStartTransaction" ):
                listener.enterStartTransaction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStartTransaction" ):
                listener.exitStartTransaction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStartTransaction" ):
                return visitor.visitStartTransaction(self)
            else:
                return visitor.visitChildren(self)


    class CreateTableAsSelectContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(PrestoSQLParser.CREATE, 0)
        def TABLE(self):
            return self.getToken(PrestoSQLParser.TABLE, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(PrestoSQLParser.QualifiedNameContext,0)

        def AS(self):
            return self.getToken(PrestoSQLParser.AS, 0)
        def query(self):
            return self.getTypedRuleContext(PrestoSQLParser.QueryContext,0)

        def IF(self):
            return self.getToken(PrestoSQLParser.IF, 0)
        def NOT(self):
            return self.getToken(PrestoSQLParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(PrestoSQLParser.EXISTS, 0)
        def columnAliases(self):
            return self.getTypedRuleContext(PrestoSQLParser.ColumnAliasesContext,0)

        def COMMENT(self):
            return self.getToken(PrestoSQLParser.COMMENT, 0)
        def string(self):
            return self.getTypedRuleContext(PrestoSQLParser.StringContext,0)

        def WITH(self, i:int=None):
            if i is None:
                return self.getTokens(PrestoSQLParser.WITH)
            else:
                return self.getToken(PrestoSQLParser.WITH, i)
        def properties(self):
            return self.getTypedRuleContext(PrestoSQLParser.PropertiesContext,0)

        def DATA(self):
            return self.getToken(PrestoSQLParser.DATA, 0)
        def NO(self):
            return self.getToken(PrestoSQLParser.NO, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTableAsSelect" ):
                listener.enterCreateTableAsSelect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTableAsSelect" ):
                listener.exitCreateTableAsSelect(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateTableAsSelect" ):
                return visitor.visitCreateTableAsSelect(self)
            else:
                return visitor.visitChildren(self)


    class ShowStatsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(PrestoSQLParser.SHOW, 0)
        def STATS(self):
            return self.getToken(PrestoSQLParser.STATS, 0)
        def FOR(self):
            return self.getToken(PrestoSQLParser.FOR, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(PrestoSQLParser.QualifiedNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowStats" ):
                listener.enterShowStats(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowStats" ):
                listener.exitShowStats(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowStats" ):
                return visitor.visitShowStats(self)
            else:
                return visitor.visitChildren(self)


    class DropFunctionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(PrestoSQLParser.DROP, 0)
        def FUNCTION(self):
            return self.getToken(PrestoSQLParser.FUNCTION, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(PrestoSQLParser.QualifiedNameContext,0)

        def IF(self):
            return self.getToken(PrestoSQLParser.IF, 0)
        def EXISTS(self):
            return self.getToken(PrestoSQLParser.EXISTS, 0)
        def types(self):
            return self.getTypedRuleContext(PrestoSQLParser.TypesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropFunction" ):
                listener.enterDropFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropFunction" ):
                listener.exitDropFunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropFunction" ):
                return visitor.visitDropFunction(self)
            else:
                return visitor.visitChildren(self)


    class RevokeContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.StatementContext
            super().__init__(parser)
            self.grantee = None # PrincipalContext
            self.copyFrom(ctx)

        def REVOKE(self):
            return self.getToken(PrestoSQLParser.REVOKE, 0)
        def ON(self):
            return self.getToken(PrestoSQLParser.ON, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(PrestoSQLParser.QualifiedNameContext,0)

        def FROM(self):
            return self.getToken(PrestoSQLParser.FROM, 0)
        def principal(self):
            return self.getTypedRuleContext(PrestoSQLParser.PrincipalContext,0)

        def privilege(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrestoSQLParser.PrivilegeContext)
            else:
                return self.getTypedRuleContext(PrestoSQLParser.PrivilegeContext,i)

        def ALL(self):
            return self.getToken(PrestoSQLParser.ALL, 0)
        def PRIVILEGES(self):
            return self.getToken(PrestoSQLParser.PRIVILEGES, 0)
        def GRANT(self):
            return self.getToken(PrestoSQLParser.GRANT, 0)
        def OPTION(self):
            return self.getToken(PrestoSQLParser.OPTION, 0)
        def FOR(self):
            return self.getToken(PrestoSQLParser.FOR, 0)
        def TABLE(self):
            return self.getToken(PrestoSQLParser.TABLE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevoke" ):
                listener.enterRevoke(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevoke" ):
                listener.exitRevoke(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRevoke" ):
                return visitor.visitRevoke(self)
            else:
                return visitor.visitChildren(self)


    class DeleteContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DELETE(self):
            return self.getToken(PrestoSQLParser.DELETE, 0)
        def FROM(self):
            return self.getToken(PrestoSQLParser.FROM, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(PrestoSQLParser.QualifiedNameContext,0)

        def WHERE(self):
            return self.getToken(PrestoSQLParser.WHERE, 0)
        def booleanExpression(self):
            return self.getTypedRuleContext(PrestoSQLParser.BooleanExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelete" ):
                listener.enterDelete(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelete" ):
                listener.exitDelete(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDelete" ):
                return visitor.visitDelete(self)
            else:
                return visitor.visitChildren(self)


    class DescribeInputContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DESCRIBE(self):
            return self.getToken(PrestoSQLParser.DESCRIBE, 0)
        def INPUT(self):
            return self.getToken(PrestoSQLParser.INPUT, 0)
        def identifier(self):
            return self.getTypedRuleContext(PrestoSQLParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribeInput" ):
                listener.enterDescribeInput(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribeInput" ):
                listener.exitDescribeInput(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDescribeInput" ):
                return visitor.visitDescribeInput(self)
            else:
                return visitor.visitChildren(self)


    class ShowStatsForQueryContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(PrestoSQLParser.SHOW, 0)
        def STATS(self):
            return self.getToken(PrestoSQLParser.STATS, 0)
        def FOR(self):
            return self.getToken(PrestoSQLParser.FOR, 0)
        def querySpecification(self):
            return self.getTypedRuleContext(PrestoSQLParser.QuerySpecificationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowStatsForQuery" ):
                listener.enterShowStatsForQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowStatsForQuery" ):
                listener.exitShowStatsForQuery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowStatsForQuery" ):
                return visitor.visitShowStatsForQuery(self)
            else:
                return visitor.visitChildren(self)


    class StatementDefaultContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def query(self):
            return self.getTypedRuleContext(PrestoSQLParser.QueryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatementDefault" ):
                listener.enterStatementDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatementDefault" ):
                listener.exitStatementDefault(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatementDefault" ):
                return visitor.visitStatementDefault(self)
            else:
                return visitor.visitChildren(self)


    class AlterFunctionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(PrestoSQLParser.ALTER, 0)
        def FUNCTION(self):
            return self.getToken(PrestoSQLParser.FUNCTION, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(PrestoSQLParser.QualifiedNameContext,0)

        def alterRoutineCharacteristics(self):
            return self.getTypedRuleContext(PrestoSQLParser.AlterRoutineCharacteristicsContext,0)

        def types(self):
            return self.getTypedRuleContext(PrestoSQLParser.TypesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterFunction" ):
                listener.enterAlterFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterFunction" ):
                listener.exitAlterFunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterFunction" ):
                return visitor.visitAlterFunction(self)
            else:
                return visitor.visitChildren(self)


    class SetSessionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(PrestoSQLParser.SET, 0)
        def SESSION(self):
            return self.getToken(PrestoSQLParser.SESSION, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(PrestoSQLParser.QualifiedNameContext,0)

        def EQ(self):
            return self.getToken(PrestoSQLParser.EQ, 0)
        def expression(self):
            return self.getTypedRuleContext(PrestoSQLParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetSession" ):
                listener.enterSetSession(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetSession" ):
                listener.exitSetSession(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetSession" ):
                return visitor.visitSetSession(self)
            else:
                return visitor.visitChildren(self)


    class CreateViewContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(PrestoSQLParser.CREATE, 0)
        def VIEW(self):
            return self.getToken(PrestoSQLParser.VIEW, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(PrestoSQLParser.QualifiedNameContext,0)

        def AS(self):
            return self.getToken(PrestoSQLParser.AS, 0)
        def query(self):
            return self.getTypedRuleContext(PrestoSQLParser.QueryContext,0)

        def OR(self):
            return self.getToken(PrestoSQLParser.OR, 0)
        def REPLACE(self):
            return self.getToken(PrestoSQLParser.REPLACE, 0)
        def SECURITY(self):
            return self.getToken(PrestoSQLParser.SECURITY, 0)
        def DEFINER(self):
            return self.getToken(PrestoSQLParser.DEFINER, 0)
        def INVOKER(self):
            return self.getToken(PrestoSQLParser.INVOKER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateView" ):
                listener.enterCreateView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateView" ):
                listener.exitCreateView(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateView" ):
                return visitor.visitCreateView(self)
            else:
                return visitor.visitChildren(self)


    class ShowSchemasContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.StatementContext
            super().__init__(parser)
            self.pattern = None # StringContext
            self.escape = None # StringContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(PrestoSQLParser.SHOW, 0)
        def SCHEMAS(self):
            return self.getToken(PrestoSQLParser.SCHEMAS, 0)
        def identifier(self):
            return self.getTypedRuleContext(PrestoSQLParser.IdentifierContext,0)

        def LIKE(self):
            return self.getToken(PrestoSQLParser.LIKE, 0)
        def FROM(self):
            return self.getToken(PrestoSQLParser.FROM, 0)
        def IN(self):
            return self.getToken(PrestoSQLParser.IN, 0)
        def string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrestoSQLParser.StringContext)
            else:
                return self.getTypedRuleContext(PrestoSQLParser.StringContext,i)

        def ESCAPE(self):
            return self.getToken(PrestoSQLParser.ESCAPE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowSchemas" ):
                listener.enterShowSchemas(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowSchemas" ):
                listener.exitShowSchemas(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowSchemas" ):
                return visitor.visitShowSchemas(self)
            else:
                return visitor.visitChildren(self)


    class DropTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(PrestoSQLParser.DROP, 0)
        def TABLE(self):
            return self.getToken(PrestoSQLParser.TABLE, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(PrestoSQLParser.QualifiedNameContext,0)

        def IF(self):
            return self.getToken(PrestoSQLParser.IF, 0)
        def EXISTS(self):
            return self.getToken(PrestoSQLParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropTable" ):
                listener.enterDropTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropTable" ):
                listener.exitDropTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropTable" ):
                return visitor.visitDropTable(self)
            else:
                return visitor.visitChildren(self)


    class RollbackContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ROLLBACK(self):
            return self.getToken(PrestoSQLParser.ROLLBACK, 0)
        def WORK(self):
            return self.getToken(PrestoSQLParser.WORK, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRollback" ):
                listener.enterRollback(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRollback" ):
                listener.exitRollback(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRollback" ):
                return visitor.visitRollback(self)
            else:
                return visitor.visitChildren(self)


    class GrantRolesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def GRANT(self):
            return self.getToken(PrestoSQLParser.GRANT, 0)
        def roles(self):
            return self.getTypedRuleContext(PrestoSQLParser.RolesContext,0)

        def TO(self):
            return self.getToken(PrestoSQLParser.TO, 0)
        def principal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrestoSQLParser.PrincipalContext)
            else:
                return self.getTypedRuleContext(PrestoSQLParser.PrincipalContext,i)

        def WITH(self):
            return self.getToken(PrestoSQLParser.WITH, 0)
        def ADMIN(self):
            return self.getToken(PrestoSQLParser.ADMIN, 0)
        def OPTION(self):
            return self.getToken(PrestoSQLParser.OPTION, 0)
        def GRANTED(self):
            return self.getToken(PrestoSQLParser.GRANTED, 0)
        def BY(self):
            return self.getToken(PrestoSQLParser.BY, 0)
        def grantor(self):
            return self.getTypedRuleContext(PrestoSQLParser.GrantorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrantRoles" ):
                listener.enterGrantRoles(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrantRoles" ):
                listener.exitGrantRoles(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGrantRoles" ):
                return visitor.visitGrantRoles(self)
            else:
                return visitor.visitChildren(self)


    class CallContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CALL(self):
            return self.getToken(PrestoSQLParser.CALL, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(PrestoSQLParser.QualifiedNameContext,0)

        def callArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrestoSQLParser.CallArgumentContext)
            else:
                return self.getTypedRuleContext(PrestoSQLParser.CallArgumentContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCall" ):
                listener.enterCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCall" ):
                listener.exitCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCall" ):
                return visitor.visitCall(self)
            else:
                return visitor.visitChildren(self)


    class ShowFunctionsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.StatementContext
            super().__init__(parser)
            self.pattern = None # StringContext
            self.escape = None # StringContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(PrestoSQLParser.SHOW, 0)
        def FUNCTIONS(self):
            return self.getToken(PrestoSQLParser.FUNCTIONS, 0)
        def LIKE(self):
            return self.getToken(PrestoSQLParser.LIKE, 0)
        def string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrestoSQLParser.StringContext)
            else:
                return self.getTypedRuleContext(PrestoSQLParser.StringContext,i)

        def ESCAPE(self):
            return self.getToken(PrestoSQLParser.ESCAPE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowFunctions" ):
                listener.enterShowFunctions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowFunctions" ):
                listener.exitShowFunctions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowFunctions" ):
                return visitor.visitShowFunctions(self)
            else:
                return visitor.visitChildren(self)


    class DescribeOutputContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DESCRIBE(self):
            return self.getToken(PrestoSQLParser.DESCRIBE, 0)
        def OUTPUT(self):
            return self.getToken(PrestoSQLParser.OUTPUT, 0)
        def identifier(self):
            return self.getTypedRuleContext(PrestoSQLParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribeOutput" ):
                listener.enterDescribeOutput(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribeOutput" ):
                listener.exitDescribeOutput(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDescribeOutput" ):
                return visitor.visitDescribeOutput(self)
            else:
                return visitor.visitChildren(self)


    class GrantContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.StatementContext
            super().__init__(parser)
            self.grantee = None # PrincipalContext
            self.copyFrom(ctx)

        def GRANT(self, i:int=None):
            if i is None:
                return self.getTokens(PrestoSQLParser.GRANT)
            else:
                return self.getToken(PrestoSQLParser.GRANT, i)
        def ON(self):
            return self.getToken(PrestoSQLParser.ON, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(PrestoSQLParser.QualifiedNameContext,0)

        def TO(self):
            return self.getToken(PrestoSQLParser.TO, 0)
        def principal(self):
            return self.getTypedRuleContext(PrestoSQLParser.PrincipalContext,0)

        def privilege(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrestoSQLParser.PrivilegeContext)
            else:
                return self.getTypedRuleContext(PrestoSQLParser.PrivilegeContext,i)

        def ALL(self):
            return self.getToken(PrestoSQLParser.ALL, 0)
        def PRIVILEGES(self):
            return self.getToken(PrestoSQLParser.PRIVILEGES, 0)
        def TABLE(self):
            return self.getToken(PrestoSQLParser.TABLE, 0)
        def WITH(self):
            return self.getToken(PrestoSQLParser.WITH, 0)
        def OPTION(self):
            return self.getToken(PrestoSQLParser.OPTION, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrant" ):
                listener.enterGrant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrant" ):
                listener.exitGrant(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGrant" ):
                return visitor.visitGrant(self)
            else:
                return visitor.visitChildren(self)



    def statement(self):

        localctx = PrestoSQLParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_statement)
        self._la = 0 # Token type
        try:
            self.state = 722
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
            if la_ == 1:
                localctx = PrestoSQLParser.StatementDefaultContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 163
                self.query()
                pass

            elif la_ == 2:
                localctx = PrestoSQLParser.UseContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 164
                self.match(PrestoSQLParser.USE)
                self.state = 165
                localctx.schema = self.identifier()
                pass

            elif la_ == 3:
                localctx = PrestoSQLParser.UseContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 166
                self.match(PrestoSQLParser.USE)
                self.state = 167
                localctx.catalog = self.identifier()
                self.state = 168
                self.match(PrestoSQLParser.T__0)
                self.state = 169
                localctx.schema = self.identifier()
                pass

            elif la_ == 4:
                localctx = PrestoSQLParser.CreateSchemaContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 171
                self.match(PrestoSQLParser.CREATE)
                self.state = 172
                self.match(PrestoSQLParser.SCHEMA)
                self.state = 176
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
                if la_ == 1:
                    self.state = 173
                    self.match(PrestoSQLParser.IF)
                    self.state = 174
                    self.match(PrestoSQLParser.NOT)
                    self.state = 175
                    self.match(PrestoSQLParser.EXISTS)


                self.state = 178
                self.qualifiedName()
                self.state = 181
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PrestoSQLParser.WITH:
                    self.state = 179
                    self.match(PrestoSQLParser.WITH)
                    self.state = 180
                    self.properties()


                pass

            elif la_ == 5:
                localctx = PrestoSQLParser.DropSchemaContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 183
                self.match(PrestoSQLParser.DROP)
                self.state = 184
                self.match(PrestoSQLParser.SCHEMA)
                self.state = 187
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
                if la_ == 1:
                    self.state = 185
                    self.match(PrestoSQLParser.IF)
                    self.state = 186
                    self.match(PrestoSQLParser.EXISTS)


                self.state = 189
                self.qualifiedName()
                self.state = 191
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PrestoSQLParser.CASCADE or _la==PrestoSQLParser.RESTRICT:
                    self.state = 190
                    _la = self._input.LA(1)
                    if not(_la==PrestoSQLParser.CASCADE or _la==PrestoSQLParser.RESTRICT):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 6:
                localctx = PrestoSQLParser.RenameSchemaContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 193
                self.match(PrestoSQLParser.ALTER)
                self.state = 194
                self.match(PrestoSQLParser.SCHEMA)
                self.state = 195
                self.qualifiedName()
                self.state = 196
                self.match(PrestoSQLParser.RENAME)
                self.state = 197
                self.match(PrestoSQLParser.TO)
                self.state = 198
                self.identifier()
                pass

            elif la_ == 7:
                localctx = PrestoSQLParser.CreateTableAsSelectContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 200
                self.match(PrestoSQLParser.CREATE)
                self.state = 201
                self.match(PrestoSQLParser.TABLE)
                self.state = 205
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
                if la_ == 1:
                    self.state = 202
                    self.match(PrestoSQLParser.IF)
                    self.state = 203
                    self.match(PrestoSQLParser.NOT)
                    self.state = 204
                    self.match(PrestoSQLParser.EXISTS)


                self.state = 207
                self.qualifiedName()
                self.state = 209
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PrestoSQLParser.T__1:
                    self.state = 208
                    self.columnAliases()


                self.state = 213
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PrestoSQLParser.COMMENT:
                    self.state = 211
                    self.match(PrestoSQLParser.COMMENT)
                    self.state = 212
                    self.string()


                self.state = 217
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PrestoSQLParser.WITH:
                    self.state = 215
                    self.match(PrestoSQLParser.WITH)
                    self.state = 216
                    self.properties()


                self.state = 219
                self.match(PrestoSQLParser.AS)
                self.state = 225
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
                if la_ == 1:
                    self.state = 220
                    self.query()
                    pass

                elif la_ == 2:
                    self.state = 221
                    self.match(PrestoSQLParser.T__1)
                    self.state = 222
                    self.query()
                    self.state = 223
                    self.match(PrestoSQLParser.T__2)
                    pass


                self.state = 232
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PrestoSQLParser.WITH:
                    self.state = 227
                    self.match(PrestoSQLParser.WITH)
                    self.state = 229
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PrestoSQLParser.NO:
                        self.state = 228
                        self.match(PrestoSQLParser.NO)


                    self.state = 231
                    self.match(PrestoSQLParser.DATA)


                pass

            elif la_ == 8:
                localctx = PrestoSQLParser.CreateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 234
                self.match(PrestoSQLParser.CREATE)
                self.state = 235
                self.match(PrestoSQLParser.TABLE)
                self.state = 239
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
                if la_ == 1:
                    self.state = 236
                    self.match(PrestoSQLParser.IF)
                    self.state = 237
                    self.match(PrestoSQLParser.NOT)
                    self.state = 238
                    self.match(PrestoSQLParser.EXISTS)


                self.state = 241
                self.qualifiedName()
                self.state = 242
                self.match(PrestoSQLParser.T__1)
                self.state = 243
                self.tableElement()
                self.state = 248
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PrestoSQLParser.T__3:
                    self.state = 244
                    self.match(PrestoSQLParser.T__3)
                    self.state = 245
                    self.tableElement()
                    self.state = 250
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 251
                self.match(PrestoSQLParser.T__2)
                self.state = 254
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PrestoSQLParser.COMMENT:
                    self.state = 252
                    self.match(PrestoSQLParser.COMMENT)
                    self.state = 253
                    self.string()


                self.state = 258
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PrestoSQLParser.WITH:
                    self.state = 256
                    self.match(PrestoSQLParser.WITH)
                    self.state = 257
                    self.properties()


                pass

            elif la_ == 9:
                localctx = PrestoSQLParser.DropTableContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 260
                self.match(PrestoSQLParser.DROP)
                self.state = 261
                self.match(PrestoSQLParser.TABLE)
                self.state = 264
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
                if la_ == 1:
                    self.state = 262
                    self.match(PrestoSQLParser.IF)
                    self.state = 263
                    self.match(PrestoSQLParser.EXISTS)


                self.state = 266
                self.qualifiedName()
                pass

            elif la_ == 10:
                localctx = PrestoSQLParser.InsertIntoContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 267
                self.match(PrestoSQLParser.INSERT)
                self.state = 268
                self.match(PrestoSQLParser.INTO)
                self.state = 269
                self.qualifiedName()
                self.state = 271
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
                if la_ == 1:
                    self.state = 270
                    self.columnAliases()


                self.state = 273
                self.query()
                pass

            elif la_ == 11:
                localctx = PrestoSQLParser.DeleteContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 275
                self.match(PrestoSQLParser.DELETE)
                self.state = 276
                self.match(PrestoSQLParser.FROM)
                self.state = 277
                self.qualifiedName()
                self.state = 280
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PrestoSQLParser.WHERE:
                    self.state = 278
                    self.match(PrestoSQLParser.WHERE)
                    self.state = 279
                    self.booleanExpression(0)


                pass

            elif la_ == 12:
                localctx = PrestoSQLParser.RenameTableContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 282
                self.match(PrestoSQLParser.ALTER)
                self.state = 283
                self.match(PrestoSQLParser.TABLE)
                self.state = 286
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
                if la_ == 1:
                    self.state = 284
                    self.match(PrestoSQLParser.IF)
                    self.state = 285
                    self.match(PrestoSQLParser.EXISTS)


                self.state = 288
                localctx.r_from = self.qualifiedName()
                self.state = 289
                self.match(PrestoSQLParser.RENAME)
                self.state = 290
                self.match(PrestoSQLParser.TO)
                self.state = 291
                localctx.to = self.qualifiedName()
                pass

            elif la_ == 13:
                localctx = PrestoSQLParser.RenameColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 293
                self.match(PrestoSQLParser.ALTER)
                self.state = 294
                self.match(PrestoSQLParser.TABLE)
                self.state = 297
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
                if la_ == 1:
                    self.state = 295
                    self.match(PrestoSQLParser.IF)
                    self.state = 296
                    self.match(PrestoSQLParser.EXISTS)


                self.state = 299
                localctx.tableName = self.qualifiedName()
                self.state = 300
                self.match(PrestoSQLParser.RENAME)
                self.state = 301
                self.match(PrestoSQLParser.COLUMN)
                self.state = 304
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
                if la_ == 1:
                    self.state = 302
                    self.match(PrestoSQLParser.IF)
                    self.state = 303
                    self.match(PrestoSQLParser.EXISTS)


                self.state = 306
                localctx.r_from = self.identifier()
                self.state = 307
                self.match(PrestoSQLParser.TO)
                self.state = 308
                localctx.to = self.identifier()
                pass

            elif la_ == 14:
                localctx = PrestoSQLParser.DropColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 310
                self.match(PrestoSQLParser.ALTER)
                self.state = 311
                self.match(PrestoSQLParser.TABLE)
                self.state = 314
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
                if la_ == 1:
                    self.state = 312
                    self.match(PrestoSQLParser.IF)
                    self.state = 313
                    self.match(PrestoSQLParser.EXISTS)


                self.state = 316
                localctx.tableName = self.qualifiedName()
                self.state = 317
                self.match(PrestoSQLParser.DROP)
                self.state = 318
                self.match(PrestoSQLParser.COLUMN)
                self.state = 321
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
                if la_ == 1:
                    self.state = 319
                    self.match(PrestoSQLParser.IF)
                    self.state = 320
                    self.match(PrestoSQLParser.EXISTS)


                self.state = 323
                localctx.column = self.qualifiedName()
                pass

            elif la_ == 15:
                localctx = PrestoSQLParser.AddColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 325
                self.match(PrestoSQLParser.ALTER)
                self.state = 326
                self.match(PrestoSQLParser.TABLE)
                self.state = 329
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
                if la_ == 1:
                    self.state = 327
                    self.match(PrestoSQLParser.IF)
                    self.state = 328
                    self.match(PrestoSQLParser.EXISTS)


                self.state = 331
                localctx.tableName = self.qualifiedName()
                self.state = 332
                self.match(PrestoSQLParser.ADD)
                self.state = 333
                self.match(PrestoSQLParser.COLUMN)
                self.state = 337
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
                if la_ == 1:
                    self.state = 334
                    self.match(PrestoSQLParser.IF)
                    self.state = 335
                    self.match(PrestoSQLParser.NOT)
                    self.state = 336
                    self.match(PrestoSQLParser.EXISTS)


                self.state = 339
                localctx.column = self.columnDefinition()
                pass

            elif la_ == 16:
                localctx = PrestoSQLParser.AnalyzeContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 341
                self.match(PrestoSQLParser.ANALYZE)
                self.state = 342
                self.qualifiedName()
                self.state = 345
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PrestoSQLParser.WITH:
                    self.state = 343
                    self.match(PrestoSQLParser.WITH)
                    self.state = 344
                    self.properties()


                pass

            elif la_ == 17:
                localctx = PrestoSQLParser.CreateViewContext(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 347
                self.match(PrestoSQLParser.CREATE)
                self.state = 350
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PrestoSQLParser.OR:
                    self.state = 348
                    self.match(PrestoSQLParser.OR)
                    self.state = 349
                    self.match(PrestoSQLParser.REPLACE)


                self.state = 352
                self.match(PrestoSQLParser.VIEW)
                self.state = 353
                self.qualifiedName()
                self.state = 356
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PrestoSQLParser.SECURITY:
                    self.state = 354
                    self.match(PrestoSQLParser.SECURITY)
                    self.state = 355
                    _la = self._input.LA(1)
                    if not(_la==PrestoSQLParser.DEFINER or _la==PrestoSQLParser.INVOKER):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 358
                self.match(PrestoSQLParser.AS)
                self.state = 359
                self.query()
                pass

            elif la_ == 18:
                localctx = PrestoSQLParser.DropViewContext(self, localctx)
                self.enterOuterAlt(localctx, 18)
                self.state = 361
                self.match(PrestoSQLParser.DROP)
                self.state = 362
                self.match(PrestoSQLParser.VIEW)
                self.state = 365
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
                if la_ == 1:
                    self.state = 363
                    self.match(PrestoSQLParser.IF)
                    self.state = 364
                    self.match(PrestoSQLParser.EXISTS)


                self.state = 367
                self.qualifiedName()
                pass

            elif la_ == 19:
                localctx = PrestoSQLParser.CreateFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 19)
                self.state = 368
                self.match(PrestoSQLParser.CREATE)
                self.state = 371
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PrestoSQLParser.OR:
                    self.state = 369
                    self.match(PrestoSQLParser.OR)
                    self.state = 370
                    self.match(PrestoSQLParser.REPLACE)


                self.state = 373
                self.match(PrestoSQLParser.FUNCTION)
                self.state = 374
                localctx.functionName = self.qualifiedName()
                self.state = 375
                self.match(PrestoSQLParser.T__1)
                self.state = 384
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PrestoSQLParser.ADD) | (1 << PrestoSQLParser.ADMIN) | (1 << PrestoSQLParser.ALL) | (1 << PrestoSQLParser.ANALYZE) | (1 << PrestoSQLParser.ANY) | (1 << PrestoSQLParser.ARRAY) | (1 << PrestoSQLParser.ASC) | (1 << PrestoSQLParser.AT) | (1 << PrestoSQLParser.BERNOULLI) | (1 << PrestoSQLParser.CALL) | (1 << PrestoSQLParser.CALLED) | (1 << PrestoSQLParser.CASCADE) | (1 << PrestoSQLParser.CATALOGS) | (1 << PrestoSQLParser.COLUMN) | (1 << PrestoSQLParser.COLUMNS) | (1 << PrestoSQLParser.COMMENT) | (1 << PrestoSQLParser.COMMIT) | (1 << PrestoSQLParser.COMMITTED) | (1 << PrestoSQLParser.CURRENT) | (1 << PrestoSQLParser.CURRENT_ROLE) | (1 << PrestoSQLParser.DATA) | (1 << PrestoSQLParser.DATE) | (1 << PrestoSQLParser.DAY) | (1 << PrestoSQLParser.DEFINER) | (1 << PrestoSQLParser.DESC) | (1 << PrestoSQLParser.DETERMINISTIC) | (1 << PrestoSQLParser.DISTRIBUTED) | (1 << PrestoSQLParser.EXCLUDING))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PrestoSQLParser.EXPLAIN - 64)) | (1 << (PrestoSQLParser.EXTERNAL - 64)) | (1 << (PrestoSQLParser.FILTER - 64)) | (1 << (PrestoSQLParser.FIRST - 64)) | (1 << (PrestoSQLParser.FOLLOWING - 64)) | (1 << (PrestoSQLParser.FORMAT - 64)) | (1 << (PrestoSQLParser.FUNCTION - 64)) | (1 << (PrestoSQLParser.FUNCTIONS - 64)) | (1 << (PrestoSQLParser.GRANT - 64)) | (1 << (PrestoSQLParser.GRANTED - 64)) | (1 << (PrestoSQLParser.GRANTS - 64)) | (1 << (PrestoSQLParser.GRAPHVIZ - 64)) | (1 << (PrestoSQLParser.HOUR - 64)) | (1 << (PrestoSQLParser.IF - 64)) | (1 << (PrestoSQLParser.IGNORE - 64)) | (1 << (PrestoSQLParser.INCLUDING - 64)) | (1 << (PrestoSQLParser.INPUT - 64)) | (1 << (PrestoSQLParser.INTERVAL - 64)) | (1 << (PrestoSQLParser.INVOKER - 64)) | (1 << (PrestoSQLParser.IO - 64)) | (1 << (PrestoSQLParser.ISOLATION - 64)) | (1 << (PrestoSQLParser.JSON - 64)) | (1 << (PrestoSQLParser.LANGUAGE - 64)) | (1 << (PrestoSQLParser.LAST - 64)) | (1 << (PrestoSQLParser.LATERAL - 64)) | (1 << (PrestoSQLParser.LEVEL - 64)) | (1 << (PrestoSQLParser.LIMIT - 64)) | (1 << (PrestoSQLParser.LOGICAL - 64)) | (1 << (PrestoSQLParser.MAP - 64)) | (1 << (PrestoSQLParser.MINUTE - 64)) | (1 << (PrestoSQLParser.MONTH - 64)) | (1 << (PrestoSQLParser.NAME - 64)) | (1 << (PrestoSQLParser.NFC - 64)) | (1 << (PrestoSQLParser.NFD - 64)) | (1 << (PrestoSQLParser.NFKC - 64)) | (1 << (PrestoSQLParser.NFKD - 64)) | (1 << (PrestoSQLParser.NO - 64)) | (1 << (PrestoSQLParser.NONE - 64)) | (1 << (PrestoSQLParser.NULLIF - 64)) | (1 << (PrestoSQLParser.NULLS - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (PrestoSQLParser.ONLY - 128)) | (1 << (PrestoSQLParser.OPTION - 128)) | (1 << (PrestoSQLParser.ORDINALITY - 128)) | (1 << (PrestoSQLParser.OUTPUT - 128)) | (1 << (PrestoSQLParser.OVER - 128)) | (1 << (PrestoSQLParser.PARTITION - 128)) | (1 << (PrestoSQLParser.PARTITIONS - 128)) | (1 << (PrestoSQLParser.POSITION - 128)) | (1 << (PrestoSQLParser.PRECEDING - 128)) | (1 << (PrestoSQLParser.PRIVILEGES - 128)) | (1 << (PrestoSQLParser.PROPERTIES - 128)) | (1 << (PrestoSQLParser.RANGE - 128)) | (1 << (PrestoSQLParser.READ - 128)) | (1 << (PrestoSQLParser.RENAME - 128)) | (1 << (PrestoSQLParser.REPEATABLE - 128)) | (1 << (PrestoSQLParser.REPLACE - 128)) | (1 << (PrestoSQLParser.RESET - 128)) | (1 << (PrestoSQLParser.RESPECT - 128)) | (1 << (PrestoSQLParser.RESTRICT - 128)) | (1 << (PrestoSQLParser.RETURN - 128)) | (1 << (PrestoSQLParser.RETURNS - 128)) | (1 << (PrestoSQLParser.REVOKE - 128)) | (1 << (PrestoSQLParser.ROLE - 128)) | (1 << (PrestoSQLParser.ROLES - 128)) | (1 << (PrestoSQLParser.ROLLBACK - 128)) | (1 << (PrestoSQLParser.ROW - 128)) | (1 << (PrestoSQLParser.ROWS - 128)) | (1 << (PrestoSQLParser.SCHEMA - 128)) | (1 << (PrestoSQLParser.SCHEMAS - 128)) | (1 << (PrestoSQLParser.SECOND - 128)) | (1 << (PrestoSQLParser.SECURITY - 128)) | (1 << (PrestoSQLParser.SERIALIZABLE - 128)) | (1 << (PrestoSQLParser.SESSION - 128)) | (1 << (PrestoSQLParser.SET - 128)) | (1 << (PrestoSQLParser.SETS - 128)) | (1 << (PrestoSQLParser.SHOW - 128)) | (1 << (PrestoSQLParser.SOME - 128)) | (1 << (PrestoSQLParser.SQL - 128)) | (1 << (PrestoSQLParser.START - 128)) | (1 << (PrestoSQLParser.STATS - 128)) | (1 << (PrestoSQLParser.SUBSTRING - 128)) | (1 << (PrestoSQLParser.SYSTEM - 128)) | (1 << (PrestoSQLParser.TABLES - 128)) | (1 << (PrestoSQLParser.TABLESAMPLE - 128)) | (1 << (PrestoSQLParser.TEXT - 128)) | (1 << (PrestoSQLParser.TIME - 128)) | (1 << (PrestoSQLParser.TIMESTAMP - 128)) | (1 << (PrestoSQLParser.TO - 128)) | (1 << (PrestoSQLParser.TRANSACTION - 128)) | (1 << (PrestoSQLParser.TRY_CAST - 128)) | (1 << (PrestoSQLParser.TYPE - 128)) | (1 << (PrestoSQLParser.UNBOUNDED - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (PrestoSQLParser.UNCOMMITTED - 192)) | (1 << (PrestoSQLParser.USE - 192)) | (1 << (PrestoSQLParser.USER - 192)) | (1 << (PrestoSQLParser.VALIDATE - 192)) | (1 << (PrestoSQLParser.VERBOSE - 192)) | (1 << (PrestoSQLParser.VIEW - 192)) | (1 << (PrestoSQLParser.WORK - 192)) | (1 << (PrestoSQLParser.WRITE - 192)) | (1 << (PrestoSQLParser.YEAR - 192)) | (1 << (PrestoSQLParser.ZONE - 192)) | (1 << (PrestoSQLParser.IDENTIFIER - 192)) | (1 << (PrestoSQLParser.DIGIT_IDENTIFIER - 192)) | (1 << (PrestoSQLParser.QUOTED_IDENTIFIER - 192)) | (1 << (PrestoSQLParser.BACKQUOTED_IDENTIFIER - 192)))) != 0):
                    self.state = 376
                    self.sqlParameterDeclaration()
                    self.state = 381
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==PrestoSQLParser.T__3:
                        self.state = 377
                        self.match(PrestoSQLParser.T__3)
                        self.state = 378
                        self.sqlParameterDeclaration()
                        self.state = 383
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 386
                self.match(PrestoSQLParser.T__2)
                self.state = 387
                self.match(PrestoSQLParser.RETURNS)
                self.state = 388
                localctx.returnType = self.r_type(0)
                self.state = 391
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PrestoSQLParser.COMMENT:
                    self.state = 389
                    self.match(PrestoSQLParser.COMMENT)
                    self.state = 390
                    self.string()


                self.state = 393
                self.routineCharacteristics()
                self.state = 394
                self.routineBody()
                pass

            elif la_ == 20:
                localctx = PrestoSQLParser.AlterFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 20)
                self.state = 396
                self.match(PrestoSQLParser.ALTER)
                self.state = 397
                self.match(PrestoSQLParser.FUNCTION)
                self.state = 398
                self.qualifiedName()
                self.state = 400
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PrestoSQLParser.T__1:
                    self.state = 399
                    self.types()


                self.state = 402
                self.alterRoutineCharacteristics()
                pass

            elif la_ == 21:
                localctx = PrestoSQLParser.DropFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 21)
                self.state = 404
                self.match(PrestoSQLParser.DROP)
                self.state = 405
                self.match(PrestoSQLParser.FUNCTION)
                self.state = 408
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
                if la_ == 1:
                    self.state = 406
                    self.match(PrestoSQLParser.IF)
                    self.state = 407
                    self.match(PrestoSQLParser.EXISTS)


                self.state = 410
                self.qualifiedName()
                self.state = 412
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PrestoSQLParser.T__1:
                    self.state = 411
                    self.types()


                pass

            elif la_ == 22:
                localctx = PrestoSQLParser.CallContext(self, localctx)
                self.enterOuterAlt(localctx, 22)
                self.state = 414
                self.match(PrestoSQLParser.CALL)
                self.state = 415
                self.qualifiedName()
                self.state = 416
                self.match(PrestoSQLParser.T__1)
                self.state = 425
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PrestoSQLParser.T__1) | (1 << PrestoSQLParser.T__4) | (1 << PrestoSQLParser.ADD) | (1 << PrestoSQLParser.ADMIN) | (1 << PrestoSQLParser.ALL) | (1 << PrestoSQLParser.ANALYZE) | (1 << PrestoSQLParser.ANY) | (1 << PrestoSQLParser.ARRAY) | (1 << PrestoSQLParser.ASC) | (1 << PrestoSQLParser.AT) | (1 << PrestoSQLParser.BERNOULLI) | (1 << PrestoSQLParser.CALL) | (1 << PrestoSQLParser.CALLED) | (1 << PrestoSQLParser.CASCADE) | (1 << PrestoSQLParser.CASE) | (1 << PrestoSQLParser.CAST) | (1 << PrestoSQLParser.CATALOGS) | (1 << PrestoSQLParser.COLUMN) | (1 << PrestoSQLParser.COLUMNS) | (1 << PrestoSQLParser.COMMENT) | (1 << PrestoSQLParser.COMMIT) | (1 << PrestoSQLParser.COMMITTED) | (1 << PrestoSQLParser.CURRENT) | (1 << PrestoSQLParser.CURRENT_DATE) | (1 << PrestoSQLParser.CURRENT_ROLE) | (1 << PrestoSQLParser.CURRENT_TIME) | (1 << PrestoSQLParser.CURRENT_TIMESTAMP) | (1 << PrestoSQLParser.CURRENT_USER) | (1 << PrestoSQLParser.DATA) | (1 << PrestoSQLParser.DATE) | (1 << PrestoSQLParser.DAY) | (1 << PrestoSQLParser.DEFINER) | (1 << PrestoSQLParser.DESC) | (1 << PrestoSQLParser.DETERMINISTIC) | (1 << PrestoSQLParser.DISTRIBUTED) | (1 << PrestoSQLParser.EXCLUDING) | (1 << PrestoSQLParser.EXISTS))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PrestoSQLParser.EXPLAIN - 64)) | (1 << (PrestoSQLParser.EXTRACT - 64)) | (1 << (PrestoSQLParser.EXTERNAL - 64)) | (1 << (PrestoSQLParser.FALSE - 64)) | (1 << (PrestoSQLParser.FILTER - 64)) | (1 << (PrestoSQLParser.FIRST - 64)) | (1 << (PrestoSQLParser.FOLLOWING - 64)) | (1 << (PrestoSQLParser.FORMAT - 64)) | (1 << (PrestoSQLParser.FUNCTION - 64)) | (1 << (PrestoSQLParser.FUNCTIONS - 64)) | (1 << (PrestoSQLParser.GRANT - 64)) | (1 << (PrestoSQLParser.GRANTED - 64)) | (1 << (PrestoSQLParser.GRANTS - 64)) | (1 << (PrestoSQLParser.GRAPHVIZ - 64)) | (1 << (PrestoSQLParser.GROUPING - 64)) | (1 << (PrestoSQLParser.HOUR - 64)) | (1 << (PrestoSQLParser.IF - 64)) | (1 << (PrestoSQLParser.IGNORE - 64)) | (1 << (PrestoSQLParser.INCLUDING - 64)) | (1 << (PrestoSQLParser.INPUT - 64)) | (1 << (PrestoSQLParser.INTERVAL - 64)) | (1 << (PrestoSQLParser.INVOKER - 64)) | (1 << (PrestoSQLParser.IO - 64)) | (1 << (PrestoSQLParser.ISOLATION - 64)) | (1 << (PrestoSQLParser.JSON - 64)) | (1 << (PrestoSQLParser.LANGUAGE - 64)) | (1 << (PrestoSQLParser.LAST - 64)) | (1 << (PrestoSQLParser.LATERAL - 64)) | (1 << (PrestoSQLParser.LEVEL - 64)) | (1 << (PrestoSQLParser.LIMIT - 64)) | (1 << (PrestoSQLParser.LOCALTIME - 64)) | (1 << (PrestoSQLParser.LOCALTIMESTAMP - 64)) | (1 << (PrestoSQLParser.LOGICAL - 64)) | (1 << (PrestoSQLParser.MAP - 64)) | (1 << (PrestoSQLParser.MINUTE - 64)) | (1 << (PrestoSQLParser.MONTH - 64)) | (1 << (PrestoSQLParser.NAME - 64)) | (1 << (PrestoSQLParser.NFC - 64)) | (1 << (PrestoSQLParser.NFD - 64)) | (1 << (PrestoSQLParser.NFKC - 64)) | (1 << (PrestoSQLParser.NFKD - 64)) | (1 << (PrestoSQLParser.NO - 64)) | (1 << (PrestoSQLParser.NONE - 64)) | (1 << (PrestoSQLParser.NORMALIZE - 64)) | (1 << (PrestoSQLParser.NOT - 64)) | (1 << (PrestoSQLParser.NULL - 64)) | (1 << (PrestoSQLParser.NULLIF - 64)) | (1 << (PrestoSQLParser.NULLS - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (PrestoSQLParser.ONLY - 128)) | (1 << (PrestoSQLParser.OPTION - 128)) | (1 << (PrestoSQLParser.ORDINALITY - 128)) | (1 << (PrestoSQLParser.OUTPUT - 128)) | (1 << (PrestoSQLParser.OVER - 128)) | (1 << (PrestoSQLParser.PARTITION - 128)) | (1 << (PrestoSQLParser.PARTITIONS - 128)) | (1 << (PrestoSQLParser.POSITION - 128)) | (1 << (PrestoSQLParser.PRECEDING - 128)) | (1 << (PrestoSQLParser.PRIVILEGES - 128)) | (1 << (PrestoSQLParser.PROPERTIES - 128)) | (1 << (PrestoSQLParser.RANGE - 128)) | (1 << (PrestoSQLParser.READ - 128)) | (1 << (PrestoSQLParser.RENAME - 128)) | (1 << (PrestoSQLParser.REPEATABLE - 128)) | (1 << (PrestoSQLParser.REPLACE - 128)) | (1 << (PrestoSQLParser.RESET - 128)) | (1 << (PrestoSQLParser.RESPECT - 128)) | (1 << (PrestoSQLParser.RESTRICT - 128)) | (1 << (PrestoSQLParser.RETURN - 128)) | (1 << (PrestoSQLParser.RETURNS - 128)) | (1 << (PrestoSQLParser.REVOKE - 128)) | (1 << (PrestoSQLParser.ROLE - 128)) | (1 << (PrestoSQLParser.ROLES - 128)) | (1 << (PrestoSQLParser.ROLLBACK - 128)) | (1 << (PrestoSQLParser.ROW - 128)) | (1 << (PrestoSQLParser.ROWS - 128)) | (1 << (PrestoSQLParser.SCHEMA - 128)) | (1 << (PrestoSQLParser.SCHEMAS - 128)) | (1 << (PrestoSQLParser.SECOND - 128)) | (1 << (PrestoSQLParser.SECURITY - 128)) | (1 << (PrestoSQLParser.SERIALIZABLE - 128)) | (1 << (PrestoSQLParser.SESSION - 128)) | (1 << (PrestoSQLParser.SET - 128)) | (1 << (PrestoSQLParser.SETS - 128)) | (1 << (PrestoSQLParser.SHOW - 128)) | (1 << (PrestoSQLParser.SOME - 128)) | (1 << (PrestoSQLParser.SQL - 128)) | (1 << (PrestoSQLParser.START - 128)) | (1 << (PrestoSQLParser.STATS - 128)) | (1 << (PrestoSQLParser.SUBSTRING - 128)) | (1 << (PrestoSQLParser.SYSTEM - 128)) | (1 << (PrestoSQLParser.TABLES - 128)) | (1 << (PrestoSQLParser.TABLESAMPLE - 128)) | (1 << (PrestoSQLParser.TEXT - 128)) | (1 << (PrestoSQLParser.TIME - 128)) | (1 << (PrestoSQLParser.TIMESTAMP - 128)) | (1 << (PrestoSQLParser.TO - 128)) | (1 << (PrestoSQLParser.TRANSACTION - 128)) | (1 << (PrestoSQLParser.TRUE - 128)) | (1 << (PrestoSQLParser.TRY_CAST - 128)) | (1 << (PrestoSQLParser.TYPE - 128)) | (1 << (PrestoSQLParser.UNBOUNDED - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (PrestoSQLParser.UNCOMMITTED - 192)) | (1 << (PrestoSQLParser.USE - 192)) | (1 << (PrestoSQLParser.USER - 192)) | (1 << (PrestoSQLParser.VALIDATE - 192)) | (1 << (PrestoSQLParser.VERBOSE - 192)) | (1 << (PrestoSQLParser.VIEW - 192)) | (1 << (PrestoSQLParser.WORK - 192)) | (1 << (PrestoSQLParser.WRITE - 192)) | (1 << (PrestoSQLParser.YEAR - 192)) | (1 << (PrestoSQLParser.ZONE - 192)) | (1 << (PrestoSQLParser.PLUS - 192)) | (1 << (PrestoSQLParser.MINUS - 192)) | (1 << (PrestoSQLParser.STRING - 192)) | (1 << (PrestoSQLParser.UNICODE_STRING - 192)) | (1 << (PrestoSQLParser.BINARY_LITERAL - 192)) | (1 << (PrestoSQLParser.INTEGER_VALUE - 192)) | (1 << (PrestoSQLParser.DECIMAL_VALUE - 192)) | (1 << (PrestoSQLParser.DOUBLE_VALUE - 192)) | (1 << (PrestoSQLParser.IDENTIFIER - 192)) | (1 << (PrestoSQLParser.DIGIT_IDENTIFIER - 192)) | (1 << (PrestoSQLParser.QUOTED_IDENTIFIER - 192)) | (1 << (PrestoSQLParser.BACKQUOTED_IDENTIFIER - 192)) | (1 << (PrestoSQLParser.DOUBLE_PRECISION - 192)))) != 0):
                    self.state = 417
                    self.callArgument()
                    self.state = 422
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==PrestoSQLParser.T__3:
                        self.state = 418
                        self.match(PrestoSQLParser.T__3)
                        self.state = 419
                        self.callArgument()
                        self.state = 424
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 427
                self.match(PrestoSQLParser.T__2)
                pass

            elif la_ == 23:
                localctx = PrestoSQLParser.CreateRoleContext(self, localctx)
                self.enterOuterAlt(localctx, 23)
                self.state = 429
                self.match(PrestoSQLParser.CREATE)
                self.state = 430
                self.match(PrestoSQLParser.ROLE)
                self.state = 431
                localctx.name = self.identifier()
                self.state = 435
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PrestoSQLParser.WITH:
                    self.state = 432
                    self.match(PrestoSQLParser.WITH)
                    self.state = 433
                    self.match(PrestoSQLParser.ADMIN)
                    self.state = 434
                    self.grantor()


                pass

            elif la_ == 24:
                localctx = PrestoSQLParser.DropRoleContext(self, localctx)
                self.enterOuterAlt(localctx, 24)
                self.state = 437
                self.match(PrestoSQLParser.DROP)
                self.state = 438
                self.match(PrestoSQLParser.ROLE)
                self.state = 439
                localctx.name = self.identifier()
                pass

            elif la_ == 25:
                localctx = PrestoSQLParser.GrantRolesContext(self, localctx)
                self.enterOuterAlt(localctx, 25)
                self.state = 440
                self.match(PrestoSQLParser.GRANT)
                self.state = 441
                self.roles()
                self.state = 442
                self.match(PrestoSQLParser.TO)
                self.state = 443
                self.principal()
                self.state = 448
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PrestoSQLParser.T__3:
                    self.state = 444
                    self.match(PrestoSQLParser.T__3)
                    self.state = 445
                    self.principal()
                    self.state = 450
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 454
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PrestoSQLParser.WITH:
                    self.state = 451
                    self.match(PrestoSQLParser.WITH)
                    self.state = 452
                    self.match(PrestoSQLParser.ADMIN)
                    self.state = 453
                    self.match(PrestoSQLParser.OPTION)


                self.state = 459
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PrestoSQLParser.GRANTED:
                    self.state = 456
                    self.match(PrestoSQLParser.GRANTED)
                    self.state = 457
                    self.match(PrestoSQLParser.BY)
                    self.state = 458
                    self.grantor()


                pass

            elif la_ == 26:
                localctx = PrestoSQLParser.RevokeRolesContext(self, localctx)
                self.enterOuterAlt(localctx, 26)
                self.state = 461
                self.match(PrestoSQLParser.REVOKE)
                self.state = 465
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
                if la_ == 1:
                    self.state = 462
                    self.match(PrestoSQLParser.ADMIN)
                    self.state = 463
                    self.match(PrestoSQLParser.OPTION)
                    self.state = 464
                    self.match(PrestoSQLParser.FOR)


                self.state = 467
                self.roles()
                self.state = 468
                self.match(PrestoSQLParser.FROM)
                self.state = 469
                self.principal()
                self.state = 474
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PrestoSQLParser.T__3:
                    self.state = 470
                    self.match(PrestoSQLParser.T__3)
                    self.state = 471
                    self.principal()
                    self.state = 476
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 480
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PrestoSQLParser.GRANTED:
                    self.state = 477
                    self.match(PrestoSQLParser.GRANTED)
                    self.state = 478
                    self.match(PrestoSQLParser.BY)
                    self.state = 479
                    self.grantor()


                pass

            elif la_ == 27:
                localctx = PrestoSQLParser.SetRoleContext(self, localctx)
                self.enterOuterAlt(localctx, 27)
                self.state = 482
                self.match(PrestoSQLParser.SET)
                self.state = 483
                self.match(PrestoSQLParser.ROLE)
                self.state = 487
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
                if la_ == 1:
                    self.state = 484
                    self.match(PrestoSQLParser.ALL)
                    pass

                elif la_ == 2:
                    self.state = 485
                    self.match(PrestoSQLParser.NONE)
                    pass

                elif la_ == 3:
                    self.state = 486
                    localctx.role = self.identifier()
                    pass


                pass

            elif la_ == 28:
                localctx = PrestoSQLParser.GrantContext(self, localctx)
                self.enterOuterAlt(localctx, 28)
                self.state = 489
                self.match(PrestoSQLParser.GRANT)
                self.state = 500
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
                if la_ == 1:
                    self.state = 490
                    self.privilege()
                    self.state = 495
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==PrestoSQLParser.T__3:
                        self.state = 491
                        self.match(PrestoSQLParser.T__3)
                        self.state = 492
                        self.privilege()
                        self.state = 497
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 498
                    self.match(PrestoSQLParser.ALL)
                    self.state = 499
                    self.match(PrestoSQLParser.PRIVILEGES)
                    pass


                self.state = 502
                self.match(PrestoSQLParser.ON)
                self.state = 504
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PrestoSQLParser.TABLE:
                    self.state = 503
                    self.match(PrestoSQLParser.TABLE)


                self.state = 506
                self.qualifiedName()
                self.state = 507
                self.match(PrestoSQLParser.TO)
                self.state = 508
                localctx.grantee = self.principal()
                self.state = 512
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PrestoSQLParser.WITH:
                    self.state = 509
                    self.match(PrestoSQLParser.WITH)
                    self.state = 510
                    self.match(PrestoSQLParser.GRANT)
                    self.state = 511
                    self.match(PrestoSQLParser.OPTION)


                pass

            elif la_ == 29:
                localctx = PrestoSQLParser.RevokeContext(self, localctx)
                self.enterOuterAlt(localctx, 29)
                self.state = 514
                self.match(PrestoSQLParser.REVOKE)
                self.state = 518
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
                if la_ == 1:
                    self.state = 515
                    self.match(PrestoSQLParser.GRANT)
                    self.state = 516
                    self.match(PrestoSQLParser.OPTION)
                    self.state = 517
                    self.match(PrestoSQLParser.FOR)


                self.state = 530
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
                if la_ == 1:
                    self.state = 520
                    self.privilege()
                    self.state = 525
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==PrestoSQLParser.T__3:
                        self.state = 521
                        self.match(PrestoSQLParser.T__3)
                        self.state = 522
                        self.privilege()
                        self.state = 527
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 528
                    self.match(PrestoSQLParser.ALL)
                    self.state = 529
                    self.match(PrestoSQLParser.PRIVILEGES)
                    pass


                self.state = 532
                self.match(PrestoSQLParser.ON)
                self.state = 534
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PrestoSQLParser.TABLE:
                    self.state = 533
                    self.match(PrestoSQLParser.TABLE)


                self.state = 536
                self.qualifiedName()
                self.state = 537
                self.match(PrestoSQLParser.FROM)
                self.state = 538
                localctx.grantee = self.principal()
                pass

            elif la_ == 30:
                localctx = PrestoSQLParser.ShowGrantsContext(self, localctx)
                self.enterOuterAlt(localctx, 30)
                self.state = 540
                self.match(PrestoSQLParser.SHOW)
                self.state = 541
                self.match(PrestoSQLParser.GRANTS)
                self.state = 547
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PrestoSQLParser.ON:
                    self.state = 542
                    self.match(PrestoSQLParser.ON)
                    self.state = 544
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PrestoSQLParser.TABLE:
                        self.state = 543
                        self.match(PrestoSQLParser.TABLE)


                    self.state = 546
                    self.qualifiedName()


                pass

            elif la_ == 31:
                localctx = PrestoSQLParser.ExplainContext(self, localctx)
                self.enterOuterAlt(localctx, 31)
                self.state = 549
                self.match(PrestoSQLParser.EXPLAIN)
                self.state = 551
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
                if la_ == 1:
                    self.state = 550
                    self.match(PrestoSQLParser.ANALYZE)


                self.state = 554
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PrestoSQLParser.VERBOSE:
                    self.state = 553
                    self.match(PrestoSQLParser.VERBOSE)


                self.state = 567
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
                if la_ == 1:
                    self.state = 556
                    self.match(PrestoSQLParser.T__1)
                    self.state = 557
                    self.explainOption()
                    self.state = 562
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==PrestoSQLParser.T__3:
                        self.state = 558
                        self.match(PrestoSQLParser.T__3)
                        self.state = 559
                        self.explainOption()
                        self.state = 564
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 565
                    self.match(PrestoSQLParser.T__2)


                self.state = 569
                self.statement()
                pass

            elif la_ == 32:
                localctx = PrestoSQLParser.ShowCreateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 32)
                self.state = 570
                self.match(PrestoSQLParser.SHOW)
                self.state = 571
                self.match(PrestoSQLParser.CREATE)
                self.state = 572
                self.match(PrestoSQLParser.TABLE)
                self.state = 573
                self.qualifiedName()
                pass

            elif la_ == 33:
                localctx = PrestoSQLParser.ShowCreateViewContext(self, localctx)
                self.enterOuterAlt(localctx, 33)
                self.state = 574
                self.match(PrestoSQLParser.SHOW)
                self.state = 575
                self.match(PrestoSQLParser.CREATE)
                self.state = 576
                self.match(PrestoSQLParser.VIEW)
                self.state = 577
                self.qualifiedName()
                pass

            elif la_ == 34:
                localctx = PrestoSQLParser.ShowCreateFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 34)
                self.state = 578
                self.match(PrestoSQLParser.SHOW)
                self.state = 579
                self.match(PrestoSQLParser.CREATE)
                self.state = 580
                self.match(PrestoSQLParser.FUNCTION)
                self.state = 581
                self.qualifiedName()
                self.state = 583
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PrestoSQLParser.T__1:
                    self.state = 582
                    self.types()


                pass

            elif la_ == 35:
                localctx = PrestoSQLParser.ShowTablesContext(self, localctx)
                self.enterOuterAlt(localctx, 35)
                self.state = 585
                self.match(PrestoSQLParser.SHOW)
                self.state = 586
                self.match(PrestoSQLParser.TABLES)
                self.state = 589
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PrestoSQLParser.FROM or _la==PrestoSQLParser.IN:
                    self.state = 587
                    _la = self._input.LA(1)
                    if not(_la==PrestoSQLParser.FROM or _la==PrestoSQLParser.IN):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 588
                    self.qualifiedName()


                self.state = 597
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PrestoSQLParser.LIKE:
                    self.state = 591
                    self.match(PrestoSQLParser.LIKE)
                    self.state = 592
                    localctx.pattern = self.string()
                    self.state = 595
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PrestoSQLParser.ESCAPE:
                        self.state = 593
                        self.match(PrestoSQLParser.ESCAPE)
                        self.state = 594
                        localctx.escape = self.string()




                pass

            elif la_ == 36:
                localctx = PrestoSQLParser.ShowSchemasContext(self, localctx)
                self.enterOuterAlt(localctx, 36)
                self.state = 599
                self.match(PrestoSQLParser.SHOW)
                self.state = 600
                self.match(PrestoSQLParser.SCHEMAS)
                self.state = 603
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PrestoSQLParser.FROM or _la==PrestoSQLParser.IN:
                    self.state = 601
                    _la = self._input.LA(1)
                    if not(_la==PrestoSQLParser.FROM or _la==PrestoSQLParser.IN):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 602
                    self.identifier()


                self.state = 611
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PrestoSQLParser.LIKE:
                    self.state = 605
                    self.match(PrestoSQLParser.LIKE)
                    self.state = 606
                    localctx.pattern = self.string()
                    self.state = 609
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PrestoSQLParser.ESCAPE:
                        self.state = 607
                        self.match(PrestoSQLParser.ESCAPE)
                        self.state = 608
                        localctx.escape = self.string()




                pass

            elif la_ == 37:
                localctx = PrestoSQLParser.ShowCatalogsContext(self, localctx)
                self.enterOuterAlt(localctx, 37)
                self.state = 613
                self.match(PrestoSQLParser.SHOW)
                self.state = 614
                self.match(PrestoSQLParser.CATALOGS)
                self.state = 617
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PrestoSQLParser.LIKE:
                    self.state = 615
                    self.match(PrestoSQLParser.LIKE)
                    self.state = 616
                    localctx.pattern = self.string()


                pass

            elif la_ == 38:
                localctx = PrestoSQLParser.ShowColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 38)
                self.state = 619
                self.match(PrestoSQLParser.SHOW)
                self.state = 620
                self.match(PrestoSQLParser.COLUMNS)
                self.state = 621
                _la = self._input.LA(1)
                if not(_la==PrestoSQLParser.FROM or _la==PrestoSQLParser.IN):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 622
                self.qualifiedName()
                pass

            elif la_ == 39:
                localctx = PrestoSQLParser.ShowStatsContext(self, localctx)
                self.enterOuterAlt(localctx, 39)
                self.state = 623
                self.match(PrestoSQLParser.SHOW)
                self.state = 624
                self.match(PrestoSQLParser.STATS)
                self.state = 625
                self.match(PrestoSQLParser.FOR)
                self.state = 626
                self.qualifiedName()
                pass

            elif la_ == 40:
                localctx = PrestoSQLParser.ShowStatsForQueryContext(self, localctx)
                self.enterOuterAlt(localctx, 40)
                self.state = 627
                self.match(PrestoSQLParser.SHOW)
                self.state = 628
                self.match(PrestoSQLParser.STATS)
                self.state = 629
                self.match(PrestoSQLParser.FOR)
                self.state = 630
                self.match(PrestoSQLParser.T__1)
                self.state = 631
                self.querySpecification()
                self.state = 632
                self.match(PrestoSQLParser.T__2)
                pass

            elif la_ == 41:
                localctx = PrestoSQLParser.ShowRolesContext(self, localctx)
                self.enterOuterAlt(localctx, 41)
                self.state = 634
                self.match(PrestoSQLParser.SHOW)
                self.state = 636
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PrestoSQLParser.CURRENT:
                    self.state = 635
                    self.match(PrestoSQLParser.CURRENT)


                self.state = 638
                self.match(PrestoSQLParser.ROLES)
                self.state = 641
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PrestoSQLParser.FROM or _la==PrestoSQLParser.IN:
                    self.state = 639
                    _la = self._input.LA(1)
                    if not(_la==PrestoSQLParser.FROM or _la==PrestoSQLParser.IN):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 640
                    self.identifier()


                pass

            elif la_ == 42:
                localctx = PrestoSQLParser.ShowRoleGrantsContext(self, localctx)
                self.enterOuterAlt(localctx, 42)
                self.state = 643
                self.match(PrestoSQLParser.SHOW)
                self.state = 644
                self.match(PrestoSQLParser.ROLE)
                self.state = 645
                self.match(PrestoSQLParser.GRANTS)
                self.state = 648
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PrestoSQLParser.FROM or _la==PrestoSQLParser.IN:
                    self.state = 646
                    _la = self._input.LA(1)
                    if not(_la==PrestoSQLParser.FROM or _la==PrestoSQLParser.IN):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 647
                    self.identifier()


                pass

            elif la_ == 43:
                localctx = PrestoSQLParser.ShowColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 43)
                self.state = 650
                self.match(PrestoSQLParser.DESCRIBE)
                self.state = 651
                self.qualifiedName()
                pass

            elif la_ == 44:
                localctx = PrestoSQLParser.ShowColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 44)
                self.state = 652
                self.match(PrestoSQLParser.DESC)
                self.state = 653
                self.qualifiedName()
                pass

            elif la_ == 45:
                localctx = PrestoSQLParser.ShowFunctionsContext(self, localctx)
                self.enterOuterAlt(localctx, 45)
                self.state = 654
                self.match(PrestoSQLParser.SHOW)
                self.state = 655
                self.match(PrestoSQLParser.FUNCTIONS)
                self.state = 662
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PrestoSQLParser.LIKE:
                    self.state = 656
                    self.match(PrestoSQLParser.LIKE)
                    self.state = 657
                    localctx.pattern = self.string()
                    self.state = 660
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PrestoSQLParser.ESCAPE:
                        self.state = 658
                        self.match(PrestoSQLParser.ESCAPE)
                        self.state = 659
                        localctx.escape = self.string()




                pass

            elif la_ == 46:
                localctx = PrestoSQLParser.ShowSessionContext(self, localctx)
                self.enterOuterAlt(localctx, 46)
                self.state = 664
                self.match(PrestoSQLParser.SHOW)
                self.state = 665
                self.match(PrestoSQLParser.SESSION)
                pass

            elif la_ == 47:
                localctx = PrestoSQLParser.SetSessionContext(self, localctx)
                self.enterOuterAlt(localctx, 47)
                self.state = 666
                self.match(PrestoSQLParser.SET)
                self.state = 667
                self.match(PrestoSQLParser.SESSION)
                self.state = 668
                self.qualifiedName()
                self.state = 669
                self.match(PrestoSQLParser.EQ)
                self.state = 670
                self.expression()
                pass

            elif la_ == 48:
                localctx = PrestoSQLParser.ResetSessionContext(self, localctx)
                self.enterOuterAlt(localctx, 48)
                self.state = 672
                self.match(PrestoSQLParser.RESET)
                self.state = 673
                self.match(PrestoSQLParser.SESSION)
                self.state = 674
                self.qualifiedName()
                pass

            elif la_ == 49:
                localctx = PrestoSQLParser.StartTransactionContext(self, localctx)
                self.enterOuterAlt(localctx, 49)
                self.state = 675
                self.match(PrestoSQLParser.START)
                self.state = 676
                self.match(PrestoSQLParser.TRANSACTION)
                self.state = 685
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PrestoSQLParser.ISOLATION or _la==PrestoSQLParser.READ:
                    self.state = 677
                    self.transactionMode()
                    self.state = 682
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==PrestoSQLParser.T__3:
                        self.state = 678
                        self.match(PrestoSQLParser.T__3)
                        self.state = 679
                        self.transactionMode()
                        self.state = 684
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                pass

            elif la_ == 50:
                localctx = PrestoSQLParser.CommitContext(self, localctx)
                self.enterOuterAlt(localctx, 50)
                self.state = 687
                self.match(PrestoSQLParser.COMMIT)
                self.state = 689
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PrestoSQLParser.WORK:
                    self.state = 688
                    self.match(PrestoSQLParser.WORK)


                pass

            elif la_ == 51:
                localctx = PrestoSQLParser.RollbackContext(self, localctx)
                self.enterOuterAlt(localctx, 51)
                self.state = 691
                self.match(PrestoSQLParser.ROLLBACK)
                self.state = 693
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PrestoSQLParser.WORK:
                    self.state = 692
                    self.match(PrestoSQLParser.WORK)


                pass

            elif la_ == 52:
                localctx = PrestoSQLParser.PrepareContext(self, localctx)
                self.enterOuterAlt(localctx, 52)
                self.state = 695
                self.match(PrestoSQLParser.PREPARE)
                self.state = 696
                self.identifier()
                self.state = 697
                self.match(PrestoSQLParser.FROM)
                self.state = 698
                self.statement()
                pass

            elif la_ == 53:
                localctx = PrestoSQLParser.DeallocateContext(self, localctx)
                self.enterOuterAlt(localctx, 53)
                self.state = 700
                self.match(PrestoSQLParser.DEALLOCATE)
                self.state = 701
                self.match(PrestoSQLParser.PREPARE)
                self.state = 702
                self.identifier()
                pass

            elif la_ == 54:
                localctx = PrestoSQLParser.ExecuteContext(self, localctx)
                self.enterOuterAlt(localctx, 54)
                self.state = 703
                self.match(PrestoSQLParser.EXECUTE)
                self.state = 704
                self.identifier()
                self.state = 714
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PrestoSQLParser.USING:
                    self.state = 705
                    self.match(PrestoSQLParser.USING)
                    self.state = 706
                    self.expression()
                    self.state = 711
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==PrestoSQLParser.T__3:
                        self.state = 707
                        self.match(PrestoSQLParser.T__3)
                        self.state = 708
                        self.expression()
                        self.state = 713
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                pass

            elif la_ == 55:
                localctx = PrestoSQLParser.DescribeInputContext(self, localctx)
                self.enterOuterAlt(localctx, 55)
                self.state = 716
                self.match(PrestoSQLParser.DESCRIBE)
                self.state = 717
                self.match(PrestoSQLParser.INPUT)
                self.state = 718
                self.identifier()
                pass

            elif la_ == 56:
                localctx = PrestoSQLParser.DescribeOutputContext(self, localctx)
                self.enterOuterAlt(localctx, 56)
                self.state = 719
                self.match(PrestoSQLParser.DESCRIBE)
                self.state = 720
                self.match(PrestoSQLParser.OUTPUT)
                self.state = 721
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def queryNoWith(self):
            return self.getTypedRuleContext(PrestoSQLParser.QueryNoWithContext,0)


        def r_with(self):
            return self.getTypedRuleContext(PrestoSQLParser.R_withContext,0)


        def getRuleIndex(self):
            return PrestoSQLParser.RULE_query

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery" ):
                listener.enterQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery" ):
                listener.exitQuery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuery" ):
                return visitor.visitQuery(self)
            else:
                return visitor.visitChildren(self)




    def query(self):

        localctx = PrestoSQLParser.QueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_query)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 725
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PrestoSQLParser.WITH:
                self.state = 724
                self.r_with()


            self.state = 727
            self.queryNoWith()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class R_withContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(PrestoSQLParser.WITH, 0)

        def namedQuery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrestoSQLParser.NamedQueryContext)
            else:
                return self.getTypedRuleContext(PrestoSQLParser.NamedQueryContext,i)


        def RECURSIVE(self):
            return self.getToken(PrestoSQLParser.RECURSIVE, 0)

        def getRuleIndex(self):
            return PrestoSQLParser.RULE_r_with

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterR_with" ):
                listener.enterR_with(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitR_with" ):
                listener.exitR_with(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitR_with" ):
                return visitor.visitR_with(self)
            else:
                return visitor.visitChildren(self)




    def r_with(self):

        localctx = PrestoSQLParser.R_withContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_r_with)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 729
            self.match(PrestoSQLParser.WITH)
            self.state = 731
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PrestoSQLParser.RECURSIVE:
                self.state = 730
                self.match(PrestoSQLParser.RECURSIVE)


            self.state = 733
            self.namedQuery()
            self.state = 738
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PrestoSQLParser.T__3:
                self.state = 734
                self.match(PrestoSQLParser.T__3)
                self.state = 735
                self.namedQuery()
                self.state = 740
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableElementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def columnDefinition(self):
            return self.getTypedRuleContext(PrestoSQLParser.ColumnDefinitionContext,0)


        def likeClause(self):
            return self.getTypedRuleContext(PrestoSQLParser.LikeClauseContext,0)


        def getRuleIndex(self):
            return PrestoSQLParser.RULE_tableElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableElement" ):
                listener.enterTableElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableElement" ):
                listener.exitTableElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableElement" ):
                return visitor.visitTableElement(self)
            else:
                return visitor.visitChildren(self)




    def tableElement(self):

        localctx = PrestoSQLParser.TableElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_tableElement)
        try:
            self.state = 743
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PrestoSQLParser.ADD, PrestoSQLParser.ADMIN, PrestoSQLParser.ALL, PrestoSQLParser.ANALYZE, PrestoSQLParser.ANY, PrestoSQLParser.ARRAY, PrestoSQLParser.ASC, PrestoSQLParser.AT, PrestoSQLParser.BERNOULLI, PrestoSQLParser.CALL, PrestoSQLParser.CALLED, PrestoSQLParser.CASCADE, PrestoSQLParser.CATALOGS, PrestoSQLParser.COLUMN, PrestoSQLParser.COLUMNS, PrestoSQLParser.COMMENT, PrestoSQLParser.COMMIT, PrestoSQLParser.COMMITTED, PrestoSQLParser.CURRENT, PrestoSQLParser.CURRENT_ROLE, PrestoSQLParser.DATA, PrestoSQLParser.DATE, PrestoSQLParser.DAY, PrestoSQLParser.DEFINER, PrestoSQLParser.DESC, PrestoSQLParser.DETERMINISTIC, PrestoSQLParser.DISTRIBUTED, PrestoSQLParser.EXCLUDING, PrestoSQLParser.EXPLAIN, PrestoSQLParser.EXTERNAL, PrestoSQLParser.FILTER, PrestoSQLParser.FIRST, PrestoSQLParser.FOLLOWING, PrestoSQLParser.FORMAT, PrestoSQLParser.FUNCTION, PrestoSQLParser.FUNCTIONS, PrestoSQLParser.GRANT, PrestoSQLParser.GRANTED, PrestoSQLParser.GRANTS, PrestoSQLParser.GRAPHVIZ, PrestoSQLParser.HOUR, PrestoSQLParser.IF, PrestoSQLParser.IGNORE, PrestoSQLParser.INCLUDING, PrestoSQLParser.INPUT, PrestoSQLParser.INTERVAL, PrestoSQLParser.INVOKER, PrestoSQLParser.IO, PrestoSQLParser.ISOLATION, PrestoSQLParser.JSON, PrestoSQLParser.LANGUAGE, PrestoSQLParser.LAST, PrestoSQLParser.LATERAL, PrestoSQLParser.LEVEL, PrestoSQLParser.LIMIT, PrestoSQLParser.LOGICAL, PrestoSQLParser.MAP, PrestoSQLParser.MINUTE, PrestoSQLParser.MONTH, PrestoSQLParser.NAME, PrestoSQLParser.NFC, PrestoSQLParser.NFD, PrestoSQLParser.NFKC, PrestoSQLParser.NFKD, PrestoSQLParser.NO, PrestoSQLParser.NONE, PrestoSQLParser.NULLIF, PrestoSQLParser.NULLS, PrestoSQLParser.ONLY, PrestoSQLParser.OPTION, PrestoSQLParser.ORDINALITY, PrestoSQLParser.OUTPUT, PrestoSQLParser.OVER, PrestoSQLParser.PARTITION, PrestoSQLParser.PARTITIONS, PrestoSQLParser.POSITION, PrestoSQLParser.PRECEDING, PrestoSQLParser.PRIVILEGES, PrestoSQLParser.PROPERTIES, PrestoSQLParser.RANGE, PrestoSQLParser.READ, PrestoSQLParser.RENAME, PrestoSQLParser.REPEATABLE, PrestoSQLParser.REPLACE, PrestoSQLParser.RESET, PrestoSQLParser.RESPECT, PrestoSQLParser.RESTRICT, PrestoSQLParser.RETURN, PrestoSQLParser.RETURNS, PrestoSQLParser.REVOKE, PrestoSQLParser.ROLE, PrestoSQLParser.ROLES, PrestoSQLParser.ROLLBACK, PrestoSQLParser.ROW, PrestoSQLParser.ROWS, PrestoSQLParser.SCHEMA, PrestoSQLParser.SCHEMAS, PrestoSQLParser.SECOND, PrestoSQLParser.SECURITY, PrestoSQLParser.SERIALIZABLE, PrestoSQLParser.SESSION, PrestoSQLParser.SET, PrestoSQLParser.SETS, PrestoSQLParser.SHOW, PrestoSQLParser.SOME, PrestoSQLParser.SQL, PrestoSQLParser.START, PrestoSQLParser.STATS, PrestoSQLParser.SUBSTRING, PrestoSQLParser.SYSTEM, PrestoSQLParser.TABLES, PrestoSQLParser.TABLESAMPLE, PrestoSQLParser.TEXT, PrestoSQLParser.TIME, PrestoSQLParser.TIMESTAMP, PrestoSQLParser.TO, PrestoSQLParser.TRANSACTION, PrestoSQLParser.TRY_CAST, PrestoSQLParser.TYPE, PrestoSQLParser.UNBOUNDED, PrestoSQLParser.UNCOMMITTED, PrestoSQLParser.USE, PrestoSQLParser.USER, PrestoSQLParser.VALIDATE, PrestoSQLParser.VERBOSE, PrestoSQLParser.VIEW, PrestoSQLParser.WORK, PrestoSQLParser.WRITE, PrestoSQLParser.YEAR, PrestoSQLParser.ZONE, PrestoSQLParser.IDENTIFIER, PrestoSQLParser.DIGIT_IDENTIFIER, PrestoSQLParser.QUOTED_IDENTIFIER, PrestoSQLParser.BACKQUOTED_IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 741
                self.columnDefinition()
                pass
            elif token in [PrestoSQLParser.LIKE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 742
                self.likeClause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(PrestoSQLParser.IdentifierContext,0)


        def r_type(self):
            return self.getTypedRuleContext(PrestoSQLParser.R_typeContext,0)


        def NOT(self):
            return self.getToken(PrestoSQLParser.NOT, 0)

        def NULL(self):
            return self.getToken(PrestoSQLParser.NULL, 0)

        def COMMENT(self):
            return self.getToken(PrestoSQLParser.COMMENT, 0)

        def string(self):
            return self.getTypedRuleContext(PrestoSQLParser.StringContext,0)


        def WITH(self):
            return self.getToken(PrestoSQLParser.WITH, 0)

        def properties(self):
            return self.getTypedRuleContext(PrestoSQLParser.PropertiesContext,0)


        def getRuleIndex(self):
            return PrestoSQLParser.RULE_columnDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnDefinition" ):
                listener.enterColumnDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnDefinition" ):
                listener.exitColumnDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnDefinition" ):
                return visitor.visitColumnDefinition(self)
            else:
                return visitor.visitChildren(self)




    def columnDefinition(self):

        localctx = PrestoSQLParser.ColumnDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_columnDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 745
            self.identifier()
            self.state = 746
            self.r_type(0)
            self.state = 749
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PrestoSQLParser.NOT:
                self.state = 747
                self.match(PrestoSQLParser.NOT)
                self.state = 748
                self.match(PrestoSQLParser.NULL)


            self.state = 753
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PrestoSQLParser.COMMENT:
                self.state = 751
                self.match(PrestoSQLParser.COMMENT)
                self.state = 752
                self.string()


            self.state = 757
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PrestoSQLParser.WITH:
                self.state = 755
                self.match(PrestoSQLParser.WITH)
                self.state = 756
                self.properties()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LikeClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.optionType = None # Token

        def LIKE(self):
            return self.getToken(PrestoSQLParser.LIKE, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(PrestoSQLParser.QualifiedNameContext,0)


        def PROPERTIES(self):
            return self.getToken(PrestoSQLParser.PROPERTIES, 0)

        def INCLUDING(self):
            return self.getToken(PrestoSQLParser.INCLUDING, 0)

        def EXCLUDING(self):
            return self.getToken(PrestoSQLParser.EXCLUDING, 0)

        def getRuleIndex(self):
            return PrestoSQLParser.RULE_likeClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLikeClause" ):
                listener.enterLikeClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLikeClause" ):
                listener.exitLikeClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLikeClause" ):
                return visitor.visitLikeClause(self)
            else:
                return visitor.visitChildren(self)




    def likeClause(self):

        localctx = PrestoSQLParser.LikeClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_likeClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 759
            self.match(PrestoSQLParser.LIKE)
            self.state = 760
            self.qualifiedName()
            self.state = 763
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PrestoSQLParser.EXCLUDING or _la==PrestoSQLParser.INCLUDING:
                self.state = 761
                localctx.optionType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==PrestoSQLParser.EXCLUDING or _la==PrestoSQLParser.INCLUDING):
                    localctx.optionType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 762
                self.match(PrestoSQLParser.PROPERTIES)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertiesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_property(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrestoSQLParser.R_propertyContext)
            else:
                return self.getTypedRuleContext(PrestoSQLParser.R_propertyContext,i)


        def getRuleIndex(self):
            return PrestoSQLParser.RULE_properties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProperties" ):
                listener.enterProperties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProperties" ):
                listener.exitProperties(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProperties" ):
                return visitor.visitProperties(self)
            else:
                return visitor.visitChildren(self)




    def properties(self):

        localctx = PrestoSQLParser.PropertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_properties)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 765
            self.match(PrestoSQLParser.T__1)
            self.state = 766
            self.r_property()
            self.state = 771
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PrestoSQLParser.T__3:
                self.state = 767
                self.match(PrestoSQLParser.T__3)
                self.state = 768
                self.r_property()
                self.state = 773
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 774
            self.match(PrestoSQLParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class R_propertyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(PrestoSQLParser.IdentifierContext,0)


        def EQ(self):
            return self.getToken(PrestoSQLParser.EQ, 0)

        def expression(self):
            return self.getTypedRuleContext(PrestoSQLParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PrestoSQLParser.RULE_r_property

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterR_property" ):
                listener.enterR_property(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitR_property" ):
                listener.exitR_property(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitR_property" ):
                return visitor.visitR_property(self)
            else:
                return visitor.visitChildren(self)




    def r_property(self):

        localctx = PrestoSQLParser.R_propertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_r_property)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 776
            self.identifier()
            self.state = 777
            self.match(PrestoSQLParser.EQ)
            self.state = 778
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SqlParameterDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(PrestoSQLParser.IdentifierContext,0)


        def r_type(self):
            return self.getTypedRuleContext(PrestoSQLParser.R_typeContext,0)


        def getRuleIndex(self):
            return PrestoSQLParser.RULE_sqlParameterDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSqlParameterDeclaration" ):
                listener.enterSqlParameterDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSqlParameterDeclaration" ):
                listener.exitSqlParameterDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSqlParameterDeclaration" ):
                return visitor.visitSqlParameterDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def sqlParameterDeclaration(self):

        localctx = PrestoSQLParser.SqlParameterDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_sqlParameterDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 780
            self.identifier()
            self.state = 781
            self.r_type(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RoutineCharacteristicsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def routineCharacteristic(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrestoSQLParser.RoutineCharacteristicContext)
            else:
                return self.getTypedRuleContext(PrestoSQLParser.RoutineCharacteristicContext,i)


        def getRuleIndex(self):
            return PrestoSQLParser.RULE_routineCharacteristics

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoutineCharacteristics" ):
                listener.enterRoutineCharacteristics(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoutineCharacteristics" ):
                listener.exitRoutineCharacteristics(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRoutineCharacteristics" ):
                return visitor.visitRoutineCharacteristics(self)
            else:
                return visitor.visitChildren(self)




    def routineCharacteristics(self):

        localctx = PrestoSQLParser.RoutineCharacteristicsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_routineCharacteristics)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 786
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PrestoSQLParser.CALLED or _la==PrestoSQLParser.DETERMINISTIC or ((((_la - 101)) & ~0x3f) == 0 and ((1 << (_la - 101)) & ((1 << (PrestoSQLParser.LANGUAGE - 101)) | (1 << (PrestoSQLParser.NOT - 101)) | (1 << (PrestoSQLParser.RETURNS - 101)))) != 0):
                self.state = 783
                self.routineCharacteristic()
                self.state = 788
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RoutineCharacteristicContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LANGUAGE(self):
            return self.getToken(PrestoSQLParser.LANGUAGE, 0)

        def language(self):
            return self.getTypedRuleContext(PrestoSQLParser.LanguageContext,0)


        def determinism(self):
            return self.getTypedRuleContext(PrestoSQLParser.DeterminismContext,0)


        def nullCallClause(self):
            return self.getTypedRuleContext(PrestoSQLParser.NullCallClauseContext,0)


        def getRuleIndex(self):
            return PrestoSQLParser.RULE_routineCharacteristic

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoutineCharacteristic" ):
                listener.enterRoutineCharacteristic(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoutineCharacteristic" ):
                listener.exitRoutineCharacteristic(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRoutineCharacteristic" ):
                return visitor.visitRoutineCharacteristic(self)
            else:
                return visitor.visitChildren(self)




    def routineCharacteristic(self):

        localctx = PrestoSQLParser.RoutineCharacteristicContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_routineCharacteristic)
        try:
            self.state = 793
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PrestoSQLParser.LANGUAGE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 789
                self.match(PrestoSQLParser.LANGUAGE)
                self.state = 790
                self.language()
                pass
            elif token in [PrestoSQLParser.DETERMINISTIC, PrestoSQLParser.NOT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 791
                self.determinism()
                pass
            elif token in [PrestoSQLParser.CALLED, PrestoSQLParser.RETURNS]:
                self.enterOuterAlt(localctx, 3)
                self.state = 792
                self.nullCallClause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterRoutineCharacteristicsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alterRoutineCharacteristic(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrestoSQLParser.AlterRoutineCharacteristicContext)
            else:
                return self.getTypedRuleContext(PrestoSQLParser.AlterRoutineCharacteristicContext,i)


        def getRuleIndex(self):
            return PrestoSQLParser.RULE_alterRoutineCharacteristics

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterRoutineCharacteristics" ):
                listener.enterAlterRoutineCharacteristics(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterRoutineCharacteristics" ):
                listener.exitAlterRoutineCharacteristics(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterRoutineCharacteristics" ):
                return visitor.visitAlterRoutineCharacteristics(self)
            else:
                return visitor.visitChildren(self)




    def alterRoutineCharacteristics(self):

        localctx = PrestoSQLParser.AlterRoutineCharacteristicsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_alterRoutineCharacteristics)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 798
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PrestoSQLParser.CALLED or _la==PrestoSQLParser.RETURNS:
                self.state = 795
                self.alterRoutineCharacteristic()
                self.state = 800
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterRoutineCharacteristicContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nullCallClause(self):
            return self.getTypedRuleContext(PrestoSQLParser.NullCallClauseContext,0)


        def getRuleIndex(self):
            return PrestoSQLParser.RULE_alterRoutineCharacteristic

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterRoutineCharacteristic" ):
                listener.enterAlterRoutineCharacteristic(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterRoutineCharacteristic" ):
                listener.exitAlterRoutineCharacteristic(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterRoutineCharacteristic" ):
                return visitor.visitAlterRoutineCharacteristic(self)
            else:
                return visitor.visitChildren(self)




    def alterRoutineCharacteristic(self):

        localctx = PrestoSQLParser.AlterRoutineCharacteristicContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_alterRoutineCharacteristic)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 801
            self.nullCallClause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RoutineBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def returnStatement(self):
            return self.getTypedRuleContext(PrestoSQLParser.ReturnStatementContext,0)


        def externalBodyReference(self):
            return self.getTypedRuleContext(PrestoSQLParser.ExternalBodyReferenceContext,0)


        def getRuleIndex(self):
            return PrestoSQLParser.RULE_routineBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoutineBody" ):
                listener.enterRoutineBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoutineBody" ):
                listener.exitRoutineBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRoutineBody" ):
                return visitor.visitRoutineBody(self)
            else:
                return visitor.visitChildren(self)




    def routineBody(self):

        localctx = PrestoSQLParser.RoutineBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_routineBody)
        try:
            self.state = 805
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PrestoSQLParser.RETURN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 803
                self.returnStatement()
                pass
            elif token in [PrestoSQLParser.EXTERNAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 804
                self.externalBodyReference()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(PrestoSQLParser.RETURN, 0)

        def expression(self):
            return self.getTypedRuleContext(PrestoSQLParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PrestoSQLParser.RULE_returnStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStatement" ):
                listener.enterReturnStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStatement" ):
                listener.exitReturnStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturnStatement" ):
                return visitor.visitReturnStatement(self)
            else:
                return visitor.visitChildren(self)




    def returnStatement(self):

        localctx = PrestoSQLParser.ReturnStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_returnStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 807
            self.match(PrestoSQLParser.RETURN)
            self.state = 808
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternalBodyReferenceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXTERNAL(self):
            return self.getToken(PrestoSQLParser.EXTERNAL, 0)

        def NAME(self):
            return self.getToken(PrestoSQLParser.NAME, 0)

        def externalRoutineName(self):
            return self.getTypedRuleContext(PrestoSQLParser.ExternalRoutineNameContext,0)


        def getRuleIndex(self):
            return PrestoSQLParser.RULE_externalBodyReference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternalBodyReference" ):
                listener.enterExternalBodyReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternalBodyReference" ):
                listener.exitExternalBodyReference(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternalBodyReference" ):
                return visitor.visitExternalBodyReference(self)
            else:
                return visitor.visitChildren(self)




    def externalBodyReference(self):

        localctx = PrestoSQLParser.ExternalBodyReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_externalBodyReference)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 810
            self.match(PrestoSQLParser.EXTERNAL)
            self.state = 813
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PrestoSQLParser.NAME:
                self.state = 811
                self.match(PrestoSQLParser.NAME)
                self.state = 812
                self.externalRoutineName()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LanguageContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SQL(self):
            return self.getToken(PrestoSQLParser.SQL, 0)

        def identifier(self):
            return self.getTypedRuleContext(PrestoSQLParser.IdentifierContext,0)


        def getRuleIndex(self):
            return PrestoSQLParser.RULE_language

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLanguage" ):
                listener.enterLanguage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLanguage" ):
                listener.exitLanguage(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLanguage" ):
                return visitor.visitLanguage(self)
            else:
                return visitor.visitChildren(self)




    def language(self):

        localctx = PrestoSQLParser.LanguageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_language)
        try:
            self.state = 817
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 815
                self.match(PrestoSQLParser.SQL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 816
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeterminismContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DETERMINISTIC(self):
            return self.getToken(PrestoSQLParser.DETERMINISTIC, 0)

        def NOT(self):
            return self.getToken(PrestoSQLParser.NOT, 0)

        def getRuleIndex(self):
            return PrestoSQLParser.RULE_determinism

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeterminism" ):
                listener.enterDeterminism(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeterminism" ):
                listener.exitDeterminism(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeterminism" ):
                return visitor.visitDeterminism(self)
            else:
                return visitor.visitChildren(self)




    def determinism(self):

        localctx = PrestoSQLParser.DeterminismContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_determinism)
        try:
            self.state = 822
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PrestoSQLParser.DETERMINISTIC]:
                self.enterOuterAlt(localctx, 1)
                self.state = 819
                self.match(PrestoSQLParser.DETERMINISTIC)
                pass
            elif token in [PrestoSQLParser.NOT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 820
                self.match(PrestoSQLParser.NOT)
                self.state = 821
                self.match(PrestoSQLParser.DETERMINISTIC)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NullCallClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURNS(self):
            return self.getToken(PrestoSQLParser.RETURNS, 0)

        def NULL(self, i:int=None):
            if i is None:
                return self.getTokens(PrestoSQLParser.NULL)
            else:
                return self.getToken(PrestoSQLParser.NULL, i)

        def ON(self):
            return self.getToken(PrestoSQLParser.ON, 0)

        def INPUT(self):
            return self.getToken(PrestoSQLParser.INPUT, 0)

        def CALLED(self):
            return self.getToken(PrestoSQLParser.CALLED, 0)

        def getRuleIndex(self):
            return PrestoSQLParser.RULE_nullCallClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullCallClause" ):
                listener.enterNullCallClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullCallClause" ):
                listener.exitNullCallClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNullCallClause" ):
                return visitor.visitNullCallClause(self)
            else:
                return visitor.visitChildren(self)




    def nullCallClause(self):

        localctx = PrestoSQLParser.NullCallClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_nullCallClause)
        try:
            self.state = 833
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PrestoSQLParser.RETURNS]:
                self.enterOuterAlt(localctx, 1)
                self.state = 824
                self.match(PrestoSQLParser.RETURNS)
                self.state = 825
                self.match(PrestoSQLParser.NULL)
                self.state = 826
                self.match(PrestoSQLParser.ON)
                self.state = 827
                self.match(PrestoSQLParser.NULL)
                self.state = 828
                self.match(PrestoSQLParser.INPUT)
                pass
            elif token in [PrestoSQLParser.CALLED]:
                self.enterOuterAlt(localctx, 2)
                self.state = 829
                self.match(PrestoSQLParser.CALLED)
                self.state = 830
                self.match(PrestoSQLParser.ON)
                self.state = 831
                self.match(PrestoSQLParser.NULL)
                self.state = 832
                self.match(PrestoSQLParser.INPUT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternalRoutineNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(PrestoSQLParser.IdentifierContext,0)


        def getRuleIndex(self):
            return PrestoSQLParser.RULE_externalRoutineName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternalRoutineName" ):
                listener.enterExternalRoutineName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternalRoutineName" ):
                listener.exitExternalRoutineName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternalRoutineName" ):
                return visitor.visitExternalRoutineName(self)
            else:
                return visitor.visitChildren(self)




    def externalRoutineName(self):

        localctx = PrestoSQLParser.ExternalRoutineNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_externalRoutineName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 835
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryNoWithContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.limit = None # Token

        def queryTerm(self):
            return self.getTypedRuleContext(PrestoSQLParser.QueryTermContext,0)


        def ORDER(self):
            return self.getToken(PrestoSQLParser.ORDER, 0)

        def BY(self):
            return self.getToken(PrestoSQLParser.BY, 0)

        def sortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrestoSQLParser.SortItemContext)
            else:
                return self.getTypedRuleContext(PrestoSQLParser.SortItemContext,i)


        def LIMIT(self):
            return self.getToken(PrestoSQLParser.LIMIT, 0)

        def INTEGER_VALUE(self):
            return self.getToken(PrestoSQLParser.INTEGER_VALUE, 0)

        def ALL(self):
            return self.getToken(PrestoSQLParser.ALL, 0)

        def getRuleIndex(self):
            return PrestoSQLParser.RULE_queryNoWith

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryNoWith" ):
                listener.enterQueryNoWith(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryNoWith" ):
                listener.exitQueryNoWith(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQueryNoWith" ):
                return visitor.visitQueryNoWith(self)
            else:
                return visitor.visitChildren(self)




    def queryNoWith(self):

        localctx = PrestoSQLParser.QueryNoWithContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_queryNoWith)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 837
            self.queryTerm(0)
            self.state = 848
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PrestoSQLParser.ORDER:
                self.state = 838
                self.match(PrestoSQLParser.ORDER)
                self.state = 839
                self.match(PrestoSQLParser.BY)
                self.state = 840
                self.sortItem()
                self.state = 845
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PrestoSQLParser.T__3:
                    self.state = 841
                    self.match(PrestoSQLParser.T__3)
                    self.state = 842
                    self.sortItem()
                    self.state = 847
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 852
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PrestoSQLParser.LIMIT:
                self.state = 850
                self.match(PrestoSQLParser.LIMIT)
                self.state = 851
                localctx.limit = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==PrestoSQLParser.ALL or _la==PrestoSQLParser.INTEGER_VALUE):
                    localctx.limit = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryTermContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PrestoSQLParser.RULE_queryTerm

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class QueryTermDefaultContext(QueryTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.QueryTermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def queryPrimary(self):
            return self.getTypedRuleContext(PrestoSQLParser.QueryPrimaryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryTermDefault" ):
                listener.enterQueryTermDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryTermDefault" ):
                listener.exitQueryTermDefault(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQueryTermDefault" ):
                return visitor.visitQueryTermDefault(self)
            else:
                return visitor.visitChildren(self)


    class SetOperationContext(QueryTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.QueryTermContext
            super().__init__(parser)
            self.left = None # QueryTermContext
            self.operator = None # Token
            self.right = None # QueryTermContext
            self.copyFrom(ctx)

        def queryTerm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrestoSQLParser.QueryTermContext)
            else:
                return self.getTypedRuleContext(PrestoSQLParser.QueryTermContext,i)

        def INTERSECT(self):
            return self.getToken(PrestoSQLParser.INTERSECT, 0)
        def setQuantifier(self):
            return self.getTypedRuleContext(PrestoSQLParser.SetQuantifierContext,0)

        def UNION(self):
            return self.getToken(PrestoSQLParser.UNION, 0)
        def EXCEPT(self):
            return self.getToken(PrestoSQLParser.EXCEPT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetOperation" ):
                listener.enterSetOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetOperation" ):
                listener.exitSetOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetOperation" ):
                return visitor.visitSetOperation(self)
            else:
                return visitor.visitChildren(self)



    def queryTerm(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PrestoSQLParser.QueryTermContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 48
        self.enterRecursionRule(localctx, 48, self.RULE_queryTerm, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = PrestoSQLParser.QueryTermDefaultContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 855
            self.queryPrimary()
            self._ctx.stop = self._input.LT(-1)
            self.state = 871
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,103,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 869
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
                    if la_ == 1:
                        localctx = PrestoSQLParser.SetOperationContext(self, PrestoSQLParser.QueryTermContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_queryTerm)
                        self.state = 857
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 858
                        localctx.operator = self.match(PrestoSQLParser.INTERSECT)
                        self.state = 860
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==PrestoSQLParser.ALL or _la==PrestoSQLParser.DISTINCT:
                            self.state = 859
                            self.setQuantifier()


                        self.state = 862
                        localctx.right = self.queryTerm(3)
                        pass

                    elif la_ == 2:
                        localctx = PrestoSQLParser.SetOperationContext(self, PrestoSQLParser.QueryTermContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_queryTerm)
                        self.state = 863
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 864
                        localctx.operator = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==PrestoSQLParser.EXCEPT or _la==PrestoSQLParser.UNION):
                            localctx.operator = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 866
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==PrestoSQLParser.ALL or _la==PrestoSQLParser.DISTINCT:
                            self.state = 865
                            self.setQuantifier()


                        self.state = 868
                        localctx.right = self.queryTerm(2)
                        pass

             
                self.state = 873
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,103,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class QueryPrimaryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PrestoSQLParser.RULE_queryPrimary

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SubqueryContext(QueryPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def queryNoWith(self):
            return self.getTypedRuleContext(PrestoSQLParser.QueryNoWithContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubquery" ):
                listener.enterSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubquery" ):
                listener.exitSubquery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubquery" ):
                return visitor.visitSubquery(self)
            else:
                return visitor.visitChildren(self)


    class QueryPrimaryDefaultContext(QueryPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def querySpecification(self):
            return self.getTypedRuleContext(PrestoSQLParser.QuerySpecificationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryPrimaryDefault" ):
                listener.enterQueryPrimaryDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryPrimaryDefault" ):
                listener.exitQueryPrimaryDefault(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQueryPrimaryDefault" ):
                return visitor.visitQueryPrimaryDefault(self)
            else:
                return visitor.visitChildren(self)


    class TableContext(QueryPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TABLE(self):
            return self.getToken(PrestoSQLParser.TABLE, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(PrestoSQLParser.QualifiedNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable" ):
                listener.enterTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable" ):
                listener.exitTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable" ):
                return visitor.visitTable(self)
            else:
                return visitor.visitChildren(self)


    class InlineTableContext(QueryPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def VALUES(self):
            return self.getToken(PrestoSQLParser.VALUES, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrestoSQLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PrestoSQLParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInlineTable" ):
                listener.enterInlineTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInlineTable" ):
                listener.exitInlineTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInlineTable" ):
                return visitor.visitInlineTable(self)
            else:
                return visitor.visitChildren(self)



    def queryPrimary(self):

        localctx = PrestoSQLParser.QueryPrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_queryPrimary)
        try:
            self.state = 890
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PrestoSQLParser.SELECT]:
                localctx = PrestoSQLParser.QueryPrimaryDefaultContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 874
                self.querySpecification()
                pass
            elif token in [PrestoSQLParser.TABLE]:
                localctx = PrestoSQLParser.TableContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 875
                self.match(PrestoSQLParser.TABLE)
                self.state = 876
                self.qualifiedName()
                pass
            elif token in [PrestoSQLParser.VALUES]:
                localctx = PrestoSQLParser.InlineTableContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 877
                self.match(PrestoSQLParser.VALUES)
                self.state = 878
                self.expression()
                self.state = 883
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,104,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 879
                        self.match(PrestoSQLParser.T__3)
                        self.state = 880
                        self.expression() 
                    self.state = 885
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,104,self._ctx)

                pass
            elif token in [PrestoSQLParser.T__1]:
                localctx = PrestoSQLParser.SubqueryContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 886
                self.match(PrestoSQLParser.T__1)
                self.state = 887
                self.queryNoWith()
                self.state = 888
                self.match(PrestoSQLParser.T__2)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SortItemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ordering = None # Token
            self.nullOrdering = None # Token

        def expression(self):
            return self.getTypedRuleContext(PrestoSQLParser.ExpressionContext,0)


        def NULLS(self):
            return self.getToken(PrestoSQLParser.NULLS, 0)

        def ASC(self):
            return self.getToken(PrestoSQLParser.ASC, 0)

        def DESC(self):
            return self.getToken(PrestoSQLParser.DESC, 0)

        def FIRST(self):
            return self.getToken(PrestoSQLParser.FIRST, 0)

        def LAST(self):
            return self.getToken(PrestoSQLParser.LAST, 0)

        def getRuleIndex(self):
            return PrestoSQLParser.RULE_sortItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSortItem" ):
                listener.enterSortItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSortItem" ):
                listener.exitSortItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSortItem" ):
                return visitor.visitSortItem(self)
            else:
                return visitor.visitChildren(self)




    def sortItem(self):

        localctx = PrestoSQLParser.SortItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_sortItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 892
            self.expression()
            self.state = 894
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PrestoSQLParser.ASC or _la==PrestoSQLParser.DESC:
                self.state = 893
                localctx.ordering = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==PrestoSQLParser.ASC or _la==PrestoSQLParser.DESC):
                    localctx.ordering = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 898
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PrestoSQLParser.NULLS:
                self.state = 896
                self.match(PrestoSQLParser.NULLS)
                self.state = 897
                localctx.nullOrdering = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==PrestoSQLParser.FIRST or _la==PrestoSQLParser.LAST):
                    localctx.nullOrdering = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuerySpecificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.where = None # BooleanExpressionContext
            self.having = None # BooleanExpressionContext

        def SELECT(self):
            return self.getToken(PrestoSQLParser.SELECT, 0)

        def selectItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrestoSQLParser.SelectItemContext)
            else:
                return self.getTypedRuleContext(PrestoSQLParser.SelectItemContext,i)


        def setQuantifier(self):
            return self.getTypedRuleContext(PrestoSQLParser.SetQuantifierContext,0)


        def FROM(self):
            return self.getToken(PrestoSQLParser.FROM, 0)

        def relation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrestoSQLParser.RelationContext)
            else:
                return self.getTypedRuleContext(PrestoSQLParser.RelationContext,i)


        def WHERE(self):
            return self.getToken(PrestoSQLParser.WHERE, 0)

        def GROUP(self):
            return self.getToken(PrestoSQLParser.GROUP, 0)

        def BY(self):
            return self.getToken(PrestoSQLParser.BY, 0)

        def groupBy(self):
            return self.getTypedRuleContext(PrestoSQLParser.GroupByContext,0)


        def HAVING(self):
            return self.getToken(PrestoSQLParser.HAVING, 0)

        def booleanExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrestoSQLParser.BooleanExpressionContext)
            else:
                return self.getTypedRuleContext(PrestoSQLParser.BooleanExpressionContext,i)


        def getRuleIndex(self):
            return PrestoSQLParser.RULE_querySpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuerySpecification" ):
                listener.enterQuerySpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuerySpecification" ):
                listener.exitQuerySpecification(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuerySpecification" ):
                return visitor.visitQuerySpecification(self)
            else:
                return visitor.visitChildren(self)




    def querySpecification(self):

        localctx = PrestoSQLParser.QuerySpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_querySpecification)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 900
            self.match(PrestoSQLParser.SELECT)
            self.state = 902
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
            if la_ == 1:
                self.state = 901
                self.setQuantifier()


            self.state = 904
            self.selectItem()
            self.state = 909
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,109,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 905
                    self.match(PrestoSQLParser.T__3)
                    self.state = 906
                    self.selectItem() 
                self.state = 911
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,109,self._ctx)

            self.state = 921
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
            if la_ == 1:
                self.state = 912
                self.match(PrestoSQLParser.FROM)
                self.state = 913
                self.relation(0)
                self.state = 918
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,110,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 914
                        self.match(PrestoSQLParser.T__3)
                        self.state = 915
                        self.relation(0) 
                    self.state = 920
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,110,self._ctx)



            self.state = 925
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
            if la_ == 1:
                self.state = 923
                self.match(PrestoSQLParser.WHERE)
                self.state = 924
                localctx.where = self.booleanExpression(0)


            self.state = 930
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
            if la_ == 1:
                self.state = 927
                self.match(PrestoSQLParser.GROUP)
                self.state = 928
                self.match(PrestoSQLParser.BY)
                self.state = 929
                self.groupBy()


            self.state = 934
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
            if la_ == 1:
                self.state = 932
                self.match(PrestoSQLParser.HAVING)
                self.state = 933
                localctx.having = self.booleanExpression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupByContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def groupingElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrestoSQLParser.GroupingElementContext)
            else:
                return self.getTypedRuleContext(PrestoSQLParser.GroupingElementContext,i)


        def setQuantifier(self):
            return self.getTypedRuleContext(PrestoSQLParser.SetQuantifierContext,0)


        def getRuleIndex(self):
            return PrestoSQLParser.RULE_groupBy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupBy" ):
                listener.enterGroupBy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupBy" ):
                listener.exitGroupBy(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroupBy" ):
                return visitor.visitGroupBy(self)
            else:
                return visitor.visitChildren(self)




    def groupBy(self):

        localctx = PrestoSQLParser.GroupByContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_groupBy)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 937
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
            if la_ == 1:
                self.state = 936
                self.setQuantifier()


            self.state = 939
            self.groupingElement()
            self.state = 944
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,116,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 940
                    self.match(PrestoSQLParser.T__3)
                    self.state = 941
                    self.groupingElement() 
                self.state = 946
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,116,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupingElementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PrestoSQLParser.RULE_groupingElement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class MultipleGroupingSetsContext(GroupingElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.GroupingElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def GROUPING(self):
            return self.getToken(PrestoSQLParser.GROUPING, 0)
        def SETS(self):
            return self.getToken(PrestoSQLParser.SETS, 0)
        def groupingSet(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrestoSQLParser.GroupingSetContext)
            else:
                return self.getTypedRuleContext(PrestoSQLParser.GroupingSetContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultipleGroupingSets" ):
                listener.enterMultipleGroupingSets(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultipleGroupingSets" ):
                listener.exitMultipleGroupingSets(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultipleGroupingSets" ):
                return visitor.visitMultipleGroupingSets(self)
            else:
                return visitor.visitChildren(self)


    class SingleGroupingSetContext(GroupingElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.GroupingElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def groupingSet(self):
            return self.getTypedRuleContext(PrestoSQLParser.GroupingSetContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleGroupingSet" ):
                listener.enterSingleGroupingSet(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleGroupingSet" ):
                listener.exitSingleGroupingSet(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleGroupingSet" ):
                return visitor.visitSingleGroupingSet(self)
            else:
                return visitor.visitChildren(self)


    class CubeContext(GroupingElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.GroupingElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CUBE(self):
            return self.getToken(PrestoSQLParser.CUBE, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrestoSQLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PrestoSQLParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCube" ):
                listener.enterCube(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCube" ):
                listener.exitCube(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCube" ):
                return visitor.visitCube(self)
            else:
                return visitor.visitChildren(self)


    class RollupContext(GroupingElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.GroupingElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ROLLUP(self):
            return self.getToken(PrestoSQLParser.ROLLUP, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrestoSQLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PrestoSQLParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRollup" ):
                listener.enterRollup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRollup" ):
                listener.exitRollup(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRollup" ):
                return visitor.visitRollup(self)
            else:
                return visitor.visitChildren(self)



    def groupingElement(self):

        localctx = PrestoSQLParser.GroupingElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_groupingElement)
        self._la = 0 # Token type
        try:
            self.state = 987
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
            if la_ == 1:
                localctx = PrestoSQLParser.SingleGroupingSetContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 947
                self.groupingSet()
                pass

            elif la_ == 2:
                localctx = PrestoSQLParser.RollupContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 948
                self.match(PrestoSQLParser.ROLLUP)
                self.state = 949
                self.match(PrestoSQLParser.T__1)
                self.state = 958
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PrestoSQLParser.T__1) | (1 << PrestoSQLParser.T__4) | (1 << PrestoSQLParser.ADD) | (1 << PrestoSQLParser.ADMIN) | (1 << PrestoSQLParser.ALL) | (1 << PrestoSQLParser.ANALYZE) | (1 << PrestoSQLParser.ANY) | (1 << PrestoSQLParser.ARRAY) | (1 << PrestoSQLParser.ASC) | (1 << PrestoSQLParser.AT) | (1 << PrestoSQLParser.BERNOULLI) | (1 << PrestoSQLParser.CALL) | (1 << PrestoSQLParser.CALLED) | (1 << PrestoSQLParser.CASCADE) | (1 << PrestoSQLParser.CASE) | (1 << PrestoSQLParser.CAST) | (1 << PrestoSQLParser.CATALOGS) | (1 << PrestoSQLParser.COLUMN) | (1 << PrestoSQLParser.COLUMNS) | (1 << PrestoSQLParser.COMMENT) | (1 << PrestoSQLParser.COMMIT) | (1 << PrestoSQLParser.COMMITTED) | (1 << PrestoSQLParser.CURRENT) | (1 << PrestoSQLParser.CURRENT_DATE) | (1 << PrestoSQLParser.CURRENT_ROLE) | (1 << PrestoSQLParser.CURRENT_TIME) | (1 << PrestoSQLParser.CURRENT_TIMESTAMP) | (1 << PrestoSQLParser.CURRENT_USER) | (1 << PrestoSQLParser.DATA) | (1 << PrestoSQLParser.DATE) | (1 << PrestoSQLParser.DAY) | (1 << PrestoSQLParser.DEFINER) | (1 << PrestoSQLParser.DESC) | (1 << PrestoSQLParser.DETERMINISTIC) | (1 << PrestoSQLParser.DISTRIBUTED) | (1 << PrestoSQLParser.EXCLUDING) | (1 << PrestoSQLParser.EXISTS))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PrestoSQLParser.EXPLAIN - 64)) | (1 << (PrestoSQLParser.EXTRACT - 64)) | (1 << (PrestoSQLParser.EXTERNAL - 64)) | (1 << (PrestoSQLParser.FALSE - 64)) | (1 << (PrestoSQLParser.FILTER - 64)) | (1 << (PrestoSQLParser.FIRST - 64)) | (1 << (PrestoSQLParser.FOLLOWING - 64)) | (1 << (PrestoSQLParser.FORMAT - 64)) | (1 << (PrestoSQLParser.FUNCTION - 64)) | (1 << (PrestoSQLParser.FUNCTIONS - 64)) | (1 << (PrestoSQLParser.GRANT - 64)) | (1 << (PrestoSQLParser.GRANTED - 64)) | (1 << (PrestoSQLParser.GRANTS - 64)) | (1 << (PrestoSQLParser.GRAPHVIZ - 64)) | (1 << (PrestoSQLParser.GROUPING - 64)) | (1 << (PrestoSQLParser.HOUR - 64)) | (1 << (PrestoSQLParser.IF - 64)) | (1 << (PrestoSQLParser.IGNORE - 64)) | (1 << (PrestoSQLParser.INCLUDING - 64)) | (1 << (PrestoSQLParser.INPUT - 64)) | (1 << (PrestoSQLParser.INTERVAL - 64)) | (1 << (PrestoSQLParser.INVOKER - 64)) | (1 << (PrestoSQLParser.IO - 64)) | (1 << (PrestoSQLParser.ISOLATION - 64)) | (1 << (PrestoSQLParser.JSON - 64)) | (1 << (PrestoSQLParser.LANGUAGE - 64)) | (1 << (PrestoSQLParser.LAST - 64)) | (1 << (PrestoSQLParser.LATERAL - 64)) | (1 << (PrestoSQLParser.LEVEL - 64)) | (1 << (PrestoSQLParser.LIMIT - 64)) | (1 << (PrestoSQLParser.LOCALTIME - 64)) | (1 << (PrestoSQLParser.LOCALTIMESTAMP - 64)) | (1 << (PrestoSQLParser.LOGICAL - 64)) | (1 << (PrestoSQLParser.MAP - 64)) | (1 << (PrestoSQLParser.MINUTE - 64)) | (1 << (PrestoSQLParser.MONTH - 64)) | (1 << (PrestoSQLParser.NAME - 64)) | (1 << (PrestoSQLParser.NFC - 64)) | (1 << (PrestoSQLParser.NFD - 64)) | (1 << (PrestoSQLParser.NFKC - 64)) | (1 << (PrestoSQLParser.NFKD - 64)) | (1 << (PrestoSQLParser.NO - 64)) | (1 << (PrestoSQLParser.NONE - 64)) | (1 << (PrestoSQLParser.NORMALIZE - 64)) | (1 << (PrestoSQLParser.NOT - 64)) | (1 << (PrestoSQLParser.NULL - 64)) | (1 << (PrestoSQLParser.NULLIF - 64)) | (1 << (PrestoSQLParser.NULLS - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (PrestoSQLParser.ONLY - 128)) | (1 << (PrestoSQLParser.OPTION - 128)) | (1 << (PrestoSQLParser.ORDINALITY - 128)) | (1 << (PrestoSQLParser.OUTPUT - 128)) | (1 << (PrestoSQLParser.OVER - 128)) | (1 << (PrestoSQLParser.PARTITION - 128)) | (1 << (PrestoSQLParser.PARTITIONS - 128)) | (1 << (PrestoSQLParser.POSITION - 128)) | (1 << (PrestoSQLParser.PRECEDING - 128)) | (1 << (PrestoSQLParser.PRIVILEGES - 128)) | (1 << (PrestoSQLParser.PROPERTIES - 128)) | (1 << (PrestoSQLParser.RANGE - 128)) | (1 << (PrestoSQLParser.READ - 128)) | (1 << (PrestoSQLParser.RENAME - 128)) | (1 << (PrestoSQLParser.REPEATABLE - 128)) | (1 << (PrestoSQLParser.REPLACE - 128)) | (1 << (PrestoSQLParser.RESET - 128)) | (1 << (PrestoSQLParser.RESPECT - 128)) | (1 << (PrestoSQLParser.RESTRICT - 128)) | (1 << (PrestoSQLParser.RETURN - 128)) | (1 << (PrestoSQLParser.RETURNS - 128)) | (1 << (PrestoSQLParser.REVOKE - 128)) | (1 << (PrestoSQLParser.ROLE - 128)) | (1 << (PrestoSQLParser.ROLES - 128)) | (1 << (PrestoSQLParser.ROLLBACK - 128)) | (1 << (PrestoSQLParser.ROW - 128)) | (1 << (PrestoSQLParser.ROWS - 128)) | (1 << (PrestoSQLParser.SCHEMA - 128)) | (1 << (PrestoSQLParser.SCHEMAS - 128)) | (1 << (PrestoSQLParser.SECOND - 128)) | (1 << (PrestoSQLParser.SECURITY - 128)) | (1 << (PrestoSQLParser.SERIALIZABLE - 128)) | (1 << (PrestoSQLParser.SESSION - 128)) | (1 << (PrestoSQLParser.SET - 128)) | (1 << (PrestoSQLParser.SETS - 128)) | (1 << (PrestoSQLParser.SHOW - 128)) | (1 << (PrestoSQLParser.SOME - 128)) | (1 << (PrestoSQLParser.SQL - 128)) | (1 << (PrestoSQLParser.START - 128)) | (1 << (PrestoSQLParser.STATS - 128)) | (1 << (PrestoSQLParser.SUBSTRING - 128)) | (1 << (PrestoSQLParser.SYSTEM - 128)) | (1 << (PrestoSQLParser.TABLES - 128)) | (1 << (PrestoSQLParser.TABLESAMPLE - 128)) | (1 << (PrestoSQLParser.TEXT - 128)) | (1 << (PrestoSQLParser.TIME - 128)) | (1 << (PrestoSQLParser.TIMESTAMP - 128)) | (1 << (PrestoSQLParser.TO - 128)) | (1 << (PrestoSQLParser.TRANSACTION - 128)) | (1 << (PrestoSQLParser.TRUE - 128)) | (1 << (PrestoSQLParser.TRY_CAST - 128)) | (1 << (PrestoSQLParser.TYPE - 128)) | (1 << (PrestoSQLParser.UNBOUNDED - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (PrestoSQLParser.UNCOMMITTED - 192)) | (1 << (PrestoSQLParser.USE - 192)) | (1 << (PrestoSQLParser.USER - 192)) | (1 << (PrestoSQLParser.VALIDATE - 192)) | (1 << (PrestoSQLParser.VERBOSE - 192)) | (1 << (PrestoSQLParser.VIEW - 192)) | (1 << (PrestoSQLParser.WORK - 192)) | (1 << (PrestoSQLParser.WRITE - 192)) | (1 << (PrestoSQLParser.YEAR - 192)) | (1 << (PrestoSQLParser.ZONE - 192)) | (1 << (PrestoSQLParser.PLUS - 192)) | (1 << (PrestoSQLParser.MINUS - 192)) | (1 << (PrestoSQLParser.STRING - 192)) | (1 << (PrestoSQLParser.UNICODE_STRING - 192)) | (1 << (PrestoSQLParser.BINARY_LITERAL - 192)) | (1 << (PrestoSQLParser.INTEGER_VALUE - 192)) | (1 << (PrestoSQLParser.DECIMAL_VALUE - 192)) | (1 << (PrestoSQLParser.DOUBLE_VALUE - 192)) | (1 << (PrestoSQLParser.IDENTIFIER - 192)) | (1 << (PrestoSQLParser.DIGIT_IDENTIFIER - 192)) | (1 << (PrestoSQLParser.QUOTED_IDENTIFIER - 192)) | (1 << (PrestoSQLParser.BACKQUOTED_IDENTIFIER - 192)) | (1 << (PrestoSQLParser.DOUBLE_PRECISION - 192)))) != 0):
                    self.state = 950
                    self.expression()
                    self.state = 955
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==PrestoSQLParser.T__3:
                        self.state = 951
                        self.match(PrestoSQLParser.T__3)
                        self.state = 952
                        self.expression()
                        self.state = 957
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 960
                self.match(PrestoSQLParser.T__2)
                pass

            elif la_ == 3:
                localctx = PrestoSQLParser.CubeContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 961
                self.match(PrestoSQLParser.CUBE)
                self.state = 962
                self.match(PrestoSQLParser.T__1)
                self.state = 971
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PrestoSQLParser.T__1) | (1 << PrestoSQLParser.T__4) | (1 << PrestoSQLParser.ADD) | (1 << PrestoSQLParser.ADMIN) | (1 << PrestoSQLParser.ALL) | (1 << PrestoSQLParser.ANALYZE) | (1 << PrestoSQLParser.ANY) | (1 << PrestoSQLParser.ARRAY) | (1 << PrestoSQLParser.ASC) | (1 << PrestoSQLParser.AT) | (1 << PrestoSQLParser.BERNOULLI) | (1 << PrestoSQLParser.CALL) | (1 << PrestoSQLParser.CALLED) | (1 << PrestoSQLParser.CASCADE) | (1 << PrestoSQLParser.CASE) | (1 << PrestoSQLParser.CAST) | (1 << PrestoSQLParser.CATALOGS) | (1 << PrestoSQLParser.COLUMN) | (1 << PrestoSQLParser.COLUMNS) | (1 << PrestoSQLParser.COMMENT) | (1 << PrestoSQLParser.COMMIT) | (1 << PrestoSQLParser.COMMITTED) | (1 << PrestoSQLParser.CURRENT) | (1 << PrestoSQLParser.CURRENT_DATE) | (1 << PrestoSQLParser.CURRENT_ROLE) | (1 << PrestoSQLParser.CURRENT_TIME) | (1 << PrestoSQLParser.CURRENT_TIMESTAMP) | (1 << PrestoSQLParser.CURRENT_USER) | (1 << PrestoSQLParser.DATA) | (1 << PrestoSQLParser.DATE) | (1 << PrestoSQLParser.DAY) | (1 << PrestoSQLParser.DEFINER) | (1 << PrestoSQLParser.DESC) | (1 << PrestoSQLParser.DETERMINISTIC) | (1 << PrestoSQLParser.DISTRIBUTED) | (1 << PrestoSQLParser.EXCLUDING) | (1 << PrestoSQLParser.EXISTS))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PrestoSQLParser.EXPLAIN - 64)) | (1 << (PrestoSQLParser.EXTRACT - 64)) | (1 << (PrestoSQLParser.EXTERNAL - 64)) | (1 << (PrestoSQLParser.FALSE - 64)) | (1 << (PrestoSQLParser.FILTER - 64)) | (1 << (PrestoSQLParser.FIRST - 64)) | (1 << (PrestoSQLParser.FOLLOWING - 64)) | (1 << (PrestoSQLParser.FORMAT - 64)) | (1 << (PrestoSQLParser.FUNCTION - 64)) | (1 << (PrestoSQLParser.FUNCTIONS - 64)) | (1 << (PrestoSQLParser.GRANT - 64)) | (1 << (PrestoSQLParser.GRANTED - 64)) | (1 << (PrestoSQLParser.GRANTS - 64)) | (1 << (PrestoSQLParser.GRAPHVIZ - 64)) | (1 << (PrestoSQLParser.GROUPING - 64)) | (1 << (PrestoSQLParser.HOUR - 64)) | (1 << (PrestoSQLParser.IF - 64)) | (1 << (PrestoSQLParser.IGNORE - 64)) | (1 << (PrestoSQLParser.INCLUDING - 64)) | (1 << (PrestoSQLParser.INPUT - 64)) | (1 << (PrestoSQLParser.INTERVAL - 64)) | (1 << (PrestoSQLParser.INVOKER - 64)) | (1 << (PrestoSQLParser.IO - 64)) | (1 << (PrestoSQLParser.ISOLATION - 64)) | (1 << (PrestoSQLParser.JSON - 64)) | (1 << (PrestoSQLParser.LANGUAGE - 64)) | (1 << (PrestoSQLParser.LAST - 64)) | (1 << (PrestoSQLParser.LATERAL - 64)) | (1 << (PrestoSQLParser.LEVEL - 64)) | (1 << (PrestoSQLParser.LIMIT - 64)) | (1 << (PrestoSQLParser.LOCALTIME - 64)) | (1 << (PrestoSQLParser.LOCALTIMESTAMP - 64)) | (1 << (PrestoSQLParser.LOGICAL - 64)) | (1 << (PrestoSQLParser.MAP - 64)) | (1 << (PrestoSQLParser.MINUTE - 64)) | (1 << (PrestoSQLParser.MONTH - 64)) | (1 << (PrestoSQLParser.NAME - 64)) | (1 << (PrestoSQLParser.NFC - 64)) | (1 << (PrestoSQLParser.NFD - 64)) | (1 << (PrestoSQLParser.NFKC - 64)) | (1 << (PrestoSQLParser.NFKD - 64)) | (1 << (PrestoSQLParser.NO - 64)) | (1 << (PrestoSQLParser.NONE - 64)) | (1 << (PrestoSQLParser.NORMALIZE - 64)) | (1 << (PrestoSQLParser.NOT - 64)) | (1 << (PrestoSQLParser.NULL - 64)) | (1 << (PrestoSQLParser.NULLIF - 64)) | (1 << (PrestoSQLParser.NULLS - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (PrestoSQLParser.ONLY - 128)) | (1 << (PrestoSQLParser.OPTION - 128)) | (1 << (PrestoSQLParser.ORDINALITY - 128)) | (1 << (PrestoSQLParser.OUTPUT - 128)) | (1 << (PrestoSQLParser.OVER - 128)) | (1 << (PrestoSQLParser.PARTITION - 128)) | (1 << (PrestoSQLParser.PARTITIONS - 128)) | (1 << (PrestoSQLParser.POSITION - 128)) | (1 << (PrestoSQLParser.PRECEDING - 128)) | (1 << (PrestoSQLParser.PRIVILEGES - 128)) | (1 << (PrestoSQLParser.PROPERTIES - 128)) | (1 << (PrestoSQLParser.RANGE - 128)) | (1 << (PrestoSQLParser.READ - 128)) | (1 << (PrestoSQLParser.RENAME - 128)) | (1 << (PrestoSQLParser.REPEATABLE - 128)) | (1 << (PrestoSQLParser.REPLACE - 128)) | (1 << (PrestoSQLParser.RESET - 128)) | (1 << (PrestoSQLParser.RESPECT - 128)) | (1 << (PrestoSQLParser.RESTRICT - 128)) | (1 << (PrestoSQLParser.RETURN - 128)) | (1 << (PrestoSQLParser.RETURNS - 128)) | (1 << (PrestoSQLParser.REVOKE - 128)) | (1 << (PrestoSQLParser.ROLE - 128)) | (1 << (PrestoSQLParser.ROLES - 128)) | (1 << (PrestoSQLParser.ROLLBACK - 128)) | (1 << (PrestoSQLParser.ROW - 128)) | (1 << (PrestoSQLParser.ROWS - 128)) | (1 << (PrestoSQLParser.SCHEMA - 128)) | (1 << (PrestoSQLParser.SCHEMAS - 128)) | (1 << (PrestoSQLParser.SECOND - 128)) | (1 << (PrestoSQLParser.SECURITY - 128)) | (1 << (PrestoSQLParser.SERIALIZABLE - 128)) | (1 << (PrestoSQLParser.SESSION - 128)) | (1 << (PrestoSQLParser.SET - 128)) | (1 << (PrestoSQLParser.SETS - 128)) | (1 << (PrestoSQLParser.SHOW - 128)) | (1 << (PrestoSQLParser.SOME - 128)) | (1 << (PrestoSQLParser.SQL - 128)) | (1 << (PrestoSQLParser.START - 128)) | (1 << (PrestoSQLParser.STATS - 128)) | (1 << (PrestoSQLParser.SUBSTRING - 128)) | (1 << (PrestoSQLParser.SYSTEM - 128)) | (1 << (PrestoSQLParser.TABLES - 128)) | (1 << (PrestoSQLParser.TABLESAMPLE - 128)) | (1 << (PrestoSQLParser.TEXT - 128)) | (1 << (PrestoSQLParser.TIME - 128)) | (1 << (PrestoSQLParser.TIMESTAMP - 128)) | (1 << (PrestoSQLParser.TO - 128)) | (1 << (PrestoSQLParser.TRANSACTION - 128)) | (1 << (PrestoSQLParser.TRUE - 128)) | (1 << (PrestoSQLParser.TRY_CAST - 128)) | (1 << (PrestoSQLParser.TYPE - 128)) | (1 << (PrestoSQLParser.UNBOUNDED - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (PrestoSQLParser.UNCOMMITTED - 192)) | (1 << (PrestoSQLParser.USE - 192)) | (1 << (PrestoSQLParser.USER - 192)) | (1 << (PrestoSQLParser.VALIDATE - 192)) | (1 << (PrestoSQLParser.VERBOSE - 192)) | (1 << (PrestoSQLParser.VIEW - 192)) | (1 << (PrestoSQLParser.WORK - 192)) | (1 << (PrestoSQLParser.WRITE - 192)) | (1 << (PrestoSQLParser.YEAR - 192)) | (1 << (PrestoSQLParser.ZONE - 192)) | (1 << (PrestoSQLParser.PLUS - 192)) | (1 << (PrestoSQLParser.MINUS - 192)) | (1 << (PrestoSQLParser.STRING - 192)) | (1 << (PrestoSQLParser.UNICODE_STRING - 192)) | (1 << (PrestoSQLParser.BINARY_LITERAL - 192)) | (1 << (PrestoSQLParser.INTEGER_VALUE - 192)) | (1 << (PrestoSQLParser.DECIMAL_VALUE - 192)) | (1 << (PrestoSQLParser.DOUBLE_VALUE - 192)) | (1 << (PrestoSQLParser.IDENTIFIER - 192)) | (1 << (PrestoSQLParser.DIGIT_IDENTIFIER - 192)) | (1 << (PrestoSQLParser.QUOTED_IDENTIFIER - 192)) | (1 << (PrestoSQLParser.BACKQUOTED_IDENTIFIER - 192)) | (1 << (PrestoSQLParser.DOUBLE_PRECISION - 192)))) != 0):
                    self.state = 963
                    self.expression()
                    self.state = 968
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==PrestoSQLParser.T__3:
                        self.state = 964
                        self.match(PrestoSQLParser.T__3)
                        self.state = 965
                        self.expression()
                        self.state = 970
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 973
                self.match(PrestoSQLParser.T__2)
                pass

            elif la_ == 4:
                localctx = PrestoSQLParser.MultipleGroupingSetsContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 974
                self.match(PrestoSQLParser.GROUPING)
                self.state = 975
                self.match(PrestoSQLParser.SETS)
                self.state = 976
                self.match(PrestoSQLParser.T__1)
                self.state = 977
                self.groupingSet()
                self.state = 982
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PrestoSQLParser.T__3:
                    self.state = 978
                    self.match(PrestoSQLParser.T__3)
                    self.state = 979
                    self.groupingSet()
                    self.state = 984
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 985
                self.match(PrestoSQLParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupingSetContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrestoSQLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PrestoSQLParser.ExpressionContext,i)


        def getRuleIndex(self):
            return PrestoSQLParser.RULE_groupingSet

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupingSet" ):
                listener.enterGroupingSet(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupingSet" ):
                listener.exitGroupingSet(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroupingSet" ):
                return visitor.visitGroupingSet(self)
            else:
                return visitor.visitChildren(self)




    def groupingSet(self):

        localctx = PrestoSQLParser.GroupingSetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_groupingSet)
        self._la = 0 # Token type
        try:
            self.state = 1002
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 989
                self.match(PrestoSQLParser.T__1)
                self.state = 998
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PrestoSQLParser.T__1) | (1 << PrestoSQLParser.T__4) | (1 << PrestoSQLParser.ADD) | (1 << PrestoSQLParser.ADMIN) | (1 << PrestoSQLParser.ALL) | (1 << PrestoSQLParser.ANALYZE) | (1 << PrestoSQLParser.ANY) | (1 << PrestoSQLParser.ARRAY) | (1 << PrestoSQLParser.ASC) | (1 << PrestoSQLParser.AT) | (1 << PrestoSQLParser.BERNOULLI) | (1 << PrestoSQLParser.CALL) | (1 << PrestoSQLParser.CALLED) | (1 << PrestoSQLParser.CASCADE) | (1 << PrestoSQLParser.CASE) | (1 << PrestoSQLParser.CAST) | (1 << PrestoSQLParser.CATALOGS) | (1 << PrestoSQLParser.COLUMN) | (1 << PrestoSQLParser.COLUMNS) | (1 << PrestoSQLParser.COMMENT) | (1 << PrestoSQLParser.COMMIT) | (1 << PrestoSQLParser.COMMITTED) | (1 << PrestoSQLParser.CURRENT) | (1 << PrestoSQLParser.CURRENT_DATE) | (1 << PrestoSQLParser.CURRENT_ROLE) | (1 << PrestoSQLParser.CURRENT_TIME) | (1 << PrestoSQLParser.CURRENT_TIMESTAMP) | (1 << PrestoSQLParser.CURRENT_USER) | (1 << PrestoSQLParser.DATA) | (1 << PrestoSQLParser.DATE) | (1 << PrestoSQLParser.DAY) | (1 << PrestoSQLParser.DEFINER) | (1 << PrestoSQLParser.DESC) | (1 << PrestoSQLParser.DETERMINISTIC) | (1 << PrestoSQLParser.DISTRIBUTED) | (1 << PrestoSQLParser.EXCLUDING) | (1 << PrestoSQLParser.EXISTS))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PrestoSQLParser.EXPLAIN - 64)) | (1 << (PrestoSQLParser.EXTRACT - 64)) | (1 << (PrestoSQLParser.EXTERNAL - 64)) | (1 << (PrestoSQLParser.FALSE - 64)) | (1 << (PrestoSQLParser.FILTER - 64)) | (1 << (PrestoSQLParser.FIRST - 64)) | (1 << (PrestoSQLParser.FOLLOWING - 64)) | (1 << (PrestoSQLParser.FORMAT - 64)) | (1 << (PrestoSQLParser.FUNCTION - 64)) | (1 << (PrestoSQLParser.FUNCTIONS - 64)) | (1 << (PrestoSQLParser.GRANT - 64)) | (1 << (PrestoSQLParser.GRANTED - 64)) | (1 << (PrestoSQLParser.GRANTS - 64)) | (1 << (PrestoSQLParser.GRAPHVIZ - 64)) | (1 << (PrestoSQLParser.GROUPING - 64)) | (1 << (PrestoSQLParser.HOUR - 64)) | (1 << (PrestoSQLParser.IF - 64)) | (1 << (PrestoSQLParser.IGNORE - 64)) | (1 << (PrestoSQLParser.INCLUDING - 64)) | (1 << (PrestoSQLParser.INPUT - 64)) | (1 << (PrestoSQLParser.INTERVAL - 64)) | (1 << (PrestoSQLParser.INVOKER - 64)) | (1 << (PrestoSQLParser.IO - 64)) | (1 << (PrestoSQLParser.ISOLATION - 64)) | (1 << (PrestoSQLParser.JSON - 64)) | (1 << (PrestoSQLParser.LANGUAGE - 64)) | (1 << (PrestoSQLParser.LAST - 64)) | (1 << (PrestoSQLParser.LATERAL - 64)) | (1 << (PrestoSQLParser.LEVEL - 64)) | (1 << (PrestoSQLParser.LIMIT - 64)) | (1 << (PrestoSQLParser.LOCALTIME - 64)) | (1 << (PrestoSQLParser.LOCALTIMESTAMP - 64)) | (1 << (PrestoSQLParser.LOGICAL - 64)) | (1 << (PrestoSQLParser.MAP - 64)) | (1 << (PrestoSQLParser.MINUTE - 64)) | (1 << (PrestoSQLParser.MONTH - 64)) | (1 << (PrestoSQLParser.NAME - 64)) | (1 << (PrestoSQLParser.NFC - 64)) | (1 << (PrestoSQLParser.NFD - 64)) | (1 << (PrestoSQLParser.NFKC - 64)) | (1 << (PrestoSQLParser.NFKD - 64)) | (1 << (PrestoSQLParser.NO - 64)) | (1 << (PrestoSQLParser.NONE - 64)) | (1 << (PrestoSQLParser.NORMALIZE - 64)) | (1 << (PrestoSQLParser.NOT - 64)) | (1 << (PrestoSQLParser.NULL - 64)) | (1 << (PrestoSQLParser.NULLIF - 64)) | (1 << (PrestoSQLParser.NULLS - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (PrestoSQLParser.ONLY - 128)) | (1 << (PrestoSQLParser.OPTION - 128)) | (1 << (PrestoSQLParser.ORDINALITY - 128)) | (1 << (PrestoSQLParser.OUTPUT - 128)) | (1 << (PrestoSQLParser.OVER - 128)) | (1 << (PrestoSQLParser.PARTITION - 128)) | (1 << (PrestoSQLParser.PARTITIONS - 128)) | (1 << (PrestoSQLParser.POSITION - 128)) | (1 << (PrestoSQLParser.PRECEDING - 128)) | (1 << (PrestoSQLParser.PRIVILEGES - 128)) | (1 << (PrestoSQLParser.PROPERTIES - 128)) | (1 << (PrestoSQLParser.RANGE - 128)) | (1 << (PrestoSQLParser.READ - 128)) | (1 << (PrestoSQLParser.RENAME - 128)) | (1 << (PrestoSQLParser.REPEATABLE - 128)) | (1 << (PrestoSQLParser.REPLACE - 128)) | (1 << (PrestoSQLParser.RESET - 128)) | (1 << (PrestoSQLParser.RESPECT - 128)) | (1 << (PrestoSQLParser.RESTRICT - 128)) | (1 << (PrestoSQLParser.RETURN - 128)) | (1 << (PrestoSQLParser.RETURNS - 128)) | (1 << (PrestoSQLParser.REVOKE - 128)) | (1 << (PrestoSQLParser.ROLE - 128)) | (1 << (PrestoSQLParser.ROLES - 128)) | (1 << (PrestoSQLParser.ROLLBACK - 128)) | (1 << (PrestoSQLParser.ROW - 128)) | (1 << (PrestoSQLParser.ROWS - 128)) | (1 << (PrestoSQLParser.SCHEMA - 128)) | (1 << (PrestoSQLParser.SCHEMAS - 128)) | (1 << (PrestoSQLParser.SECOND - 128)) | (1 << (PrestoSQLParser.SECURITY - 128)) | (1 << (PrestoSQLParser.SERIALIZABLE - 128)) | (1 << (PrestoSQLParser.SESSION - 128)) | (1 << (PrestoSQLParser.SET - 128)) | (1 << (PrestoSQLParser.SETS - 128)) | (1 << (PrestoSQLParser.SHOW - 128)) | (1 << (PrestoSQLParser.SOME - 128)) | (1 << (PrestoSQLParser.SQL - 128)) | (1 << (PrestoSQLParser.START - 128)) | (1 << (PrestoSQLParser.STATS - 128)) | (1 << (PrestoSQLParser.SUBSTRING - 128)) | (1 << (PrestoSQLParser.SYSTEM - 128)) | (1 << (PrestoSQLParser.TABLES - 128)) | (1 << (PrestoSQLParser.TABLESAMPLE - 128)) | (1 << (PrestoSQLParser.TEXT - 128)) | (1 << (PrestoSQLParser.TIME - 128)) | (1 << (PrestoSQLParser.TIMESTAMP - 128)) | (1 << (PrestoSQLParser.TO - 128)) | (1 << (PrestoSQLParser.TRANSACTION - 128)) | (1 << (PrestoSQLParser.TRUE - 128)) | (1 << (PrestoSQLParser.TRY_CAST - 128)) | (1 << (PrestoSQLParser.TYPE - 128)) | (1 << (PrestoSQLParser.UNBOUNDED - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (PrestoSQLParser.UNCOMMITTED - 192)) | (1 << (PrestoSQLParser.USE - 192)) | (1 << (PrestoSQLParser.USER - 192)) | (1 << (PrestoSQLParser.VALIDATE - 192)) | (1 << (PrestoSQLParser.VERBOSE - 192)) | (1 << (PrestoSQLParser.VIEW - 192)) | (1 << (PrestoSQLParser.WORK - 192)) | (1 << (PrestoSQLParser.WRITE - 192)) | (1 << (PrestoSQLParser.YEAR - 192)) | (1 << (PrestoSQLParser.ZONE - 192)) | (1 << (PrestoSQLParser.PLUS - 192)) | (1 << (PrestoSQLParser.MINUS - 192)) | (1 << (PrestoSQLParser.STRING - 192)) | (1 << (PrestoSQLParser.UNICODE_STRING - 192)) | (1 << (PrestoSQLParser.BINARY_LITERAL - 192)) | (1 << (PrestoSQLParser.INTEGER_VALUE - 192)) | (1 << (PrestoSQLParser.DECIMAL_VALUE - 192)) | (1 << (PrestoSQLParser.DOUBLE_VALUE - 192)) | (1 << (PrestoSQLParser.IDENTIFIER - 192)) | (1 << (PrestoSQLParser.DIGIT_IDENTIFIER - 192)) | (1 << (PrestoSQLParser.QUOTED_IDENTIFIER - 192)) | (1 << (PrestoSQLParser.BACKQUOTED_IDENTIFIER - 192)) | (1 << (PrestoSQLParser.DOUBLE_PRECISION - 192)))) != 0):
                    self.state = 990
                    self.expression()
                    self.state = 995
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==PrestoSQLParser.T__3:
                        self.state = 991
                        self.match(PrestoSQLParser.T__3)
                        self.state = 992
                        self.expression()
                        self.state = 997
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1000
                self.match(PrestoSQLParser.T__2)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1001
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedQueryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # IdentifierContext

        def AS(self):
            return self.getToken(PrestoSQLParser.AS, 0)

        def query(self):
            return self.getTypedRuleContext(PrestoSQLParser.QueryContext,0)


        def identifier(self):
            return self.getTypedRuleContext(PrestoSQLParser.IdentifierContext,0)


        def columnAliases(self):
            return self.getTypedRuleContext(PrestoSQLParser.ColumnAliasesContext,0)


        def getRuleIndex(self):
            return PrestoSQLParser.RULE_namedQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedQuery" ):
                listener.enterNamedQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedQuery" ):
                listener.exitNamedQuery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamedQuery" ):
                return visitor.visitNamedQuery(self)
            else:
                return visitor.visitChildren(self)




    def namedQuery(self):

        localctx = PrestoSQLParser.NamedQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_namedQuery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1004
            localctx.name = self.identifier()
            self.state = 1006
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PrestoSQLParser.T__1:
                self.state = 1005
                self.columnAliases()


            self.state = 1008
            self.match(PrestoSQLParser.AS)
            self.state = 1009
            self.match(PrestoSQLParser.T__1)
            self.state = 1010
            self.query()
            self.state = 1011
            self.match(PrestoSQLParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetQuantifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISTINCT(self):
            return self.getToken(PrestoSQLParser.DISTINCT, 0)

        def ALL(self):
            return self.getToken(PrestoSQLParser.ALL, 0)

        def getRuleIndex(self):
            return PrestoSQLParser.RULE_setQuantifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetQuantifier" ):
                listener.enterSetQuantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetQuantifier" ):
                listener.exitSetQuantifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetQuantifier" ):
                return visitor.visitSetQuantifier(self)
            else:
                return visitor.visitChildren(self)




    def setQuantifier(self):

        localctx = PrestoSQLParser.SetQuantifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_setQuantifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1013
            _la = self._input.LA(1)
            if not(_la==PrestoSQLParser.ALL or _la==PrestoSQLParser.DISTINCT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectItemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PrestoSQLParser.RULE_selectItem

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SelectAllContext(SelectItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.SelectItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def qualifiedName(self):
            return self.getTypedRuleContext(PrestoSQLParser.QualifiedNameContext,0)

        def ASTERISK(self):
            return self.getToken(PrestoSQLParser.ASTERISK, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectAll" ):
                listener.enterSelectAll(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectAll" ):
                listener.exitSelectAll(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectAll" ):
                return visitor.visitSelectAll(self)
            else:
                return visitor.visitChildren(self)


    class SelectSingleContext(SelectItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.SelectItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(PrestoSQLParser.ExpressionContext,0)

        def identifier(self):
            return self.getTypedRuleContext(PrestoSQLParser.IdentifierContext,0)

        def AS(self):
            return self.getToken(PrestoSQLParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectSingle" ):
                listener.enterSelectSingle(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectSingle" ):
                listener.exitSelectSingle(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectSingle" ):
                return visitor.visitSelectSingle(self)
            else:
                return visitor.visitChildren(self)



    def selectItem(self):

        localctx = PrestoSQLParser.SelectItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_selectItem)
        self._la = 0 # Token type
        try:
            self.state = 1027
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,129,self._ctx)
            if la_ == 1:
                localctx = PrestoSQLParser.SelectSingleContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1015
                self.expression()
                self.state = 1020
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,128,self._ctx)
                if la_ == 1:
                    self.state = 1017
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PrestoSQLParser.AS:
                        self.state = 1016
                        self.match(PrestoSQLParser.AS)


                    self.state = 1019
                    self.identifier()


                pass

            elif la_ == 2:
                localctx = PrestoSQLParser.SelectAllContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1022
                self.qualifiedName()
                self.state = 1023
                self.match(PrestoSQLParser.T__0)
                self.state = 1024
                self.match(PrestoSQLParser.ASTERISK)
                pass

            elif la_ == 3:
                localctx = PrestoSQLParser.SelectAllContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1026
                self.match(PrestoSQLParser.ASTERISK)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PrestoSQLParser.RULE_relation

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class RelationDefaultContext(RelationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.RelationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def sampledRelation(self):
            return self.getTypedRuleContext(PrestoSQLParser.SampledRelationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelationDefault" ):
                listener.enterRelationDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelationDefault" ):
                listener.exitRelationDefault(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelationDefault" ):
                return visitor.visitRelationDefault(self)
            else:
                return visitor.visitChildren(self)


    class JoinRelationContext(RelationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.RelationContext
            super().__init__(parser)
            self.left = None # RelationContext
            self.right = None # SampledRelationContext
            self.rightRelation = None # RelationContext
            self.copyFrom(ctx)

        def relation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrestoSQLParser.RelationContext)
            else:
                return self.getTypedRuleContext(PrestoSQLParser.RelationContext,i)

        def CROSS(self):
            return self.getToken(PrestoSQLParser.CROSS, 0)
        def JOIN(self):
            return self.getToken(PrestoSQLParser.JOIN, 0)
        def joinType(self):
            return self.getTypedRuleContext(PrestoSQLParser.JoinTypeContext,0)

        def joinCriteria(self):
            return self.getTypedRuleContext(PrestoSQLParser.JoinCriteriaContext,0)

        def NATURAL(self):
            return self.getToken(PrestoSQLParser.NATURAL, 0)
        def sampledRelation(self):
            return self.getTypedRuleContext(PrestoSQLParser.SampledRelationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinRelation" ):
                listener.enterJoinRelation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinRelation" ):
                listener.exitJoinRelation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinRelation" ):
                return visitor.visitJoinRelation(self)
            else:
                return visitor.visitChildren(self)



    def relation(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PrestoSQLParser.RelationContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 68
        self.enterRecursionRule(localctx, 68, self.RULE_relation, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = PrestoSQLParser.RelationDefaultContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 1030
            self.sampledRelation()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1050
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,131,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PrestoSQLParser.JoinRelationContext(self, PrestoSQLParser.RelationContext(self, _parentctx, _parentState))
                    localctx.left = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_relation)
                    self.state = 1032
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 1046
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [PrestoSQLParser.CROSS]:
                        self.state = 1033
                        self.match(PrestoSQLParser.CROSS)
                        self.state = 1034
                        self.match(PrestoSQLParser.JOIN)
                        self.state = 1035
                        localctx.right = self.sampledRelation()
                        pass
                    elif token in [PrestoSQLParser.FULL, PrestoSQLParser.INNER, PrestoSQLParser.JOIN, PrestoSQLParser.LEFT, PrestoSQLParser.RIGHT]:
                        self.state = 1036
                        self.joinType()
                        self.state = 1037
                        self.match(PrestoSQLParser.JOIN)
                        self.state = 1038
                        localctx.rightRelation = self.relation(0)
                        self.state = 1039
                        self.joinCriteria()
                        pass
                    elif token in [PrestoSQLParser.NATURAL]:
                        self.state = 1041
                        self.match(PrestoSQLParser.NATURAL)
                        self.state = 1042
                        self.joinType()
                        self.state = 1043
                        self.match(PrestoSQLParser.JOIN)
                        self.state = 1044
                        localctx.right = self.sampledRelation()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 1052
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,131,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class JoinTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INNER(self):
            return self.getToken(PrestoSQLParser.INNER, 0)

        def LEFT(self):
            return self.getToken(PrestoSQLParser.LEFT, 0)

        def OUTER(self):
            return self.getToken(PrestoSQLParser.OUTER, 0)

        def RIGHT(self):
            return self.getToken(PrestoSQLParser.RIGHT, 0)

        def FULL(self):
            return self.getToken(PrestoSQLParser.FULL, 0)

        def getRuleIndex(self):
            return PrestoSQLParser.RULE_joinType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinType" ):
                listener.enterJoinType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinType" ):
                listener.exitJoinType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinType" ):
                return visitor.visitJoinType(self)
            else:
                return visitor.visitChildren(self)




    def joinType(self):

        localctx = PrestoSQLParser.JoinTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_joinType)
        self._la = 0 # Token type
        try:
            self.state = 1068
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PrestoSQLParser.INNER, PrestoSQLParser.JOIN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1054
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PrestoSQLParser.INNER:
                    self.state = 1053
                    self.match(PrestoSQLParser.INNER)


                pass
            elif token in [PrestoSQLParser.LEFT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1056
                self.match(PrestoSQLParser.LEFT)
                self.state = 1058
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PrestoSQLParser.OUTER:
                    self.state = 1057
                    self.match(PrestoSQLParser.OUTER)


                pass
            elif token in [PrestoSQLParser.RIGHT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1060
                self.match(PrestoSQLParser.RIGHT)
                self.state = 1062
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PrestoSQLParser.OUTER:
                    self.state = 1061
                    self.match(PrestoSQLParser.OUTER)


                pass
            elif token in [PrestoSQLParser.FULL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1064
                self.match(PrestoSQLParser.FULL)
                self.state = 1066
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PrestoSQLParser.OUTER:
                    self.state = 1065
                    self.match(PrestoSQLParser.OUTER)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinCriteriaContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(PrestoSQLParser.ON, 0)

        def booleanExpression(self):
            return self.getTypedRuleContext(PrestoSQLParser.BooleanExpressionContext,0)


        def USING(self):
            return self.getToken(PrestoSQLParser.USING, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrestoSQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(PrestoSQLParser.IdentifierContext,i)


        def getRuleIndex(self):
            return PrestoSQLParser.RULE_joinCriteria

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinCriteria" ):
                listener.enterJoinCriteria(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinCriteria" ):
                listener.exitJoinCriteria(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinCriteria" ):
                return visitor.visitJoinCriteria(self)
            else:
                return visitor.visitChildren(self)




    def joinCriteria(self):

        localctx = PrestoSQLParser.JoinCriteriaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_joinCriteria)
        self._la = 0 # Token type
        try:
            self.state = 1084
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PrestoSQLParser.ON]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1070
                self.match(PrestoSQLParser.ON)
                self.state = 1071
                self.booleanExpression(0)
                pass
            elif token in [PrestoSQLParser.USING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1072
                self.match(PrestoSQLParser.USING)
                self.state = 1073
                self.match(PrestoSQLParser.T__1)
                self.state = 1074
                self.identifier()
                self.state = 1079
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PrestoSQLParser.T__3:
                    self.state = 1075
                    self.match(PrestoSQLParser.T__3)
                    self.state = 1076
                    self.identifier()
                    self.state = 1081
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1082
                self.match(PrestoSQLParser.T__2)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SampledRelationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.percentage = None # ExpressionContext

        def aliasedRelation(self):
            return self.getTypedRuleContext(PrestoSQLParser.AliasedRelationContext,0)


        def TABLESAMPLE(self):
            return self.getToken(PrestoSQLParser.TABLESAMPLE, 0)

        def sampleType(self):
            return self.getTypedRuleContext(PrestoSQLParser.SampleTypeContext,0)


        def expression(self):
            return self.getTypedRuleContext(PrestoSQLParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PrestoSQLParser.RULE_sampledRelation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSampledRelation" ):
                listener.enterSampledRelation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSampledRelation" ):
                listener.exitSampledRelation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSampledRelation" ):
                return visitor.visitSampledRelation(self)
            else:
                return visitor.visitChildren(self)




    def sampledRelation(self):

        localctx = PrestoSQLParser.SampledRelationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_sampledRelation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1086
            self.aliasedRelation()
            self.state = 1093
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,139,self._ctx)
            if la_ == 1:
                self.state = 1087
                self.match(PrestoSQLParser.TABLESAMPLE)
                self.state = 1088
                self.sampleType()
                self.state = 1089
                self.match(PrestoSQLParser.T__1)
                self.state = 1090
                localctx.percentage = self.expression()
                self.state = 1091
                self.match(PrestoSQLParser.T__2)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SampleTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BERNOULLI(self):
            return self.getToken(PrestoSQLParser.BERNOULLI, 0)

        def SYSTEM(self):
            return self.getToken(PrestoSQLParser.SYSTEM, 0)

        def getRuleIndex(self):
            return PrestoSQLParser.RULE_sampleType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSampleType" ):
                listener.enterSampleType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSampleType" ):
                listener.exitSampleType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSampleType" ):
                return visitor.visitSampleType(self)
            else:
                return visitor.visitChildren(self)




    def sampleType(self):

        localctx = PrestoSQLParser.SampleTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_sampleType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1095
            _la = self._input.LA(1)
            if not(_la==PrestoSQLParser.BERNOULLI or _la==PrestoSQLParser.SYSTEM):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AliasedRelationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relationPrimary(self):
            return self.getTypedRuleContext(PrestoSQLParser.RelationPrimaryContext,0)


        def identifier(self):
            return self.getTypedRuleContext(PrestoSQLParser.IdentifierContext,0)


        def AS(self):
            return self.getToken(PrestoSQLParser.AS, 0)

        def columnAliases(self):
            return self.getTypedRuleContext(PrestoSQLParser.ColumnAliasesContext,0)


        def getRuleIndex(self):
            return PrestoSQLParser.RULE_aliasedRelation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAliasedRelation" ):
                listener.enterAliasedRelation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAliasedRelation" ):
                listener.exitAliasedRelation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAliasedRelation" ):
                return visitor.visitAliasedRelation(self)
            else:
                return visitor.visitChildren(self)




    def aliasedRelation(self):

        localctx = PrestoSQLParser.AliasedRelationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_aliasedRelation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1097
            self.relationPrimary()
            self.state = 1105
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,142,self._ctx)
            if la_ == 1:
                self.state = 1099
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PrestoSQLParser.AS:
                    self.state = 1098
                    self.match(PrestoSQLParser.AS)


                self.state = 1101
                self.identifier()
                self.state = 1103
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,141,self._ctx)
                if la_ == 1:
                    self.state = 1102
                    self.columnAliases()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnAliasesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrestoSQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(PrestoSQLParser.IdentifierContext,i)


        def getRuleIndex(self):
            return PrestoSQLParser.RULE_columnAliases

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnAliases" ):
                listener.enterColumnAliases(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnAliases" ):
                listener.exitColumnAliases(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnAliases" ):
                return visitor.visitColumnAliases(self)
            else:
                return visitor.visitChildren(self)




    def columnAliases(self):

        localctx = PrestoSQLParser.ColumnAliasesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_columnAliases)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1107
            self.match(PrestoSQLParser.T__1)
            self.state = 1108
            self.identifier()
            self.state = 1113
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PrestoSQLParser.T__3:
                self.state = 1109
                self.match(PrestoSQLParser.T__3)
                self.state = 1110
                self.identifier()
                self.state = 1115
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1116
            self.match(PrestoSQLParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationPrimaryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PrestoSQLParser.RULE_relationPrimary

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SubqueryRelationContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def query(self):
            return self.getTypedRuleContext(PrestoSQLParser.QueryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubqueryRelation" ):
                listener.enterSubqueryRelation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubqueryRelation" ):
                listener.exitSubqueryRelation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubqueryRelation" ):
                return visitor.visitSubqueryRelation(self)
            else:
                return visitor.visitChildren(self)


    class ParenthesizedRelationContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def relation(self):
            return self.getTypedRuleContext(PrestoSQLParser.RelationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesizedRelation" ):
                listener.enterParenthesizedRelation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesizedRelation" ):
                listener.exitParenthesizedRelation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParenthesizedRelation" ):
                return visitor.visitParenthesizedRelation(self)
            else:
                return visitor.visitChildren(self)


    class UnnestContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def UNNEST(self):
            return self.getToken(PrestoSQLParser.UNNEST, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrestoSQLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PrestoSQLParser.ExpressionContext,i)

        def WITH(self):
            return self.getToken(PrestoSQLParser.WITH, 0)
        def ORDINALITY(self):
            return self.getToken(PrestoSQLParser.ORDINALITY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnnest" ):
                listener.enterUnnest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnnest" ):
                listener.exitUnnest(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnnest" ):
                return visitor.visitUnnest(self)
            else:
                return visitor.visitChildren(self)


    class LateralContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LATERAL(self):
            return self.getToken(PrestoSQLParser.LATERAL, 0)
        def query(self):
            return self.getTypedRuleContext(PrestoSQLParser.QueryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLateral" ):
                listener.enterLateral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLateral" ):
                listener.exitLateral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLateral" ):
                return visitor.visitLateral(self)
            else:
                return visitor.visitChildren(self)


    class TableNameContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def qualifiedName(self):
            return self.getTypedRuleContext(PrestoSQLParser.QualifiedNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableName" ):
                listener.enterTableName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableName" ):
                listener.exitTableName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableName" ):
                return visitor.visitTableName(self)
            else:
                return visitor.visitChildren(self)



    def relationPrimary(self):

        localctx = PrestoSQLParser.RelationPrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_relationPrimary)
        self._la = 0 # Token type
        try:
            self.state = 1147
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,146,self._ctx)
            if la_ == 1:
                localctx = PrestoSQLParser.TableNameContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1118
                self.qualifiedName()
                pass

            elif la_ == 2:
                localctx = PrestoSQLParser.SubqueryRelationContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1119
                self.match(PrestoSQLParser.T__1)
                self.state = 1120
                self.query()
                self.state = 1121
                self.match(PrestoSQLParser.T__2)
                pass

            elif la_ == 3:
                localctx = PrestoSQLParser.UnnestContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1123
                self.match(PrestoSQLParser.UNNEST)
                self.state = 1124
                self.match(PrestoSQLParser.T__1)
                self.state = 1125
                self.expression()
                self.state = 1130
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PrestoSQLParser.T__3:
                    self.state = 1126
                    self.match(PrestoSQLParser.T__3)
                    self.state = 1127
                    self.expression()
                    self.state = 1132
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1133
                self.match(PrestoSQLParser.T__2)
                self.state = 1136
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,145,self._ctx)
                if la_ == 1:
                    self.state = 1134
                    self.match(PrestoSQLParser.WITH)
                    self.state = 1135
                    self.match(PrestoSQLParser.ORDINALITY)


                pass

            elif la_ == 4:
                localctx = PrestoSQLParser.LateralContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1138
                self.match(PrestoSQLParser.LATERAL)
                self.state = 1139
                self.match(PrestoSQLParser.T__1)
                self.state = 1140
                self.query()
                self.state = 1141
                self.match(PrestoSQLParser.T__2)
                pass

            elif la_ == 5:
                localctx = PrestoSQLParser.ParenthesizedRelationContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1143
                self.match(PrestoSQLParser.T__1)
                self.state = 1144
                self.relation(0)
                self.state = 1145
                self.match(PrestoSQLParser.T__2)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def booleanExpression(self):
            return self.getTypedRuleContext(PrestoSQLParser.BooleanExpressionContext,0)


        def getRuleIndex(self):
            return PrestoSQLParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)




    def expression(self):

        localctx = PrestoSQLParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1149
            self.booleanExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PrestoSQLParser.RULE_booleanExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class LogicalNotContext(BooleanExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.BooleanExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NOT(self):
            return self.getToken(PrestoSQLParser.NOT, 0)
        def booleanExpression(self):
            return self.getTypedRuleContext(PrestoSQLParser.BooleanExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalNot" ):
                listener.enterLogicalNot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalNot" ):
                listener.exitLogicalNot(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalNot" ):
                return visitor.visitLogicalNot(self)
            else:
                return visitor.visitChildren(self)


    class PredicatedContext(BooleanExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.BooleanExpressionContext
            super().__init__(parser)
            self._valueExpression = None # ValueExpressionContext
            self.copyFrom(ctx)

        def valueExpression(self):
            return self.getTypedRuleContext(PrestoSQLParser.ValueExpressionContext,0)

        def predicate(self):
            return self.getTypedRuleContext(PrestoSQLParser.PredicateContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicated" ):
                listener.enterPredicated(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicated" ):
                listener.exitPredicated(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPredicated" ):
                return visitor.visitPredicated(self)
            else:
                return visitor.visitChildren(self)


    class LogicalBinaryContext(BooleanExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.BooleanExpressionContext
            super().__init__(parser)
            self.left = None # BooleanExpressionContext
            self.operator = None # Token
            self.right = None # BooleanExpressionContext
            self.copyFrom(ctx)

        def booleanExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrestoSQLParser.BooleanExpressionContext)
            else:
                return self.getTypedRuleContext(PrestoSQLParser.BooleanExpressionContext,i)

        def AND(self):
            return self.getToken(PrestoSQLParser.AND, 0)
        def OR(self):
            return self.getToken(PrestoSQLParser.OR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalBinary" ):
                listener.enterLogicalBinary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalBinary" ):
                listener.exitLogicalBinary(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalBinary" ):
                return visitor.visitLogicalBinary(self)
            else:
                return visitor.visitChildren(self)



    def booleanExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PrestoSQLParser.BooleanExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 86
        self.enterRecursionRule(localctx, 86, self.RULE_booleanExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1158
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PrestoSQLParser.T__1, PrestoSQLParser.T__4, PrestoSQLParser.ADD, PrestoSQLParser.ADMIN, PrestoSQLParser.ALL, PrestoSQLParser.ANALYZE, PrestoSQLParser.ANY, PrestoSQLParser.ARRAY, PrestoSQLParser.ASC, PrestoSQLParser.AT, PrestoSQLParser.BERNOULLI, PrestoSQLParser.CALL, PrestoSQLParser.CALLED, PrestoSQLParser.CASCADE, PrestoSQLParser.CASE, PrestoSQLParser.CAST, PrestoSQLParser.CATALOGS, PrestoSQLParser.COLUMN, PrestoSQLParser.COLUMNS, PrestoSQLParser.COMMENT, PrestoSQLParser.COMMIT, PrestoSQLParser.COMMITTED, PrestoSQLParser.CURRENT, PrestoSQLParser.CURRENT_DATE, PrestoSQLParser.CURRENT_ROLE, PrestoSQLParser.CURRENT_TIME, PrestoSQLParser.CURRENT_TIMESTAMP, PrestoSQLParser.CURRENT_USER, PrestoSQLParser.DATA, PrestoSQLParser.DATE, PrestoSQLParser.DAY, PrestoSQLParser.DEFINER, PrestoSQLParser.DESC, PrestoSQLParser.DETERMINISTIC, PrestoSQLParser.DISTRIBUTED, PrestoSQLParser.EXCLUDING, PrestoSQLParser.EXISTS, PrestoSQLParser.EXPLAIN, PrestoSQLParser.EXTRACT, PrestoSQLParser.EXTERNAL, PrestoSQLParser.FALSE, PrestoSQLParser.FILTER, PrestoSQLParser.FIRST, PrestoSQLParser.FOLLOWING, PrestoSQLParser.FORMAT, PrestoSQLParser.FUNCTION, PrestoSQLParser.FUNCTIONS, PrestoSQLParser.GRANT, PrestoSQLParser.GRANTED, PrestoSQLParser.GRANTS, PrestoSQLParser.GRAPHVIZ, PrestoSQLParser.GROUPING, PrestoSQLParser.HOUR, PrestoSQLParser.IF, PrestoSQLParser.IGNORE, PrestoSQLParser.INCLUDING, PrestoSQLParser.INPUT, PrestoSQLParser.INTERVAL, PrestoSQLParser.INVOKER, PrestoSQLParser.IO, PrestoSQLParser.ISOLATION, PrestoSQLParser.JSON, PrestoSQLParser.LANGUAGE, PrestoSQLParser.LAST, PrestoSQLParser.LATERAL, PrestoSQLParser.LEVEL, PrestoSQLParser.LIMIT, PrestoSQLParser.LOCALTIME, PrestoSQLParser.LOCALTIMESTAMP, PrestoSQLParser.LOGICAL, PrestoSQLParser.MAP, PrestoSQLParser.MINUTE, PrestoSQLParser.MONTH, PrestoSQLParser.NAME, PrestoSQLParser.NFC, PrestoSQLParser.NFD, PrestoSQLParser.NFKC, PrestoSQLParser.NFKD, PrestoSQLParser.NO, PrestoSQLParser.NONE, PrestoSQLParser.NORMALIZE, PrestoSQLParser.NULL, PrestoSQLParser.NULLIF, PrestoSQLParser.NULLS, PrestoSQLParser.ONLY, PrestoSQLParser.OPTION, PrestoSQLParser.ORDINALITY, PrestoSQLParser.OUTPUT, PrestoSQLParser.OVER, PrestoSQLParser.PARTITION, PrestoSQLParser.PARTITIONS, PrestoSQLParser.POSITION, PrestoSQLParser.PRECEDING, PrestoSQLParser.PRIVILEGES, PrestoSQLParser.PROPERTIES, PrestoSQLParser.RANGE, PrestoSQLParser.READ, PrestoSQLParser.RENAME, PrestoSQLParser.REPEATABLE, PrestoSQLParser.REPLACE, PrestoSQLParser.RESET, PrestoSQLParser.RESPECT, PrestoSQLParser.RESTRICT, PrestoSQLParser.RETURN, PrestoSQLParser.RETURNS, PrestoSQLParser.REVOKE, PrestoSQLParser.ROLE, PrestoSQLParser.ROLES, PrestoSQLParser.ROLLBACK, PrestoSQLParser.ROW, PrestoSQLParser.ROWS, PrestoSQLParser.SCHEMA, PrestoSQLParser.SCHEMAS, PrestoSQLParser.SECOND, PrestoSQLParser.SECURITY, PrestoSQLParser.SERIALIZABLE, PrestoSQLParser.SESSION, PrestoSQLParser.SET, PrestoSQLParser.SETS, PrestoSQLParser.SHOW, PrestoSQLParser.SOME, PrestoSQLParser.SQL, PrestoSQLParser.START, PrestoSQLParser.STATS, PrestoSQLParser.SUBSTRING, PrestoSQLParser.SYSTEM, PrestoSQLParser.TABLES, PrestoSQLParser.TABLESAMPLE, PrestoSQLParser.TEXT, PrestoSQLParser.TIME, PrestoSQLParser.TIMESTAMP, PrestoSQLParser.TO, PrestoSQLParser.TRANSACTION, PrestoSQLParser.TRUE, PrestoSQLParser.TRY_CAST, PrestoSQLParser.TYPE, PrestoSQLParser.UNBOUNDED, PrestoSQLParser.UNCOMMITTED, PrestoSQLParser.USE, PrestoSQLParser.USER, PrestoSQLParser.VALIDATE, PrestoSQLParser.VERBOSE, PrestoSQLParser.VIEW, PrestoSQLParser.WORK, PrestoSQLParser.WRITE, PrestoSQLParser.YEAR, PrestoSQLParser.ZONE, PrestoSQLParser.PLUS, PrestoSQLParser.MINUS, PrestoSQLParser.STRING, PrestoSQLParser.UNICODE_STRING, PrestoSQLParser.BINARY_LITERAL, PrestoSQLParser.INTEGER_VALUE, PrestoSQLParser.DECIMAL_VALUE, PrestoSQLParser.DOUBLE_VALUE, PrestoSQLParser.IDENTIFIER, PrestoSQLParser.DIGIT_IDENTIFIER, PrestoSQLParser.QUOTED_IDENTIFIER, PrestoSQLParser.BACKQUOTED_IDENTIFIER, PrestoSQLParser.DOUBLE_PRECISION]:
                localctx = PrestoSQLParser.PredicatedContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1152
                localctx._valueExpression = self.valueExpression(0)
                self.state = 1154
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,147,self._ctx)
                if la_ == 1:
                    self.state = 1153
                    self.predicate(localctx._valueExpression)


                pass
            elif token in [PrestoSQLParser.NOT]:
                localctx = PrestoSQLParser.LogicalNotContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1156
                self.match(PrestoSQLParser.NOT)
                self.state = 1157
                self.booleanExpression(3)
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 1168
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,150,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1166
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,149,self._ctx)
                    if la_ == 1:
                        localctx = PrestoSQLParser.LogicalBinaryContext(self, PrestoSQLParser.BooleanExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_booleanExpression)
                        self.state = 1160
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1161
                        localctx.operator = self.match(PrestoSQLParser.AND)
                        self.state = 1162
                        localctx.right = self.booleanExpression(3)
                        pass

                    elif la_ == 2:
                        localctx = PrestoSQLParser.LogicalBinaryContext(self, PrestoSQLParser.BooleanExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_booleanExpression)
                        self.state = 1163
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 1164
                        localctx.operator = self.match(PrestoSQLParser.OR)
                        self.state = 1165
                        localctx.right = self.booleanExpression(2)
                        pass

             
                self.state = 1170
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,150,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PredicateContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, value:ParserRuleContext=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.value = None
            self.value = value


        def getRuleIndex(self):
            return PrestoSQLParser.RULE_predicate

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)
            self.value = ctx.value



    class ComparisonContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.PredicateContext
            super().__init__(parser)
            self.right = None # ValueExpressionContext
            self.copyFrom(ctx)

        def comparisonOperator(self):
            return self.getTypedRuleContext(PrestoSQLParser.ComparisonOperatorContext,0)

        def valueExpression(self):
            return self.getTypedRuleContext(PrestoSQLParser.ValueExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison" ):
                listener.enterComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison" ):
                listener.exitComparison(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparison" ):
                return visitor.visitComparison(self)
            else:
                return visitor.visitChildren(self)


    class LikeContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.PredicateContext
            super().__init__(parser)
            self.pattern = None # ValueExpressionContext
            self.escape = None # ValueExpressionContext
            self.copyFrom(ctx)

        def LIKE(self):
            return self.getToken(PrestoSQLParser.LIKE, 0)
        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrestoSQLParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(PrestoSQLParser.ValueExpressionContext,i)

        def NOT(self):
            return self.getToken(PrestoSQLParser.NOT, 0)
        def ESCAPE(self):
            return self.getToken(PrestoSQLParser.ESCAPE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLike" ):
                listener.enterLike(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLike" ):
                listener.exitLike(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLike" ):
                return visitor.visitLike(self)
            else:
                return visitor.visitChildren(self)


    class InSubqueryContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IN(self):
            return self.getToken(PrestoSQLParser.IN, 0)
        def query(self):
            return self.getTypedRuleContext(PrestoSQLParser.QueryContext,0)

        def NOT(self):
            return self.getToken(PrestoSQLParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInSubquery" ):
                listener.enterInSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInSubquery" ):
                listener.exitInSubquery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInSubquery" ):
                return visitor.visitInSubquery(self)
            else:
                return visitor.visitChildren(self)


    class DistinctFromContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.PredicateContext
            super().__init__(parser)
            self.right = None # ValueExpressionContext
            self.copyFrom(ctx)

        def IS(self):
            return self.getToken(PrestoSQLParser.IS, 0)
        def DISTINCT(self):
            return self.getToken(PrestoSQLParser.DISTINCT, 0)
        def FROM(self):
            return self.getToken(PrestoSQLParser.FROM, 0)
        def valueExpression(self):
            return self.getTypedRuleContext(PrestoSQLParser.ValueExpressionContext,0)

        def NOT(self):
            return self.getToken(PrestoSQLParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDistinctFrom" ):
                listener.enterDistinctFrom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDistinctFrom" ):
                listener.exitDistinctFrom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDistinctFrom" ):
                return visitor.visitDistinctFrom(self)
            else:
                return visitor.visitChildren(self)


    class InListContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IN(self):
            return self.getToken(PrestoSQLParser.IN, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrestoSQLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PrestoSQLParser.ExpressionContext,i)

        def NOT(self):
            return self.getToken(PrestoSQLParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInList" ):
                listener.enterInList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInList" ):
                listener.exitInList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInList" ):
                return visitor.visitInList(self)
            else:
                return visitor.visitChildren(self)


    class NullPredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IS(self):
            return self.getToken(PrestoSQLParser.IS, 0)
        def NULL(self):
            return self.getToken(PrestoSQLParser.NULL, 0)
        def NOT(self):
            return self.getToken(PrestoSQLParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullPredicate" ):
                listener.enterNullPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullPredicate" ):
                listener.exitNullPredicate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNullPredicate" ):
                return visitor.visitNullPredicate(self)
            else:
                return visitor.visitChildren(self)


    class BetweenContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.PredicateContext
            super().__init__(parser)
            self.lower = None # ValueExpressionContext
            self.upper = None # ValueExpressionContext
            self.copyFrom(ctx)

        def BETWEEN(self):
            return self.getToken(PrestoSQLParser.BETWEEN, 0)
        def AND(self):
            return self.getToken(PrestoSQLParser.AND, 0)
        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrestoSQLParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(PrestoSQLParser.ValueExpressionContext,i)

        def NOT(self):
            return self.getToken(PrestoSQLParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBetween" ):
                listener.enterBetween(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBetween" ):
                listener.exitBetween(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBetween" ):
                return visitor.visitBetween(self)
            else:
                return visitor.visitChildren(self)


    class QuantifiedComparisonContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def comparisonOperator(self):
            return self.getTypedRuleContext(PrestoSQLParser.ComparisonOperatorContext,0)

        def comparisonQuantifier(self):
            return self.getTypedRuleContext(PrestoSQLParser.ComparisonQuantifierContext,0)

        def query(self):
            return self.getTypedRuleContext(PrestoSQLParser.QueryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantifiedComparison" ):
                listener.enterQuantifiedComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantifiedComparison" ):
                listener.exitQuantifiedComparison(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuantifiedComparison" ):
                return visitor.visitQuantifiedComparison(self)
            else:
                return visitor.visitChildren(self)



    def predicate(self, value:ParserRuleContext):

        localctx = PrestoSQLParser.PredicateContext(self, self._ctx, self.state, value)
        self.enterRule(localctx, 88, self.RULE_predicate)
        self._la = 0 # Token type
        try:
            self.state = 1232
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,159,self._ctx)
            if la_ == 1:
                localctx = PrestoSQLParser.ComparisonContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1171
                self.comparisonOperator()
                self.state = 1172
                localctx.right = self.valueExpression(0)
                pass

            elif la_ == 2:
                localctx = PrestoSQLParser.QuantifiedComparisonContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1174
                self.comparisonOperator()
                self.state = 1175
                self.comparisonQuantifier()
                self.state = 1176
                self.match(PrestoSQLParser.T__1)
                self.state = 1177
                self.query()
                self.state = 1178
                self.match(PrestoSQLParser.T__2)
                pass

            elif la_ == 3:
                localctx = PrestoSQLParser.BetweenContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1181
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PrestoSQLParser.NOT:
                    self.state = 1180
                    self.match(PrestoSQLParser.NOT)


                self.state = 1183
                self.match(PrestoSQLParser.BETWEEN)
                self.state = 1184
                localctx.lower = self.valueExpression(0)
                self.state = 1185
                self.match(PrestoSQLParser.AND)
                self.state = 1186
                localctx.upper = self.valueExpression(0)
                pass

            elif la_ == 4:
                localctx = PrestoSQLParser.InListContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1189
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PrestoSQLParser.NOT:
                    self.state = 1188
                    self.match(PrestoSQLParser.NOT)


                self.state = 1191
                self.match(PrestoSQLParser.IN)
                self.state = 1192
                self.match(PrestoSQLParser.T__1)
                self.state = 1193
                self.expression()
                self.state = 1198
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PrestoSQLParser.T__3:
                    self.state = 1194
                    self.match(PrestoSQLParser.T__3)
                    self.state = 1195
                    self.expression()
                    self.state = 1200
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1201
                self.match(PrestoSQLParser.T__2)
                pass

            elif la_ == 5:
                localctx = PrestoSQLParser.InSubqueryContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1204
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PrestoSQLParser.NOT:
                    self.state = 1203
                    self.match(PrestoSQLParser.NOT)


                self.state = 1206
                self.match(PrestoSQLParser.IN)
                self.state = 1207
                self.match(PrestoSQLParser.T__1)
                self.state = 1208
                self.query()
                self.state = 1209
                self.match(PrestoSQLParser.T__2)
                pass

            elif la_ == 6:
                localctx = PrestoSQLParser.LikeContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 1212
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PrestoSQLParser.NOT:
                    self.state = 1211
                    self.match(PrestoSQLParser.NOT)


                self.state = 1214
                self.match(PrestoSQLParser.LIKE)
                self.state = 1215
                localctx.pattern = self.valueExpression(0)
                self.state = 1218
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,156,self._ctx)
                if la_ == 1:
                    self.state = 1216
                    self.match(PrestoSQLParser.ESCAPE)
                    self.state = 1217
                    localctx.escape = self.valueExpression(0)


                pass

            elif la_ == 7:
                localctx = PrestoSQLParser.NullPredicateContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 1220
                self.match(PrestoSQLParser.IS)
                self.state = 1222
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PrestoSQLParser.NOT:
                    self.state = 1221
                    self.match(PrestoSQLParser.NOT)


                self.state = 1224
                self.match(PrestoSQLParser.NULL)
                pass

            elif la_ == 8:
                localctx = PrestoSQLParser.DistinctFromContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 1225
                self.match(PrestoSQLParser.IS)
                self.state = 1227
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PrestoSQLParser.NOT:
                    self.state = 1226
                    self.match(PrestoSQLParser.NOT)


                self.state = 1229
                self.match(PrestoSQLParser.DISTINCT)
                self.state = 1230
                self.match(PrestoSQLParser.FROM)
                self.state = 1231
                localctx.right = self.valueExpression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValueExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PrestoSQLParser.RULE_valueExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class ValueExpressionDefaultContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.ValueExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(PrestoSQLParser.PrimaryExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValueExpressionDefault" ):
                listener.enterValueExpressionDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValueExpressionDefault" ):
                listener.exitValueExpressionDefault(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitValueExpressionDefault" ):
                return visitor.visitValueExpressionDefault(self)
            else:
                return visitor.visitChildren(self)


    class ConcatenationContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.ValueExpressionContext
            super().__init__(parser)
            self.left = None # ValueExpressionContext
            self.right = None # ValueExpressionContext
            self.copyFrom(ctx)

        def CONCAT(self):
            return self.getToken(PrestoSQLParser.CONCAT, 0)
        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrestoSQLParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(PrestoSQLParser.ValueExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConcatenation" ):
                listener.enterConcatenation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConcatenation" ):
                listener.exitConcatenation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConcatenation" ):
                return visitor.visitConcatenation(self)
            else:
                return visitor.visitChildren(self)


    class ArithmeticBinaryContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.ValueExpressionContext
            super().__init__(parser)
            self.left = None # ValueExpressionContext
            self.operator = None # Token
            self.right = None # ValueExpressionContext
            self.copyFrom(ctx)

        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrestoSQLParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(PrestoSQLParser.ValueExpressionContext,i)

        def ASTERISK(self):
            return self.getToken(PrestoSQLParser.ASTERISK, 0)
        def SLASH(self):
            return self.getToken(PrestoSQLParser.SLASH, 0)
        def PERCENT(self):
            return self.getToken(PrestoSQLParser.PERCENT, 0)
        def PLUS(self):
            return self.getToken(PrestoSQLParser.PLUS, 0)
        def MINUS(self):
            return self.getToken(PrestoSQLParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithmeticBinary" ):
                listener.enterArithmeticBinary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithmeticBinary" ):
                listener.exitArithmeticBinary(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArithmeticBinary" ):
                return visitor.visitArithmeticBinary(self)
            else:
                return visitor.visitChildren(self)


    class ArithmeticUnaryContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.ValueExpressionContext
            super().__init__(parser)
            self.operator = None # Token
            self.copyFrom(ctx)

        def valueExpression(self):
            return self.getTypedRuleContext(PrestoSQLParser.ValueExpressionContext,0)

        def MINUS(self):
            return self.getToken(PrestoSQLParser.MINUS, 0)
        def PLUS(self):
            return self.getToken(PrestoSQLParser.PLUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithmeticUnary" ):
                listener.enterArithmeticUnary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithmeticUnary" ):
                listener.exitArithmeticUnary(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArithmeticUnary" ):
                return visitor.visitArithmeticUnary(self)
            else:
                return visitor.visitChildren(self)


    class AtTimeZoneContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.ValueExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueExpression(self):
            return self.getTypedRuleContext(PrestoSQLParser.ValueExpressionContext,0)

        def AT(self):
            return self.getToken(PrestoSQLParser.AT, 0)
        def timeZoneSpecifier(self):
            return self.getTypedRuleContext(PrestoSQLParser.TimeZoneSpecifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtTimeZone" ):
                listener.enterAtTimeZone(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtTimeZone" ):
                listener.exitAtTimeZone(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtTimeZone" ):
                return visitor.visitAtTimeZone(self)
            else:
                return visitor.visitChildren(self)



    def valueExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PrestoSQLParser.ValueExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 90
        self.enterRecursionRule(localctx, 90, self.RULE_valueExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1238
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PrestoSQLParser.T__1, PrestoSQLParser.T__4, PrestoSQLParser.ADD, PrestoSQLParser.ADMIN, PrestoSQLParser.ALL, PrestoSQLParser.ANALYZE, PrestoSQLParser.ANY, PrestoSQLParser.ARRAY, PrestoSQLParser.ASC, PrestoSQLParser.AT, PrestoSQLParser.BERNOULLI, PrestoSQLParser.CALL, PrestoSQLParser.CALLED, PrestoSQLParser.CASCADE, PrestoSQLParser.CASE, PrestoSQLParser.CAST, PrestoSQLParser.CATALOGS, PrestoSQLParser.COLUMN, PrestoSQLParser.COLUMNS, PrestoSQLParser.COMMENT, PrestoSQLParser.COMMIT, PrestoSQLParser.COMMITTED, PrestoSQLParser.CURRENT, PrestoSQLParser.CURRENT_DATE, PrestoSQLParser.CURRENT_ROLE, PrestoSQLParser.CURRENT_TIME, PrestoSQLParser.CURRENT_TIMESTAMP, PrestoSQLParser.CURRENT_USER, PrestoSQLParser.DATA, PrestoSQLParser.DATE, PrestoSQLParser.DAY, PrestoSQLParser.DEFINER, PrestoSQLParser.DESC, PrestoSQLParser.DETERMINISTIC, PrestoSQLParser.DISTRIBUTED, PrestoSQLParser.EXCLUDING, PrestoSQLParser.EXISTS, PrestoSQLParser.EXPLAIN, PrestoSQLParser.EXTRACT, PrestoSQLParser.EXTERNAL, PrestoSQLParser.FALSE, PrestoSQLParser.FILTER, PrestoSQLParser.FIRST, PrestoSQLParser.FOLLOWING, PrestoSQLParser.FORMAT, PrestoSQLParser.FUNCTION, PrestoSQLParser.FUNCTIONS, PrestoSQLParser.GRANT, PrestoSQLParser.GRANTED, PrestoSQLParser.GRANTS, PrestoSQLParser.GRAPHVIZ, PrestoSQLParser.GROUPING, PrestoSQLParser.HOUR, PrestoSQLParser.IF, PrestoSQLParser.IGNORE, PrestoSQLParser.INCLUDING, PrestoSQLParser.INPUT, PrestoSQLParser.INTERVAL, PrestoSQLParser.INVOKER, PrestoSQLParser.IO, PrestoSQLParser.ISOLATION, PrestoSQLParser.JSON, PrestoSQLParser.LANGUAGE, PrestoSQLParser.LAST, PrestoSQLParser.LATERAL, PrestoSQLParser.LEVEL, PrestoSQLParser.LIMIT, PrestoSQLParser.LOCALTIME, PrestoSQLParser.LOCALTIMESTAMP, PrestoSQLParser.LOGICAL, PrestoSQLParser.MAP, PrestoSQLParser.MINUTE, PrestoSQLParser.MONTH, PrestoSQLParser.NAME, PrestoSQLParser.NFC, PrestoSQLParser.NFD, PrestoSQLParser.NFKC, PrestoSQLParser.NFKD, PrestoSQLParser.NO, PrestoSQLParser.NONE, PrestoSQLParser.NORMALIZE, PrestoSQLParser.NULL, PrestoSQLParser.NULLIF, PrestoSQLParser.NULLS, PrestoSQLParser.ONLY, PrestoSQLParser.OPTION, PrestoSQLParser.ORDINALITY, PrestoSQLParser.OUTPUT, PrestoSQLParser.OVER, PrestoSQLParser.PARTITION, PrestoSQLParser.PARTITIONS, PrestoSQLParser.POSITION, PrestoSQLParser.PRECEDING, PrestoSQLParser.PRIVILEGES, PrestoSQLParser.PROPERTIES, PrestoSQLParser.RANGE, PrestoSQLParser.READ, PrestoSQLParser.RENAME, PrestoSQLParser.REPEATABLE, PrestoSQLParser.REPLACE, PrestoSQLParser.RESET, PrestoSQLParser.RESPECT, PrestoSQLParser.RESTRICT, PrestoSQLParser.RETURN, PrestoSQLParser.RETURNS, PrestoSQLParser.REVOKE, PrestoSQLParser.ROLE, PrestoSQLParser.ROLES, PrestoSQLParser.ROLLBACK, PrestoSQLParser.ROW, PrestoSQLParser.ROWS, PrestoSQLParser.SCHEMA, PrestoSQLParser.SCHEMAS, PrestoSQLParser.SECOND, PrestoSQLParser.SECURITY, PrestoSQLParser.SERIALIZABLE, PrestoSQLParser.SESSION, PrestoSQLParser.SET, PrestoSQLParser.SETS, PrestoSQLParser.SHOW, PrestoSQLParser.SOME, PrestoSQLParser.SQL, PrestoSQLParser.START, PrestoSQLParser.STATS, PrestoSQLParser.SUBSTRING, PrestoSQLParser.SYSTEM, PrestoSQLParser.TABLES, PrestoSQLParser.TABLESAMPLE, PrestoSQLParser.TEXT, PrestoSQLParser.TIME, PrestoSQLParser.TIMESTAMP, PrestoSQLParser.TO, PrestoSQLParser.TRANSACTION, PrestoSQLParser.TRUE, PrestoSQLParser.TRY_CAST, PrestoSQLParser.TYPE, PrestoSQLParser.UNBOUNDED, PrestoSQLParser.UNCOMMITTED, PrestoSQLParser.USE, PrestoSQLParser.USER, PrestoSQLParser.VALIDATE, PrestoSQLParser.VERBOSE, PrestoSQLParser.VIEW, PrestoSQLParser.WORK, PrestoSQLParser.WRITE, PrestoSQLParser.YEAR, PrestoSQLParser.ZONE, PrestoSQLParser.STRING, PrestoSQLParser.UNICODE_STRING, PrestoSQLParser.BINARY_LITERAL, PrestoSQLParser.INTEGER_VALUE, PrestoSQLParser.DECIMAL_VALUE, PrestoSQLParser.DOUBLE_VALUE, PrestoSQLParser.IDENTIFIER, PrestoSQLParser.DIGIT_IDENTIFIER, PrestoSQLParser.QUOTED_IDENTIFIER, PrestoSQLParser.BACKQUOTED_IDENTIFIER, PrestoSQLParser.DOUBLE_PRECISION]:
                localctx = PrestoSQLParser.ValueExpressionDefaultContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1235
                self.primaryExpression(0)
                pass
            elif token in [PrestoSQLParser.PLUS, PrestoSQLParser.MINUS]:
                localctx = PrestoSQLParser.ArithmeticUnaryContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1236
                localctx.operator = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==PrestoSQLParser.PLUS or _la==PrestoSQLParser.MINUS):
                    localctx.operator = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1237
                self.valueExpression(4)
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 1254
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,162,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1252
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,161,self._ctx)
                    if la_ == 1:
                        localctx = PrestoSQLParser.ArithmeticBinaryContext(self, PrestoSQLParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 1240
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1241
                        localctx.operator = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 217)) & ~0x3f) == 0 and ((1 << (_la - 217)) & ((1 << (PrestoSQLParser.ASTERISK - 217)) | (1 << (PrestoSQLParser.SLASH - 217)) | (1 << (PrestoSQLParser.PERCENT - 217)))) != 0)):
                            localctx.operator = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1242
                        localctx.right = self.valueExpression(4)
                        pass

                    elif la_ == 2:
                        localctx = PrestoSQLParser.ArithmeticBinaryContext(self, PrestoSQLParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 1243
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1244
                        localctx.operator = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==PrestoSQLParser.PLUS or _la==PrestoSQLParser.MINUS):
                            localctx.operator = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1245
                        localctx.right = self.valueExpression(3)
                        pass

                    elif la_ == 3:
                        localctx = PrestoSQLParser.ConcatenationContext(self, PrestoSQLParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 1246
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 1247
                        self.match(PrestoSQLParser.CONCAT)
                        self.state = 1248
                        localctx.right = self.valueExpression(2)
                        pass

                    elif la_ == 4:
                        localctx = PrestoSQLParser.AtTimeZoneContext(self, PrestoSQLParser.ValueExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 1249
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1250
                        self.match(PrestoSQLParser.AT)
                        self.state = 1251
                        self.timeZoneSpecifier()
                        pass

             
                self.state = 1256
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,162,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PrimaryExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PrestoSQLParser.RULE_primaryExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class DereferenceContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.PrimaryExpressionContext
            super().__init__(parser)
            self.base = None # PrimaryExpressionContext
            self.fieldName = None # IdentifierContext
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(PrestoSQLParser.PrimaryExpressionContext,0)

        def identifier(self):
            return self.getTypedRuleContext(PrestoSQLParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDereference" ):
                listener.enterDereference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDereference" ):
                listener.exitDereference(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDereference" ):
                return visitor.visitDereference(self)
            else:
                return visitor.visitChildren(self)


    class TypeConstructorContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(PrestoSQLParser.IdentifierContext,0)

        def string(self):
            return self.getTypedRuleContext(PrestoSQLParser.StringContext,0)

        def DOUBLE_PRECISION(self):
            return self.getToken(PrestoSQLParser.DOUBLE_PRECISION, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeConstructor" ):
                listener.enterTypeConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeConstructor" ):
                listener.exitTypeConstructor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeConstructor" ):
                return visitor.visitTypeConstructor(self)
            else:
                return visitor.visitChildren(self)


    class SpecialDateTimeFunctionContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.PrimaryExpressionContext
            super().__init__(parser)
            self.name = None # Token
            self.precision = None # Token
            self.copyFrom(ctx)

        def CURRENT_DATE(self):
            return self.getToken(PrestoSQLParser.CURRENT_DATE, 0)
        def CURRENT_TIME(self):
            return self.getToken(PrestoSQLParser.CURRENT_TIME, 0)
        def INTEGER_VALUE(self):
            return self.getToken(PrestoSQLParser.INTEGER_VALUE, 0)
        def CURRENT_TIMESTAMP(self):
            return self.getToken(PrestoSQLParser.CURRENT_TIMESTAMP, 0)
        def LOCALTIME(self):
            return self.getToken(PrestoSQLParser.LOCALTIME, 0)
        def LOCALTIMESTAMP(self):
            return self.getToken(PrestoSQLParser.LOCALTIMESTAMP, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecialDateTimeFunction" ):
                listener.enterSpecialDateTimeFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecialDateTimeFunction" ):
                listener.exitSpecialDateTimeFunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSpecialDateTimeFunction" ):
                return visitor.visitSpecialDateTimeFunction(self)
            else:
                return visitor.visitChildren(self)


    class SubstringContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SUBSTRING(self):
            return self.getToken(PrestoSQLParser.SUBSTRING, 0)
        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrestoSQLParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(PrestoSQLParser.ValueExpressionContext,i)

        def FROM(self):
            return self.getToken(PrestoSQLParser.FROM, 0)
        def FOR(self):
            return self.getToken(PrestoSQLParser.FOR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubstring" ):
                listener.enterSubstring(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubstring" ):
                listener.exitSubstring(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubstring" ):
                return visitor.visitSubstring(self)
            else:
                return visitor.visitChildren(self)


    class CastContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CAST(self):
            return self.getToken(PrestoSQLParser.CAST, 0)
        def expression(self):
            return self.getTypedRuleContext(PrestoSQLParser.ExpressionContext,0)

        def AS(self):
            return self.getToken(PrestoSQLParser.AS, 0)
        def r_type(self):
            return self.getTypedRuleContext(PrestoSQLParser.R_typeContext,0)

        def TRY_CAST(self):
            return self.getToken(PrestoSQLParser.TRY_CAST, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCast" ):
                listener.enterCast(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCast" ):
                listener.exitCast(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCast" ):
                return visitor.visitCast(self)
            else:
                return visitor.visitChildren(self)


    class LambdaContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrestoSQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(PrestoSQLParser.IdentifierContext,i)

        def expression(self):
            return self.getTypedRuleContext(PrestoSQLParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambda" ):
                listener.enterLambda(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambda" ):
                listener.exitLambda(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambda" ):
                return visitor.visitLambda(self)
            else:
                return visitor.visitChildren(self)


    class ParenthesizedExpressionContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(PrestoSQLParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesizedExpression" ):
                listener.enterParenthesizedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesizedExpression" ):
                listener.exitParenthesizedExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParenthesizedExpression" ):
                return visitor.visitParenthesizedExpression(self)
            else:
                return visitor.visitChildren(self)


    class ParameterContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter" ):
                listener.enterParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter" ):
                listener.exitParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameter" ):
                return visitor.visitParameter(self)
            else:
                return visitor.visitChildren(self)


    class NormalizeContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NORMALIZE(self):
            return self.getToken(PrestoSQLParser.NORMALIZE, 0)
        def valueExpression(self):
            return self.getTypedRuleContext(PrestoSQLParser.ValueExpressionContext,0)

        def normalForm(self):
            return self.getTypedRuleContext(PrestoSQLParser.NormalFormContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNormalize" ):
                listener.enterNormalize(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNormalize" ):
                listener.exitNormalize(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNormalize" ):
                return visitor.visitNormalize(self)
            else:
                return visitor.visitChildren(self)


    class IntervalLiteralContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def interval(self):
            return self.getTypedRuleContext(PrestoSQLParser.IntervalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalLiteral" ):
                listener.enterIntervalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalLiteral" ):
                listener.exitIntervalLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntervalLiteral" ):
                return visitor.visitIntervalLiteral(self)
            else:
                return visitor.visitChildren(self)


    class NumericLiteralContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def number(self):
            return self.getTypedRuleContext(PrestoSQLParser.NumberContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumericLiteral" ):
                listener.enterNumericLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumericLiteral" ):
                listener.exitNumericLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumericLiteral" ):
                return visitor.visitNumericLiteral(self)
            else:
                return visitor.visitChildren(self)


    class BooleanLiteralContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def booleanValue(self):
            return self.getTypedRuleContext(PrestoSQLParser.BooleanValueContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanLiteral" ):
                listener.enterBooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanLiteral" ):
                listener.exitBooleanLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanLiteral" ):
                return visitor.visitBooleanLiteral(self)
            else:
                return visitor.visitChildren(self)


    class SimpleCaseContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.PrimaryExpressionContext
            super().__init__(parser)
            self.elseExpression = None # ExpressionContext
            self.copyFrom(ctx)

        def CASE(self):
            return self.getToken(PrestoSQLParser.CASE, 0)
        def valueExpression(self):
            return self.getTypedRuleContext(PrestoSQLParser.ValueExpressionContext,0)

        def END(self):
            return self.getToken(PrestoSQLParser.END, 0)
        def whenClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrestoSQLParser.WhenClauseContext)
            else:
                return self.getTypedRuleContext(PrestoSQLParser.WhenClauseContext,i)

        def ELSE(self):
            return self.getToken(PrestoSQLParser.ELSE, 0)
        def expression(self):
            return self.getTypedRuleContext(PrestoSQLParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleCase" ):
                listener.enterSimpleCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleCase" ):
                listener.exitSimpleCase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleCase" ):
                return visitor.visitSimpleCase(self)
            else:
                return visitor.visitChildren(self)


    class ColumnReferenceContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(PrestoSQLParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnReference" ):
                listener.enterColumnReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnReference" ):
                listener.exitColumnReference(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnReference" ):
                return visitor.visitColumnReference(self)
            else:
                return visitor.visitChildren(self)


    class NullLiteralContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NULL(self):
            return self.getToken(PrestoSQLParser.NULL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullLiteral" ):
                listener.enterNullLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullLiteral" ):
                listener.exitNullLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNullLiteral" ):
                return visitor.visitNullLiteral(self)
            else:
                return visitor.visitChildren(self)


    class RowConstructorContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrestoSQLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PrestoSQLParser.ExpressionContext,i)

        def ROW(self):
            return self.getToken(PrestoSQLParser.ROW, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowConstructor" ):
                listener.enterRowConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowConstructor" ):
                listener.exitRowConstructor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRowConstructor" ):
                return visitor.visitRowConstructor(self)
            else:
                return visitor.visitChildren(self)


    class SubscriptContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.PrimaryExpressionContext
            super().__init__(parser)
            self.value = None # PrimaryExpressionContext
            self.index = None # ValueExpressionContext
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(PrestoSQLParser.PrimaryExpressionContext,0)

        def valueExpression(self):
            return self.getTypedRuleContext(PrestoSQLParser.ValueExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscript" ):
                listener.enterSubscript(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscript" ):
                listener.exitSubscript(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubscript" ):
                return visitor.visitSubscript(self)
            else:
                return visitor.visitChildren(self)


    class SubqueryExpressionContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def query(self):
            return self.getTypedRuleContext(PrestoSQLParser.QueryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubqueryExpression" ):
                listener.enterSubqueryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubqueryExpression" ):
                listener.exitSubqueryExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubqueryExpression" ):
                return visitor.visitSubqueryExpression(self)
            else:
                return visitor.visitChildren(self)


    class BinaryLiteralContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BINARY_LITERAL(self):
            return self.getToken(PrestoSQLParser.BINARY_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinaryLiteral" ):
                listener.enterBinaryLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinaryLiteral" ):
                listener.exitBinaryLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBinaryLiteral" ):
                return visitor.visitBinaryLiteral(self)
            else:
                return visitor.visitChildren(self)


    class CurrentUserContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.PrimaryExpressionContext
            super().__init__(parser)
            self.name = None # Token
            self.copyFrom(ctx)

        def CURRENT_USER(self):
            return self.getToken(PrestoSQLParser.CURRENT_USER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCurrentUser" ):
                listener.enterCurrentUser(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCurrentUser" ):
                listener.exitCurrentUser(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCurrentUser" ):
                return visitor.visitCurrentUser(self)
            else:
                return visitor.visitChildren(self)


    class ExtractContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXTRACT(self):
            return self.getToken(PrestoSQLParser.EXTRACT, 0)
        def identifier(self):
            return self.getTypedRuleContext(PrestoSQLParser.IdentifierContext,0)

        def FROM(self):
            return self.getToken(PrestoSQLParser.FROM, 0)
        def valueExpression(self):
            return self.getTypedRuleContext(PrestoSQLParser.ValueExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtract" ):
                listener.enterExtract(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtract" ):
                listener.exitExtract(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExtract" ):
                return visitor.visitExtract(self)
            else:
                return visitor.visitChildren(self)


    class StringLiteralContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def string(self):
            return self.getTypedRuleContext(PrestoSQLParser.StringContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteral" ):
                listener.enterStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteral" ):
                listener.exitStringLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringLiteral" ):
                return visitor.visitStringLiteral(self)
            else:
                return visitor.visitChildren(self)


    class ArrayConstructorContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ARRAY(self):
            return self.getToken(PrestoSQLParser.ARRAY, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrestoSQLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PrestoSQLParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayConstructor" ):
                listener.enterArrayConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayConstructor" ):
                listener.exitArrayConstructor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayConstructor" ):
                return visitor.visitArrayConstructor(self)
            else:
                return visitor.visitChildren(self)


    class FunctionCallContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def qualifiedName(self):
            return self.getTypedRuleContext(PrestoSQLParser.QualifiedNameContext,0)

        def ASTERISK(self):
            return self.getToken(PrestoSQLParser.ASTERISK, 0)
        def r_filter(self):
            return self.getTypedRuleContext(PrestoSQLParser.R_filterContext,0)

        def over(self):
            return self.getTypedRuleContext(PrestoSQLParser.OverContext,0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrestoSQLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PrestoSQLParser.ExpressionContext,i)

        def ORDER(self):
            return self.getToken(PrestoSQLParser.ORDER, 0)
        def BY(self):
            return self.getToken(PrestoSQLParser.BY, 0)
        def sortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrestoSQLParser.SortItemContext)
            else:
                return self.getTypedRuleContext(PrestoSQLParser.SortItemContext,i)

        def setQuantifier(self):
            return self.getTypedRuleContext(PrestoSQLParser.SetQuantifierContext,0)

        def nullTreatment(self):
            return self.getTypedRuleContext(PrestoSQLParser.NullTreatmentContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCall" ):
                listener.enterFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCall" ):
                listener.exitFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionCall" ):
                return visitor.visitFunctionCall(self)
            else:
                return visitor.visitChildren(self)


    class ExistsContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXISTS(self):
            return self.getToken(PrestoSQLParser.EXISTS, 0)
        def query(self):
            return self.getTypedRuleContext(PrestoSQLParser.QueryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExists" ):
                listener.enterExists(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExists" ):
                listener.exitExists(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExists" ):
                return visitor.visitExists(self)
            else:
                return visitor.visitChildren(self)


    class PositionContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def POSITION(self):
            return self.getToken(PrestoSQLParser.POSITION, 0)
        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrestoSQLParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(PrestoSQLParser.ValueExpressionContext,i)

        def IN(self):
            return self.getToken(PrestoSQLParser.IN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPosition" ):
                listener.enterPosition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPosition" ):
                listener.exitPosition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPosition" ):
                return visitor.visitPosition(self)
            else:
                return visitor.visitChildren(self)


    class SearchedCaseContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.PrimaryExpressionContext
            super().__init__(parser)
            self.elseExpression = None # ExpressionContext
            self.copyFrom(ctx)

        def CASE(self):
            return self.getToken(PrestoSQLParser.CASE, 0)
        def END(self):
            return self.getToken(PrestoSQLParser.END, 0)
        def whenClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrestoSQLParser.WhenClauseContext)
            else:
                return self.getTypedRuleContext(PrestoSQLParser.WhenClauseContext,i)

        def ELSE(self):
            return self.getToken(PrestoSQLParser.ELSE, 0)
        def expression(self):
            return self.getTypedRuleContext(PrestoSQLParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearchedCase" ):
                listener.enterSearchedCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearchedCase" ):
                listener.exitSearchedCase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSearchedCase" ):
                return visitor.visitSearchedCase(self)
            else:
                return visitor.visitChildren(self)


    class GroupingOperationContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def GROUPING(self):
            return self.getToken(PrestoSQLParser.GROUPING, 0)
        def qualifiedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrestoSQLParser.QualifiedNameContext)
            else:
                return self.getTypedRuleContext(PrestoSQLParser.QualifiedNameContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupingOperation" ):
                listener.enterGroupingOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupingOperation" ):
                listener.exitGroupingOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroupingOperation" ):
                return visitor.visitGroupingOperation(self)
            else:
                return visitor.visitChildren(self)



    def primaryExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PrestoSQLParser.PrimaryExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 92
        self.enterRecursionRule(localctx, 92, self.RULE_primaryExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1496
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,191,self._ctx)
            if la_ == 1:
                localctx = PrestoSQLParser.NullLiteralContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1258
                self.match(PrestoSQLParser.NULL)
                pass

            elif la_ == 2:
                localctx = PrestoSQLParser.IntervalLiteralContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1259
                self.interval()
                pass

            elif la_ == 3:
                localctx = PrestoSQLParser.TypeConstructorContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1260
                self.identifier()
                self.state = 1261
                self.string()
                pass

            elif la_ == 4:
                localctx = PrestoSQLParser.TypeConstructorContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1263
                self.match(PrestoSQLParser.DOUBLE_PRECISION)
                self.state = 1264
                self.string()
                pass

            elif la_ == 5:
                localctx = PrestoSQLParser.NumericLiteralContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1265
                self.number()
                pass

            elif la_ == 6:
                localctx = PrestoSQLParser.BooleanLiteralContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1266
                self.booleanValue()
                pass

            elif la_ == 7:
                localctx = PrestoSQLParser.StringLiteralContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1267
                self.string()
                pass

            elif la_ == 8:
                localctx = PrestoSQLParser.BinaryLiteralContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1268
                self.match(PrestoSQLParser.BINARY_LITERAL)
                pass

            elif la_ == 9:
                localctx = PrestoSQLParser.ParameterContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1269
                self.match(PrestoSQLParser.T__4)
                pass

            elif la_ == 10:
                localctx = PrestoSQLParser.PositionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1270
                self.match(PrestoSQLParser.POSITION)
                self.state = 1271
                self.match(PrestoSQLParser.T__1)
                self.state = 1272
                self.valueExpression(0)
                self.state = 1273
                self.match(PrestoSQLParser.IN)
                self.state = 1274
                self.valueExpression(0)
                self.state = 1275
                self.match(PrestoSQLParser.T__2)
                pass

            elif la_ == 11:
                localctx = PrestoSQLParser.RowConstructorContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1277
                self.match(PrestoSQLParser.T__1)
                self.state = 1278
                self.expression()
                self.state = 1281 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1279
                    self.match(PrestoSQLParser.T__3)
                    self.state = 1280
                    self.expression()
                    self.state = 1283 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==PrestoSQLParser.T__3):
                        break

                self.state = 1285
                self.match(PrestoSQLParser.T__2)
                pass

            elif la_ == 12:
                localctx = PrestoSQLParser.RowConstructorContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1287
                self.match(PrestoSQLParser.ROW)
                self.state = 1288
                self.match(PrestoSQLParser.T__1)
                self.state = 1289
                self.expression()
                self.state = 1294
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PrestoSQLParser.T__3:
                    self.state = 1290
                    self.match(PrestoSQLParser.T__3)
                    self.state = 1291
                    self.expression()
                    self.state = 1296
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1297
                self.match(PrestoSQLParser.T__2)
                pass

            elif la_ == 13:
                localctx = PrestoSQLParser.FunctionCallContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1299
                self.qualifiedName()
                self.state = 1300
                self.match(PrestoSQLParser.T__1)
                self.state = 1301
                self.match(PrestoSQLParser.ASTERISK)
                self.state = 1302
                self.match(PrestoSQLParser.T__2)
                self.state = 1304
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,165,self._ctx)
                if la_ == 1:
                    self.state = 1303
                    self.r_filter()


                self.state = 1307
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,166,self._ctx)
                if la_ == 1:
                    self.state = 1306
                    self.over()


                pass

            elif la_ == 14:
                localctx = PrestoSQLParser.FunctionCallContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1309
                self.qualifiedName()
                self.state = 1310
                self.match(PrestoSQLParser.T__1)
                self.state = 1322
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PrestoSQLParser.T__1) | (1 << PrestoSQLParser.T__4) | (1 << PrestoSQLParser.ADD) | (1 << PrestoSQLParser.ADMIN) | (1 << PrestoSQLParser.ALL) | (1 << PrestoSQLParser.ANALYZE) | (1 << PrestoSQLParser.ANY) | (1 << PrestoSQLParser.ARRAY) | (1 << PrestoSQLParser.ASC) | (1 << PrestoSQLParser.AT) | (1 << PrestoSQLParser.BERNOULLI) | (1 << PrestoSQLParser.CALL) | (1 << PrestoSQLParser.CALLED) | (1 << PrestoSQLParser.CASCADE) | (1 << PrestoSQLParser.CASE) | (1 << PrestoSQLParser.CAST) | (1 << PrestoSQLParser.CATALOGS) | (1 << PrestoSQLParser.COLUMN) | (1 << PrestoSQLParser.COLUMNS) | (1 << PrestoSQLParser.COMMENT) | (1 << PrestoSQLParser.COMMIT) | (1 << PrestoSQLParser.COMMITTED) | (1 << PrestoSQLParser.CURRENT) | (1 << PrestoSQLParser.CURRENT_DATE) | (1 << PrestoSQLParser.CURRENT_ROLE) | (1 << PrestoSQLParser.CURRENT_TIME) | (1 << PrestoSQLParser.CURRENT_TIMESTAMP) | (1 << PrestoSQLParser.CURRENT_USER) | (1 << PrestoSQLParser.DATA) | (1 << PrestoSQLParser.DATE) | (1 << PrestoSQLParser.DAY) | (1 << PrestoSQLParser.DEFINER) | (1 << PrestoSQLParser.DESC) | (1 << PrestoSQLParser.DETERMINISTIC) | (1 << PrestoSQLParser.DISTINCT) | (1 << PrestoSQLParser.DISTRIBUTED) | (1 << PrestoSQLParser.EXCLUDING) | (1 << PrestoSQLParser.EXISTS))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PrestoSQLParser.EXPLAIN - 64)) | (1 << (PrestoSQLParser.EXTRACT - 64)) | (1 << (PrestoSQLParser.EXTERNAL - 64)) | (1 << (PrestoSQLParser.FALSE - 64)) | (1 << (PrestoSQLParser.FILTER - 64)) | (1 << (PrestoSQLParser.FIRST - 64)) | (1 << (PrestoSQLParser.FOLLOWING - 64)) | (1 << (PrestoSQLParser.FORMAT - 64)) | (1 << (PrestoSQLParser.FUNCTION - 64)) | (1 << (PrestoSQLParser.FUNCTIONS - 64)) | (1 << (PrestoSQLParser.GRANT - 64)) | (1 << (PrestoSQLParser.GRANTED - 64)) | (1 << (PrestoSQLParser.GRANTS - 64)) | (1 << (PrestoSQLParser.GRAPHVIZ - 64)) | (1 << (PrestoSQLParser.GROUPING - 64)) | (1 << (PrestoSQLParser.HOUR - 64)) | (1 << (PrestoSQLParser.IF - 64)) | (1 << (PrestoSQLParser.IGNORE - 64)) | (1 << (PrestoSQLParser.INCLUDING - 64)) | (1 << (PrestoSQLParser.INPUT - 64)) | (1 << (PrestoSQLParser.INTERVAL - 64)) | (1 << (PrestoSQLParser.INVOKER - 64)) | (1 << (PrestoSQLParser.IO - 64)) | (1 << (PrestoSQLParser.ISOLATION - 64)) | (1 << (PrestoSQLParser.JSON - 64)) | (1 << (PrestoSQLParser.LANGUAGE - 64)) | (1 << (PrestoSQLParser.LAST - 64)) | (1 << (PrestoSQLParser.LATERAL - 64)) | (1 << (PrestoSQLParser.LEVEL - 64)) | (1 << (PrestoSQLParser.LIMIT - 64)) | (1 << (PrestoSQLParser.LOCALTIME - 64)) | (1 << (PrestoSQLParser.LOCALTIMESTAMP - 64)) | (1 << (PrestoSQLParser.LOGICAL - 64)) | (1 << (PrestoSQLParser.MAP - 64)) | (1 << (PrestoSQLParser.MINUTE - 64)) | (1 << (PrestoSQLParser.MONTH - 64)) | (1 << (PrestoSQLParser.NAME - 64)) | (1 << (PrestoSQLParser.NFC - 64)) | (1 << (PrestoSQLParser.NFD - 64)) | (1 << (PrestoSQLParser.NFKC - 64)) | (1 << (PrestoSQLParser.NFKD - 64)) | (1 << (PrestoSQLParser.NO - 64)) | (1 << (PrestoSQLParser.NONE - 64)) | (1 << (PrestoSQLParser.NORMALIZE - 64)) | (1 << (PrestoSQLParser.NOT - 64)) | (1 << (PrestoSQLParser.NULL - 64)) | (1 << (PrestoSQLParser.NULLIF - 64)) | (1 << (PrestoSQLParser.NULLS - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (PrestoSQLParser.ONLY - 128)) | (1 << (PrestoSQLParser.OPTION - 128)) | (1 << (PrestoSQLParser.ORDINALITY - 128)) | (1 << (PrestoSQLParser.OUTPUT - 128)) | (1 << (PrestoSQLParser.OVER - 128)) | (1 << (PrestoSQLParser.PARTITION - 128)) | (1 << (PrestoSQLParser.PARTITIONS - 128)) | (1 << (PrestoSQLParser.POSITION - 128)) | (1 << (PrestoSQLParser.PRECEDING - 128)) | (1 << (PrestoSQLParser.PRIVILEGES - 128)) | (1 << (PrestoSQLParser.PROPERTIES - 128)) | (1 << (PrestoSQLParser.RANGE - 128)) | (1 << (PrestoSQLParser.READ - 128)) | (1 << (PrestoSQLParser.RENAME - 128)) | (1 << (PrestoSQLParser.REPEATABLE - 128)) | (1 << (PrestoSQLParser.REPLACE - 128)) | (1 << (PrestoSQLParser.RESET - 128)) | (1 << (PrestoSQLParser.RESPECT - 128)) | (1 << (PrestoSQLParser.RESTRICT - 128)) | (1 << (PrestoSQLParser.RETURN - 128)) | (1 << (PrestoSQLParser.RETURNS - 128)) | (1 << (PrestoSQLParser.REVOKE - 128)) | (1 << (PrestoSQLParser.ROLE - 128)) | (1 << (PrestoSQLParser.ROLES - 128)) | (1 << (PrestoSQLParser.ROLLBACK - 128)) | (1 << (PrestoSQLParser.ROW - 128)) | (1 << (PrestoSQLParser.ROWS - 128)) | (1 << (PrestoSQLParser.SCHEMA - 128)) | (1 << (PrestoSQLParser.SCHEMAS - 128)) | (1 << (PrestoSQLParser.SECOND - 128)) | (1 << (PrestoSQLParser.SECURITY - 128)) | (1 << (PrestoSQLParser.SERIALIZABLE - 128)) | (1 << (PrestoSQLParser.SESSION - 128)) | (1 << (PrestoSQLParser.SET - 128)) | (1 << (PrestoSQLParser.SETS - 128)) | (1 << (PrestoSQLParser.SHOW - 128)) | (1 << (PrestoSQLParser.SOME - 128)) | (1 << (PrestoSQLParser.SQL - 128)) | (1 << (PrestoSQLParser.START - 128)) | (1 << (PrestoSQLParser.STATS - 128)) | (1 << (PrestoSQLParser.SUBSTRING - 128)) | (1 << (PrestoSQLParser.SYSTEM - 128)) | (1 << (PrestoSQLParser.TABLES - 128)) | (1 << (PrestoSQLParser.TABLESAMPLE - 128)) | (1 << (PrestoSQLParser.TEXT - 128)) | (1 << (PrestoSQLParser.TIME - 128)) | (1 << (PrestoSQLParser.TIMESTAMP - 128)) | (1 << (PrestoSQLParser.TO - 128)) | (1 << (PrestoSQLParser.TRANSACTION - 128)) | (1 << (PrestoSQLParser.TRUE - 128)) | (1 << (PrestoSQLParser.TRY_CAST - 128)) | (1 << (PrestoSQLParser.TYPE - 128)) | (1 << (PrestoSQLParser.UNBOUNDED - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (PrestoSQLParser.UNCOMMITTED - 192)) | (1 << (PrestoSQLParser.USE - 192)) | (1 << (PrestoSQLParser.USER - 192)) | (1 << (PrestoSQLParser.VALIDATE - 192)) | (1 << (PrestoSQLParser.VERBOSE - 192)) | (1 << (PrestoSQLParser.VIEW - 192)) | (1 << (PrestoSQLParser.WORK - 192)) | (1 << (PrestoSQLParser.WRITE - 192)) | (1 << (PrestoSQLParser.YEAR - 192)) | (1 << (PrestoSQLParser.ZONE - 192)) | (1 << (PrestoSQLParser.PLUS - 192)) | (1 << (PrestoSQLParser.MINUS - 192)) | (1 << (PrestoSQLParser.STRING - 192)) | (1 << (PrestoSQLParser.UNICODE_STRING - 192)) | (1 << (PrestoSQLParser.BINARY_LITERAL - 192)) | (1 << (PrestoSQLParser.INTEGER_VALUE - 192)) | (1 << (PrestoSQLParser.DECIMAL_VALUE - 192)) | (1 << (PrestoSQLParser.DOUBLE_VALUE - 192)) | (1 << (PrestoSQLParser.IDENTIFIER - 192)) | (1 << (PrestoSQLParser.DIGIT_IDENTIFIER - 192)) | (1 << (PrestoSQLParser.QUOTED_IDENTIFIER - 192)) | (1 << (PrestoSQLParser.BACKQUOTED_IDENTIFIER - 192)) | (1 << (PrestoSQLParser.DOUBLE_PRECISION - 192)))) != 0):
                    self.state = 1312
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,167,self._ctx)
                    if la_ == 1:
                        self.state = 1311
                        self.setQuantifier()


                    self.state = 1314
                    self.expression()
                    self.state = 1319
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==PrestoSQLParser.T__3:
                        self.state = 1315
                        self.match(PrestoSQLParser.T__3)
                        self.state = 1316
                        self.expression()
                        self.state = 1321
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1334
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PrestoSQLParser.ORDER:
                    self.state = 1324
                    self.match(PrestoSQLParser.ORDER)
                    self.state = 1325
                    self.match(PrestoSQLParser.BY)
                    self.state = 1326
                    self.sortItem()
                    self.state = 1331
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==PrestoSQLParser.T__3:
                        self.state = 1327
                        self.match(PrestoSQLParser.T__3)
                        self.state = 1328
                        self.sortItem()
                        self.state = 1333
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1336
                self.match(PrestoSQLParser.T__2)
                self.state = 1338
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,172,self._ctx)
                if la_ == 1:
                    self.state = 1337
                    self.r_filter()


                self.state = 1344
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,174,self._ctx)
                if la_ == 1:
                    self.state = 1341
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==PrestoSQLParser.IGNORE or _la==PrestoSQLParser.RESPECT:
                        self.state = 1340
                        self.nullTreatment()


                    self.state = 1343
                    self.over()


                pass

            elif la_ == 15:
                localctx = PrestoSQLParser.LambdaContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1346
                self.identifier()
                self.state = 1347
                self.match(PrestoSQLParser.T__5)
                self.state = 1348
                self.expression()
                pass

            elif la_ == 16:
                localctx = PrestoSQLParser.LambdaContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1350
                self.match(PrestoSQLParser.T__1)
                self.state = 1359
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PrestoSQLParser.ADD) | (1 << PrestoSQLParser.ADMIN) | (1 << PrestoSQLParser.ALL) | (1 << PrestoSQLParser.ANALYZE) | (1 << PrestoSQLParser.ANY) | (1 << PrestoSQLParser.ARRAY) | (1 << PrestoSQLParser.ASC) | (1 << PrestoSQLParser.AT) | (1 << PrestoSQLParser.BERNOULLI) | (1 << PrestoSQLParser.CALL) | (1 << PrestoSQLParser.CALLED) | (1 << PrestoSQLParser.CASCADE) | (1 << PrestoSQLParser.CATALOGS) | (1 << PrestoSQLParser.COLUMN) | (1 << PrestoSQLParser.COLUMNS) | (1 << PrestoSQLParser.COMMENT) | (1 << PrestoSQLParser.COMMIT) | (1 << PrestoSQLParser.COMMITTED) | (1 << PrestoSQLParser.CURRENT) | (1 << PrestoSQLParser.CURRENT_ROLE) | (1 << PrestoSQLParser.DATA) | (1 << PrestoSQLParser.DATE) | (1 << PrestoSQLParser.DAY) | (1 << PrestoSQLParser.DEFINER) | (1 << PrestoSQLParser.DESC) | (1 << PrestoSQLParser.DETERMINISTIC) | (1 << PrestoSQLParser.DISTRIBUTED) | (1 << PrestoSQLParser.EXCLUDING))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PrestoSQLParser.EXPLAIN - 64)) | (1 << (PrestoSQLParser.EXTERNAL - 64)) | (1 << (PrestoSQLParser.FILTER - 64)) | (1 << (PrestoSQLParser.FIRST - 64)) | (1 << (PrestoSQLParser.FOLLOWING - 64)) | (1 << (PrestoSQLParser.FORMAT - 64)) | (1 << (PrestoSQLParser.FUNCTION - 64)) | (1 << (PrestoSQLParser.FUNCTIONS - 64)) | (1 << (PrestoSQLParser.GRANT - 64)) | (1 << (PrestoSQLParser.GRANTED - 64)) | (1 << (PrestoSQLParser.GRANTS - 64)) | (1 << (PrestoSQLParser.GRAPHVIZ - 64)) | (1 << (PrestoSQLParser.HOUR - 64)) | (1 << (PrestoSQLParser.IF - 64)) | (1 << (PrestoSQLParser.IGNORE - 64)) | (1 << (PrestoSQLParser.INCLUDING - 64)) | (1 << (PrestoSQLParser.INPUT - 64)) | (1 << (PrestoSQLParser.INTERVAL - 64)) | (1 << (PrestoSQLParser.INVOKER - 64)) | (1 << (PrestoSQLParser.IO - 64)) | (1 << (PrestoSQLParser.ISOLATION - 64)) | (1 << (PrestoSQLParser.JSON - 64)) | (1 << (PrestoSQLParser.LANGUAGE - 64)) | (1 << (PrestoSQLParser.LAST - 64)) | (1 << (PrestoSQLParser.LATERAL - 64)) | (1 << (PrestoSQLParser.LEVEL - 64)) | (1 << (PrestoSQLParser.LIMIT - 64)) | (1 << (PrestoSQLParser.LOGICAL - 64)) | (1 << (PrestoSQLParser.MAP - 64)) | (1 << (PrestoSQLParser.MINUTE - 64)) | (1 << (PrestoSQLParser.MONTH - 64)) | (1 << (PrestoSQLParser.NAME - 64)) | (1 << (PrestoSQLParser.NFC - 64)) | (1 << (PrestoSQLParser.NFD - 64)) | (1 << (PrestoSQLParser.NFKC - 64)) | (1 << (PrestoSQLParser.NFKD - 64)) | (1 << (PrestoSQLParser.NO - 64)) | (1 << (PrestoSQLParser.NONE - 64)) | (1 << (PrestoSQLParser.NULLIF - 64)) | (1 << (PrestoSQLParser.NULLS - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (PrestoSQLParser.ONLY - 128)) | (1 << (PrestoSQLParser.OPTION - 128)) | (1 << (PrestoSQLParser.ORDINALITY - 128)) | (1 << (PrestoSQLParser.OUTPUT - 128)) | (1 << (PrestoSQLParser.OVER - 128)) | (1 << (PrestoSQLParser.PARTITION - 128)) | (1 << (PrestoSQLParser.PARTITIONS - 128)) | (1 << (PrestoSQLParser.POSITION - 128)) | (1 << (PrestoSQLParser.PRECEDING - 128)) | (1 << (PrestoSQLParser.PRIVILEGES - 128)) | (1 << (PrestoSQLParser.PROPERTIES - 128)) | (1 << (PrestoSQLParser.RANGE - 128)) | (1 << (PrestoSQLParser.READ - 128)) | (1 << (PrestoSQLParser.RENAME - 128)) | (1 << (PrestoSQLParser.REPEATABLE - 128)) | (1 << (PrestoSQLParser.REPLACE - 128)) | (1 << (PrestoSQLParser.RESET - 128)) | (1 << (PrestoSQLParser.RESPECT - 128)) | (1 << (PrestoSQLParser.RESTRICT - 128)) | (1 << (PrestoSQLParser.RETURN - 128)) | (1 << (PrestoSQLParser.RETURNS - 128)) | (1 << (PrestoSQLParser.REVOKE - 128)) | (1 << (PrestoSQLParser.ROLE - 128)) | (1 << (PrestoSQLParser.ROLES - 128)) | (1 << (PrestoSQLParser.ROLLBACK - 128)) | (1 << (PrestoSQLParser.ROW - 128)) | (1 << (PrestoSQLParser.ROWS - 128)) | (1 << (PrestoSQLParser.SCHEMA - 128)) | (1 << (PrestoSQLParser.SCHEMAS - 128)) | (1 << (PrestoSQLParser.SECOND - 128)) | (1 << (PrestoSQLParser.SECURITY - 128)) | (1 << (PrestoSQLParser.SERIALIZABLE - 128)) | (1 << (PrestoSQLParser.SESSION - 128)) | (1 << (PrestoSQLParser.SET - 128)) | (1 << (PrestoSQLParser.SETS - 128)) | (1 << (PrestoSQLParser.SHOW - 128)) | (1 << (PrestoSQLParser.SOME - 128)) | (1 << (PrestoSQLParser.SQL - 128)) | (1 << (PrestoSQLParser.START - 128)) | (1 << (PrestoSQLParser.STATS - 128)) | (1 << (PrestoSQLParser.SUBSTRING - 128)) | (1 << (PrestoSQLParser.SYSTEM - 128)) | (1 << (PrestoSQLParser.TABLES - 128)) | (1 << (PrestoSQLParser.TABLESAMPLE - 128)) | (1 << (PrestoSQLParser.TEXT - 128)) | (1 << (PrestoSQLParser.TIME - 128)) | (1 << (PrestoSQLParser.TIMESTAMP - 128)) | (1 << (PrestoSQLParser.TO - 128)) | (1 << (PrestoSQLParser.TRANSACTION - 128)) | (1 << (PrestoSQLParser.TRY_CAST - 128)) | (1 << (PrestoSQLParser.TYPE - 128)) | (1 << (PrestoSQLParser.UNBOUNDED - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (PrestoSQLParser.UNCOMMITTED - 192)) | (1 << (PrestoSQLParser.USE - 192)) | (1 << (PrestoSQLParser.USER - 192)) | (1 << (PrestoSQLParser.VALIDATE - 192)) | (1 << (PrestoSQLParser.VERBOSE - 192)) | (1 << (PrestoSQLParser.VIEW - 192)) | (1 << (PrestoSQLParser.WORK - 192)) | (1 << (PrestoSQLParser.WRITE - 192)) | (1 << (PrestoSQLParser.YEAR - 192)) | (1 << (PrestoSQLParser.ZONE - 192)) | (1 << (PrestoSQLParser.IDENTIFIER - 192)) | (1 << (PrestoSQLParser.DIGIT_IDENTIFIER - 192)) | (1 << (PrestoSQLParser.QUOTED_IDENTIFIER - 192)) | (1 << (PrestoSQLParser.BACKQUOTED_IDENTIFIER - 192)))) != 0):
                    self.state = 1351
                    self.identifier()
                    self.state = 1356
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==PrestoSQLParser.T__3:
                        self.state = 1352
                        self.match(PrestoSQLParser.T__3)
                        self.state = 1353
                        self.identifier()
                        self.state = 1358
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1361
                self.match(PrestoSQLParser.T__2)
                self.state = 1362
                self.match(PrestoSQLParser.T__5)
                self.state = 1363
                self.expression()
                pass

            elif la_ == 17:
                localctx = PrestoSQLParser.SubqueryExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1364
                self.match(PrestoSQLParser.T__1)
                self.state = 1365
                self.query()
                self.state = 1366
                self.match(PrestoSQLParser.T__2)
                pass

            elif la_ == 18:
                localctx = PrestoSQLParser.ExistsContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1368
                self.match(PrestoSQLParser.EXISTS)
                self.state = 1369
                self.match(PrestoSQLParser.T__1)
                self.state = 1370
                self.query()
                self.state = 1371
                self.match(PrestoSQLParser.T__2)
                pass

            elif la_ == 19:
                localctx = PrestoSQLParser.SimpleCaseContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1373
                self.match(PrestoSQLParser.CASE)
                self.state = 1374
                self.valueExpression(0)
                self.state = 1376 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1375
                    self.whenClause()
                    self.state = 1378 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==PrestoSQLParser.WHEN):
                        break

                self.state = 1382
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PrestoSQLParser.ELSE:
                    self.state = 1380
                    self.match(PrestoSQLParser.ELSE)
                    self.state = 1381
                    localctx.elseExpression = self.expression()


                self.state = 1384
                self.match(PrestoSQLParser.END)
                pass

            elif la_ == 20:
                localctx = PrestoSQLParser.SearchedCaseContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1386
                self.match(PrestoSQLParser.CASE)
                self.state = 1388 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1387
                    self.whenClause()
                    self.state = 1390 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==PrestoSQLParser.WHEN):
                        break

                self.state = 1394
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PrestoSQLParser.ELSE:
                    self.state = 1392
                    self.match(PrestoSQLParser.ELSE)
                    self.state = 1393
                    localctx.elseExpression = self.expression()


                self.state = 1396
                self.match(PrestoSQLParser.END)
                pass

            elif la_ == 21:
                localctx = PrestoSQLParser.CastContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1398
                self.match(PrestoSQLParser.CAST)
                self.state = 1399
                self.match(PrestoSQLParser.T__1)
                self.state = 1400
                self.expression()
                self.state = 1401
                self.match(PrestoSQLParser.AS)
                self.state = 1402
                self.r_type(0)
                self.state = 1403
                self.match(PrestoSQLParser.T__2)
                pass

            elif la_ == 22:
                localctx = PrestoSQLParser.CastContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1405
                self.match(PrestoSQLParser.TRY_CAST)
                self.state = 1406
                self.match(PrestoSQLParser.T__1)
                self.state = 1407
                self.expression()
                self.state = 1408
                self.match(PrestoSQLParser.AS)
                self.state = 1409
                self.r_type(0)
                self.state = 1410
                self.match(PrestoSQLParser.T__2)
                pass

            elif la_ == 23:
                localctx = PrestoSQLParser.ArrayConstructorContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1412
                self.match(PrestoSQLParser.ARRAY)
                self.state = 1413
                self.match(PrestoSQLParser.T__6)
                self.state = 1422
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PrestoSQLParser.T__1) | (1 << PrestoSQLParser.T__4) | (1 << PrestoSQLParser.ADD) | (1 << PrestoSQLParser.ADMIN) | (1 << PrestoSQLParser.ALL) | (1 << PrestoSQLParser.ANALYZE) | (1 << PrestoSQLParser.ANY) | (1 << PrestoSQLParser.ARRAY) | (1 << PrestoSQLParser.ASC) | (1 << PrestoSQLParser.AT) | (1 << PrestoSQLParser.BERNOULLI) | (1 << PrestoSQLParser.CALL) | (1 << PrestoSQLParser.CALLED) | (1 << PrestoSQLParser.CASCADE) | (1 << PrestoSQLParser.CASE) | (1 << PrestoSQLParser.CAST) | (1 << PrestoSQLParser.CATALOGS) | (1 << PrestoSQLParser.COLUMN) | (1 << PrestoSQLParser.COLUMNS) | (1 << PrestoSQLParser.COMMENT) | (1 << PrestoSQLParser.COMMIT) | (1 << PrestoSQLParser.COMMITTED) | (1 << PrestoSQLParser.CURRENT) | (1 << PrestoSQLParser.CURRENT_DATE) | (1 << PrestoSQLParser.CURRENT_ROLE) | (1 << PrestoSQLParser.CURRENT_TIME) | (1 << PrestoSQLParser.CURRENT_TIMESTAMP) | (1 << PrestoSQLParser.CURRENT_USER) | (1 << PrestoSQLParser.DATA) | (1 << PrestoSQLParser.DATE) | (1 << PrestoSQLParser.DAY) | (1 << PrestoSQLParser.DEFINER) | (1 << PrestoSQLParser.DESC) | (1 << PrestoSQLParser.DETERMINISTIC) | (1 << PrestoSQLParser.DISTRIBUTED) | (1 << PrestoSQLParser.EXCLUDING) | (1 << PrestoSQLParser.EXISTS))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PrestoSQLParser.EXPLAIN - 64)) | (1 << (PrestoSQLParser.EXTRACT - 64)) | (1 << (PrestoSQLParser.EXTERNAL - 64)) | (1 << (PrestoSQLParser.FALSE - 64)) | (1 << (PrestoSQLParser.FILTER - 64)) | (1 << (PrestoSQLParser.FIRST - 64)) | (1 << (PrestoSQLParser.FOLLOWING - 64)) | (1 << (PrestoSQLParser.FORMAT - 64)) | (1 << (PrestoSQLParser.FUNCTION - 64)) | (1 << (PrestoSQLParser.FUNCTIONS - 64)) | (1 << (PrestoSQLParser.GRANT - 64)) | (1 << (PrestoSQLParser.GRANTED - 64)) | (1 << (PrestoSQLParser.GRANTS - 64)) | (1 << (PrestoSQLParser.GRAPHVIZ - 64)) | (1 << (PrestoSQLParser.GROUPING - 64)) | (1 << (PrestoSQLParser.HOUR - 64)) | (1 << (PrestoSQLParser.IF - 64)) | (1 << (PrestoSQLParser.IGNORE - 64)) | (1 << (PrestoSQLParser.INCLUDING - 64)) | (1 << (PrestoSQLParser.INPUT - 64)) | (1 << (PrestoSQLParser.INTERVAL - 64)) | (1 << (PrestoSQLParser.INVOKER - 64)) | (1 << (PrestoSQLParser.IO - 64)) | (1 << (PrestoSQLParser.ISOLATION - 64)) | (1 << (PrestoSQLParser.JSON - 64)) | (1 << (PrestoSQLParser.LANGUAGE - 64)) | (1 << (PrestoSQLParser.LAST - 64)) | (1 << (PrestoSQLParser.LATERAL - 64)) | (1 << (PrestoSQLParser.LEVEL - 64)) | (1 << (PrestoSQLParser.LIMIT - 64)) | (1 << (PrestoSQLParser.LOCALTIME - 64)) | (1 << (PrestoSQLParser.LOCALTIMESTAMP - 64)) | (1 << (PrestoSQLParser.LOGICAL - 64)) | (1 << (PrestoSQLParser.MAP - 64)) | (1 << (PrestoSQLParser.MINUTE - 64)) | (1 << (PrestoSQLParser.MONTH - 64)) | (1 << (PrestoSQLParser.NAME - 64)) | (1 << (PrestoSQLParser.NFC - 64)) | (1 << (PrestoSQLParser.NFD - 64)) | (1 << (PrestoSQLParser.NFKC - 64)) | (1 << (PrestoSQLParser.NFKD - 64)) | (1 << (PrestoSQLParser.NO - 64)) | (1 << (PrestoSQLParser.NONE - 64)) | (1 << (PrestoSQLParser.NORMALIZE - 64)) | (1 << (PrestoSQLParser.NOT - 64)) | (1 << (PrestoSQLParser.NULL - 64)) | (1 << (PrestoSQLParser.NULLIF - 64)) | (1 << (PrestoSQLParser.NULLS - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (PrestoSQLParser.ONLY - 128)) | (1 << (PrestoSQLParser.OPTION - 128)) | (1 << (PrestoSQLParser.ORDINALITY - 128)) | (1 << (PrestoSQLParser.OUTPUT - 128)) | (1 << (PrestoSQLParser.OVER - 128)) | (1 << (PrestoSQLParser.PARTITION - 128)) | (1 << (PrestoSQLParser.PARTITIONS - 128)) | (1 << (PrestoSQLParser.POSITION - 128)) | (1 << (PrestoSQLParser.PRECEDING - 128)) | (1 << (PrestoSQLParser.PRIVILEGES - 128)) | (1 << (PrestoSQLParser.PROPERTIES - 128)) | (1 << (PrestoSQLParser.RANGE - 128)) | (1 << (PrestoSQLParser.READ - 128)) | (1 << (PrestoSQLParser.RENAME - 128)) | (1 << (PrestoSQLParser.REPEATABLE - 128)) | (1 << (PrestoSQLParser.REPLACE - 128)) | (1 << (PrestoSQLParser.RESET - 128)) | (1 << (PrestoSQLParser.RESPECT - 128)) | (1 << (PrestoSQLParser.RESTRICT - 128)) | (1 << (PrestoSQLParser.RETURN - 128)) | (1 << (PrestoSQLParser.RETURNS - 128)) | (1 << (PrestoSQLParser.REVOKE - 128)) | (1 << (PrestoSQLParser.ROLE - 128)) | (1 << (PrestoSQLParser.ROLES - 128)) | (1 << (PrestoSQLParser.ROLLBACK - 128)) | (1 << (PrestoSQLParser.ROW - 128)) | (1 << (PrestoSQLParser.ROWS - 128)) | (1 << (PrestoSQLParser.SCHEMA - 128)) | (1 << (PrestoSQLParser.SCHEMAS - 128)) | (1 << (PrestoSQLParser.SECOND - 128)) | (1 << (PrestoSQLParser.SECURITY - 128)) | (1 << (PrestoSQLParser.SERIALIZABLE - 128)) | (1 << (PrestoSQLParser.SESSION - 128)) | (1 << (PrestoSQLParser.SET - 128)) | (1 << (PrestoSQLParser.SETS - 128)) | (1 << (PrestoSQLParser.SHOW - 128)) | (1 << (PrestoSQLParser.SOME - 128)) | (1 << (PrestoSQLParser.SQL - 128)) | (1 << (PrestoSQLParser.START - 128)) | (1 << (PrestoSQLParser.STATS - 128)) | (1 << (PrestoSQLParser.SUBSTRING - 128)) | (1 << (PrestoSQLParser.SYSTEM - 128)) | (1 << (PrestoSQLParser.TABLES - 128)) | (1 << (PrestoSQLParser.TABLESAMPLE - 128)) | (1 << (PrestoSQLParser.TEXT - 128)) | (1 << (PrestoSQLParser.TIME - 128)) | (1 << (PrestoSQLParser.TIMESTAMP - 128)) | (1 << (PrestoSQLParser.TO - 128)) | (1 << (PrestoSQLParser.TRANSACTION - 128)) | (1 << (PrestoSQLParser.TRUE - 128)) | (1 << (PrestoSQLParser.TRY_CAST - 128)) | (1 << (PrestoSQLParser.TYPE - 128)) | (1 << (PrestoSQLParser.UNBOUNDED - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (PrestoSQLParser.UNCOMMITTED - 192)) | (1 << (PrestoSQLParser.USE - 192)) | (1 << (PrestoSQLParser.USER - 192)) | (1 << (PrestoSQLParser.VALIDATE - 192)) | (1 << (PrestoSQLParser.VERBOSE - 192)) | (1 << (PrestoSQLParser.VIEW - 192)) | (1 << (PrestoSQLParser.WORK - 192)) | (1 << (PrestoSQLParser.WRITE - 192)) | (1 << (PrestoSQLParser.YEAR - 192)) | (1 << (PrestoSQLParser.ZONE - 192)) | (1 << (PrestoSQLParser.PLUS - 192)) | (1 << (PrestoSQLParser.MINUS - 192)) | (1 << (PrestoSQLParser.STRING - 192)) | (1 << (PrestoSQLParser.UNICODE_STRING - 192)) | (1 << (PrestoSQLParser.BINARY_LITERAL - 192)) | (1 << (PrestoSQLParser.INTEGER_VALUE - 192)) | (1 << (PrestoSQLParser.DECIMAL_VALUE - 192)) | (1 << (PrestoSQLParser.DOUBLE_VALUE - 192)) | (1 << (PrestoSQLParser.IDENTIFIER - 192)) | (1 << (PrestoSQLParser.DIGIT_IDENTIFIER - 192)) | (1 << (PrestoSQLParser.QUOTED_IDENTIFIER - 192)) | (1 << (PrestoSQLParser.BACKQUOTED_IDENTIFIER - 192)) | (1 << (PrestoSQLParser.DOUBLE_PRECISION - 192)))) != 0):
                    self.state = 1414
                    self.expression()
                    self.state = 1419
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==PrestoSQLParser.T__3:
                        self.state = 1415
                        self.match(PrestoSQLParser.T__3)
                        self.state = 1416
                        self.expression()
                        self.state = 1421
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1424
                self.match(PrestoSQLParser.T__7)
                pass

            elif la_ == 24:
                localctx = PrestoSQLParser.ColumnReferenceContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1425
                self.identifier()
                pass

            elif la_ == 25:
                localctx = PrestoSQLParser.SpecialDateTimeFunctionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1426
                localctx.name = self.match(PrestoSQLParser.CURRENT_DATE)
                pass

            elif la_ == 26:
                localctx = PrestoSQLParser.SpecialDateTimeFunctionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1427
                localctx.name = self.match(PrestoSQLParser.CURRENT_TIME)
                self.state = 1431
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,183,self._ctx)
                if la_ == 1:
                    self.state = 1428
                    self.match(PrestoSQLParser.T__1)
                    self.state = 1429
                    localctx.precision = self.match(PrestoSQLParser.INTEGER_VALUE)
                    self.state = 1430
                    self.match(PrestoSQLParser.T__2)


                pass

            elif la_ == 27:
                localctx = PrestoSQLParser.SpecialDateTimeFunctionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1433
                localctx.name = self.match(PrestoSQLParser.CURRENT_TIMESTAMP)
                self.state = 1437
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,184,self._ctx)
                if la_ == 1:
                    self.state = 1434
                    self.match(PrestoSQLParser.T__1)
                    self.state = 1435
                    localctx.precision = self.match(PrestoSQLParser.INTEGER_VALUE)
                    self.state = 1436
                    self.match(PrestoSQLParser.T__2)


                pass

            elif la_ == 28:
                localctx = PrestoSQLParser.SpecialDateTimeFunctionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1439
                localctx.name = self.match(PrestoSQLParser.LOCALTIME)
                self.state = 1443
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,185,self._ctx)
                if la_ == 1:
                    self.state = 1440
                    self.match(PrestoSQLParser.T__1)
                    self.state = 1441
                    localctx.precision = self.match(PrestoSQLParser.INTEGER_VALUE)
                    self.state = 1442
                    self.match(PrestoSQLParser.T__2)


                pass

            elif la_ == 29:
                localctx = PrestoSQLParser.SpecialDateTimeFunctionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1445
                localctx.name = self.match(PrestoSQLParser.LOCALTIMESTAMP)
                self.state = 1449
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,186,self._ctx)
                if la_ == 1:
                    self.state = 1446
                    self.match(PrestoSQLParser.T__1)
                    self.state = 1447
                    localctx.precision = self.match(PrestoSQLParser.INTEGER_VALUE)
                    self.state = 1448
                    self.match(PrestoSQLParser.T__2)


                pass

            elif la_ == 30:
                localctx = PrestoSQLParser.CurrentUserContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1451
                localctx.name = self.match(PrestoSQLParser.CURRENT_USER)
                pass

            elif la_ == 31:
                localctx = PrestoSQLParser.SubstringContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1452
                self.match(PrestoSQLParser.SUBSTRING)
                self.state = 1453
                self.match(PrestoSQLParser.T__1)
                self.state = 1454
                self.valueExpression(0)
                self.state = 1455
                self.match(PrestoSQLParser.FROM)
                self.state = 1456
                self.valueExpression(0)
                self.state = 1459
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PrestoSQLParser.FOR:
                    self.state = 1457
                    self.match(PrestoSQLParser.FOR)
                    self.state = 1458
                    self.valueExpression(0)


                self.state = 1461
                self.match(PrestoSQLParser.T__2)
                pass

            elif la_ == 32:
                localctx = PrestoSQLParser.NormalizeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1463
                self.match(PrestoSQLParser.NORMALIZE)
                self.state = 1464
                self.match(PrestoSQLParser.T__1)
                self.state = 1465
                self.valueExpression(0)
                self.state = 1468
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PrestoSQLParser.T__3:
                    self.state = 1466
                    self.match(PrestoSQLParser.T__3)
                    self.state = 1467
                    self.normalForm()


                self.state = 1470
                self.match(PrestoSQLParser.T__2)
                pass

            elif la_ == 33:
                localctx = PrestoSQLParser.ExtractContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1472
                self.match(PrestoSQLParser.EXTRACT)
                self.state = 1473
                self.match(PrestoSQLParser.T__1)
                self.state = 1474
                self.identifier()
                self.state = 1475
                self.match(PrestoSQLParser.FROM)
                self.state = 1476
                self.valueExpression(0)
                self.state = 1477
                self.match(PrestoSQLParser.T__2)
                pass

            elif la_ == 34:
                localctx = PrestoSQLParser.ParenthesizedExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1479
                self.match(PrestoSQLParser.T__1)
                self.state = 1480
                self.expression()
                self.state = 1481
                self.match(PrestoSQLParser.T__2)
                pass

            elif la_ == 35:
                localctx = PrestoSQLParser.GroupingOperationContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1483
                self.match(PrestoSQLParser.GROUPING)
                self.state = 1484
                self.match(PrestoSQLParser.T__1)
                self.state = 1493
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PrestoSQLParser.ADD) | (1 << PrestoSQLParser.ADMIN) | (1 << PrestoSQLParser.ALL) | (1 << PrestoSQLParser.ANALYZE) | (1 << PrestoSQLParser.ANY) | (1 << PrestoSQLParser.ARRAY) | (1 << PrestoSQLParser.ASC) | (1 << PrestoSQLParser.AT) | (1 << PrestoSQLParser.BERNOULLI) | (1 << PrestoSQLParser.CALL) | (1 << PrestoSQLParser.CALLED) | (1 << PrestoSQLParser.CASCADE) | (1 << PrestoSQLParser.CATALOGS) | (1 << PrestoSQLParser.COLUMN) | (1 << PrestoSQLParser.COLUMNS) | (1 << PrestoSQLParser.COMMENT) | (1 << PrestoSQLParser.COMMIT) | (1 << PrestoSQLParser.COMMITTED) | (1 << PrestoSQLParser.CURRENT) | (1 << PrestoSQLParser.CURRENT_ROLE) | (1 << PrestoSQLParser.DATA) | (1 << PrestoSQLParser.DATE) | (1 << PrestoSQLParser.DAY) | (1 << PrestoSQLParser.DEFINER) | (1 << PrestoSQLParser.DESC) | (1 << PrestoSQLParser.DETERMINISTIC) | (1 << PrestoSQLParser.DISTRIBUTED) | (1 << PrestoSQLParser.EXCLUDING))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PrestoSQLParser.EXPLAIN - 64)) | (1 << (PrestoSQLParser.EXTERNAL - 64)) | (1 << (PrestoSQLParser.FILTER - 64)) | (1 << (PrestoSQLParser.FIRST - 64)) | (1 << (PrestoSQLParser.FOLLOWING - 64)) | (1 << (PrestoSQLParser.FORMAT - 64)) | (1 << (PrestoSQLParser.FUNCTION - 64)) | (1 << (PrestoSQLParser.FUNCTIONS - 64)) | (1 << (PrestoSQLParser.GRANT - 64)) | (1 << (PrestoSQLParser.GRANTED - 64)) | (1 << (PrestoSQLParser.GRANTS - 64)) | (1 << (PrestoSQLParser.GRAPHVIZ - 64)) | (1 << (PrestoSQLParser.HOUR - 64)) | (1 << (PrestoSQLParser.IF - 64)) | (1 << (PrestoSQLParser.IGNORE - 64)) | (1 << (PrestoSQLParser.INCLUDING - 64)) | (1 << (PrestoSQLParser.INPUT - 64)) | (1 << (PrestoSQLParser.INTERVAL - 64)) | (1 << (PrestoSQLParser.INVOKER - 64)) | (1 << (PrestoSQLParser.IO - 64)) | (1 << (PrestoSQLParser.ISOLATION - 64)) | (1 << (PrestoSQLParser.JSON - 64)) | (1 << (PrestoSQLParser.LANGUAGE - 64)) | (1 << (PrestoSQLParser.LAST - 64)) | (1 << (PrestoSQLParser.LATERAL - 64)) | (1 << (PrestoSQLParser.LEVEL - 64)) | (1 << (PrestoSQLParser.LIMIT - 64)) | (1 << (PrestoSQLParser.LOGICAL - 64)) | (1 << (PrestoSQLParser.MAP - 64)) | (1 << (PrestoSQLParser.MINUTE - 64)) | (1 << (PrestoSQLParser.MONTH - 64)) | (1 << (PrestoSQLParser.NAME - 64)) | (1 << (PrestoSQLParser.NFC - 64)) | (1 << (PrestoSQLParser.NFD - 64)) | (1 << (PrestoSQLParser.NFKC - 64)) | (1 << (PrestoSQLParser.NFKD - 64)) | (1 << (PrestoSQLParser.NO - 64)) | (1 << (PrestoSQLParser.NONE - 64)) | (1 << (PrestoSQLParser.NULLIF - 64)) | (1 << (PrestoSQLParser.NULLS - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (PrestoSQLParser.ONLY - 128)) | (1 << (PrestoSQLParser.OPTION - 128)) | (1 << (PrestoSQLParser.ORDINALITY - 128)) | (1 << (PrestoSQLParser.OUTPUT - 128)) | (1 << (PrestoSQLParser.OVER - 128)) | (1 << (PrestoSQLParser.PARTITION - 128)) | (1 << (PrestoSQLParser.PARTITIONS - 128)) | (1 << (PrestoSQLParser.POSITION - 128)) | (1 << (PrestoSQLParser.PRECEDING - 128)) | (1 << (PrestoSQLParser.PRIVILEGES - 128)) | (1 << (PrestoSQLParser.PROPERTIES - 128)) | (1 << (PrestoSQLParser.RANGE - 128)) | (1 << (PrestoSQLParser.READ - 128)) | (1 << (PrestoSQLParser.RENAME - 128)) | (1 << (PrestoSQLParser.REPEATABLE - 128)) | (1 << (PrestoSQLParser.REPLACE - 128)) | (1 << (PrestoSQLParser.RESET - 128)) | (1 << (PrestoSQLParser.RESPECT - 128)) | (1 << (PrestoSQLParser.RESTRICT - 128)) | (1 << (PrestoSQLParser.RETURN - 128)) | (1 << (PrestoSQLParser.RETURNS - 128)) | (1 << (PrestoSQLParser.REVOKE - 128)) | (1 << (PrestoSQLParser.ROLE - 128)) | (1 << (PrestoSQLParser.ROLES - 128)) | (1 << (PrestoSQLParser.ROLLBACK - 128)) | (1 << (PrestoSQLParser.ROW - 128)) | (1 << (PrestoSQLParser.ROWS - 128)) | (1 << (PrestoSQLParser.SCHEMA - 128)) | (1 << (PrestoSQLParser.SCHEMAS - 128)) | (1 << (PrestoSQLParser.SECOND - 128)) | (1 << (PrestoSQLParser.SECURITY - 128)) | (1 << (PrestoSQLParser.SERIALIZABLE - 128)) | (1 << (PrestoSQLParser.SESSION - 128)) | (1 << (PrestoSQLParser.SET - 128)) | (1 << (PrestoSQLParser.SETS - 128)) | (1 << (PrestoSQLParser.SHOW - 128)) | (1 << (PrestoSQLParser.SOME - 128)) | (1 << (PrestoSQLParser.SQL - 128)) | (1 << (PrestoSQLParser.START - 128)) | (1 << (PrestoSQLParser.STATS - 128)) | (1 << (PrestoSQLParser.SUBSTRING - 128)) | (1 << (PrestoSQLParser.SYSTEM - 128)) | (1 << (PrestoSQLParser.TABLES - 128)) | (1 << (PrestoSQLParser.TABLESAMPLE - 128)) | (1 << (PrestoSQLParser.TEXT - 128)) | (1 << (PrestoSQLParser.TIME - 128)) | (1 << (PrestoSQLParser.TIMESTAMP - 128)) | (1 << (PrestoSQLParser.TO - 128)) | (1 << (PrestoSQLParser.TRANSACTION - 128)) | (1 << (PrestoSQLParser.TRY_CAST - 128)) | (1 << (PrestoSQLParser.TYPE - 128)) | (1 << (PrestoSQLParser.UNBOUNDED - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (PrestoSQLParser.UNCOMMITTED - 192)) | (1 << (PrestoSQLParser.USE - 192)) | (1 << (PrestoSQLParser.USER - 192)) | (1 << (PrestoSQLParser.VALIDATE - 192)) | (1 << (PrestoSQLParser.VERBOSE - 192)) | (1 << (PrestoSQLParser.VIEW - 192)) | (1 << (PrestoSQLParser.WORK - 192)) | (1 << (PrestoSQLParser.WRITE - 192)) | (1 << (PrestoSQLParser.YEAR - 192)) | (1 << (PrestoSQLParser.ZONE - 192)) | (1 << (PrestoSQLParser.IDENTIFIER - 192)) | (1 << (PrestoSQLParser.DIGIT_IDENTIFIER - 192)) | (1 << (PrestoSQLParser.QUOTED_IDENTIFIER - 192)) | (1 << (PrestoSQLParser.BACKQUOTED_IDENTIFIER - 192)))) != 0):
                    self.state = 1485
                    self.qualifiedName()
                    self.state = 1490
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==PrestoSQLParser.T__3:
                        self.state = 1486
                        self.match(PrestoSQLParser.T__3)
                        self.state = 1487
                        self.qualifiedName()
                        self.state = 1492
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1495
                self.match(PrestoSQLParser.T__2)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1508
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,193,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1506
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,192,self._ctx)
                    if la_ == 1:
                        localctx = PrestoSQLParser.SubscriptContext(self, PrestoSQLParser.PrimaryExpressionContext(self, _parentctx, _parentState))
                        localctx.value = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_primaryExpression)
                        self.state = 1498
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 1499
                        self.match(PrestoSQLParser.T__6)
                        self.state = 1500
                        localctx.index = self.valueExpression(0)
                        self.state = 1501
                        self.match(PrestoSQLParser.T__7)
                        pass

                    elif la_ == 2:
                        localctx = PrestoSQLParser.DereferenceContext(self, PrestoSQLParser.PrimaryExpressionContext(self, _parentctx, _parentState))
                        localctx.base = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_primaryExpression)
                        self.state = 1503
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 1504
                        self.match(PrestoSQLParser.T__0)
                        self.state = 1505
                        localctx.fieldName = self.identifier()
                        pass

             
                self.state = 1510
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,193,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class StringContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PrestoSQLParser.RULE_string

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class UnicodeStringLiteralContext(StringContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.StringContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def UNICODE_STRING(self):
            return self.getToken(PrestoSQLParser.UNICODE_STRING, 0)
        def UESCAPE(self):
            return self.getToken(PrestoSQLParser.UESCAPE, 0)
        def STRING(self):
            return self.getToken(PrestoSQLParser.STRING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnicodeStringLiteral" ):
                listener.enterUnicodeStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnicodeStringLiteral" ):
                listener.exitUnicodeStringLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnicodeStringLiteral" ):
                return visitor.visitUnicodeStringLiteral(self)
            else:
                return visitor.visitChildren(self)


    class BasicStringLiteralContext(StringContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.StringContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def STRING(self):
            return self.getToken(PrestoSQLParser.STRING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBasicStringLiteral" ):
                listener.enterBasicStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBasicStringLiteral" ):
                listener.exitBasicStringLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBasicStringLiteral" ):
                return visitor.visitBasicStringLiteral(self)
            else:
                return visitor.visitChildren(self)



    def string(self):

        localctx = PrestoSQLParser.StringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_string)
        try:
            self.state = 1517
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PrestoSQLParser.STRING]:
                localctx = PrestoSQLParser.BasicStringLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1511
                self.match(PrestoSQLParser.STRING)
                pass
            elif token in [PrestoSQLParser.UNICODE_STRING]:
                localctx = PrestoSQLParser.UnicodeStringLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1512
                self.match(PrestoSQLParser.UNICODE_STRING)
                self.state = 1515
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,194,self._ctx)
                if la_ == 1:
                    self.state = 1513
                    self.match(PrestoSQLParser.UESCAPE)
                    self.state = 1514
                    self.match(PrestoSQLParser.STRING)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NullTreatmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IGNORE(self):
            return self.getToken(PrestoSQLParser.IGNORE, 0)

        def NULLS(self):
            return self.getToken(PrestoSQLParser.NULLS, 0)

        def RESPECT(self):
            return self.getToken(PrestoSQLParser.RESPECT, 0)

        def getRuleIndex(self):
            return PrestoSQLParser.RULE_nullTreatment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullTreatment" ):
                listener.enterNullTreatment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullTreatment" ):
                listener.exitNullTreatment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNullTreatment" ):
                return visitor.visitNullTreatment(self)
            else:
                return visitor.visitChildren(self)




    def nullTreatment(self):

        localctx = PrestoSQLParser.NullTreatmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_nullTreatment)
        try:
            self.state = 1523
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PrestoSQLParser.IGNORE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1519
                self.match(PrestoSQLParser.IGNORE)
                self.state = 1520
                self.match(PrestoSQLParser.NULLS)
                pass
            elif token in [PrestoSQLParser.RESPECT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1521
                self.match(PrestoSQLParser.RESPECT)
                self.state = 1522
                self.match(PrestoSQLParser.NULLS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TimeZoneSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PrestoSQLParser.RULE_timeZoneSpecifier

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TimeZoneIntervalContext(TimeZoneSpecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.TimeZoneSpecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TIME(self):
            return self.getToken(PrestoSQLParser.TIME, 0)
        def ZONE(self):
            return self.getToken(PrestoSQLParser.ZONE, 0)
        def interval(self):
            return self.getTypedRuleContext(PrestoSQLParser.IntervalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimeZoneInterval" ):
                listener.enterTimeZoneInterval(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimeZoneInterval" ):
                listener.exitTimeZoneInterval(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTimeZoneInterval" ):
                return visitor.visitTimeZoneInterval(self)
            else:
                return visitor.visitChildren(self)


    class TimeZoneStringContext(TimeZoneSpecifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.TimeZoneSpecifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TIME(self):
            return self.getToken(PrestoSQLParser.TIME, 0)
        def ZONE(self):
            return self.getToken(PrestoSQLParser.ZONE, 0)
        def string(self):
            return self.getTypedRuleContext(PrestoSQLParser.StringContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimeZoneString" ):
                listener.enterTimeZoneString(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimeZoneString" ):
                listener.exitTimeZoneString(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTimeZoneString" ):
                return visitor.visitTimeZoneString(self)
            else:
                return visitor.visitChildren(self)



    def timeZoneSpecifier(self):

        localctx = PrestoSQLParser.TimeZoneSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_timeZoneSpecifier)
        try:
            self.state = 1531
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,197,self._ctx)
            if la_ == 1:
                localctx = PrestoSQLParser.TimeZoneIntervalContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1525
                self.match(PrestoSQLParser.TIME)
                self.state = 1526
                self.match(PrestoSQLParser.ZONE)
                self.state = 1527
                self.interval()
                pass

            elif la_ == 2:
                localctx = PrestoSQLParser.TimeZoneStringContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1528
                self.match(PrestoSQLParser.TIME)
                self.state = 1529
                self.match(PrestoSQLParser.ZONE)
                self.state = 1530
                self.string()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQ(self):
            return self.getToken(PrestoSQLParser.EQ, 0)

        def NEQ(self):
            return self.getToken(PrestoSQLParser.NEQ, 0)

        def LT(self):
            return self.getToken(PrestoSQLParser.LT, 0)

        def LTE(self):
            return self.getToken(PrestoSQLParser.LTE, 0)

        def GT(self):
            return self.getToken(PrestoSQLParser.GT, 0)

        def GTE(self):
            return self.getToken(PrestoSQLParser.GTE, 0)

        def getRuleIndex(self):
            return PrestoSQLParser.RULE_comparisonOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparisonOperator" ):
                listener.enterComparisonOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparisonOperator" ):
                listener.exitComparisonOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparisonOperator" ):
                return visitor.visitComparisonOperator(self)
            else:
                return visitor.visitChildren(self)




    def comparisonOperator(self):

        localctx = PrestoSQLParser.ComparisonOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_comparisonOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1533
            _la = self._input.LA(1)
            if not(((((_la - 209)) & ~0x3f) == 0 and ((1 << (_la - 209)) & ((1 << (PrestoSQLParser.EQ - 209)) | (1 << (PrestoSQLParser.NEQ - 209)) | (1 << (PrestoSQLParser.LT - 209)) | (1 << (PrestoSQLParser.LTE - 209)) | (1 << (PrestoSQLParser.GT - 209)) | (1 << (PrestoSQLParser.GTE - 209)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonQuantifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(PrestoSQLParser.ALL, 0)

        def SOME(self):
            return self.getToken(PrestoSQLParser.SOME, 0)

        def ANY(self):
            return self.getToken(PrestoSQLParser.ANY, 0)

        def getRuleIndex(self):
            return PrestoSQLParser.RULE_comparisonQuantifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparisonQuantifier" ):
                listener.enterComparisonQuantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparisonQuantifier" ):
                listener.exitComparisonQuantifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparisonQuantifier" ):
                return visitor.visitComparisonQuantifier(self)
            else:
                return visitor.visitChildren(self)




    def comparisonQuantifier(self):

        localctx = PrestoSQLParser.ComparisonQuantifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_comparisonQuantifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1535
            _la = self._input.LA(1)
            if not(_la==PrestoSQLParser.ALL or _la==PrestoSQLParser.ANY or _la==PrestoSQLParser.SOME):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanValueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(PrestoSQLParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(PrestoSQLParser.FALSE, 0)

        def getRuleIndex(self):
            return PrestoSQLParser.RULE_booleanValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanValue" ):
                listener.enterBooleanValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanValue" ):
                listener.exitBooleanValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanValue" ):
                return visitor.visitBooleanValue(self)
            else:
                return visitor.visitChildren(self)




    def booleanValue(self):

        localctx = PrestoSQLParser.BooleanValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_booleanValue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1537
            _la = self._input.LA(1)
            if not(_la==PrestoSQLParser.FALSE or _la==PrestoSQLParser.TRUE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.sign = None # Token
            self.r_from = None # IntervalFieldContext
            self.to = None # IntervalFieldContext

        def INTERVAL(self):
            return self.getToken(PrestoSQLParser.INTERVAL, 0)

        def string(self):
            return self.getTypedRuleContext(PrestoSQLParser.StringContext,0)


        def intervalField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrestoSQLParser.IntervalFieldContext)
            else:
                return self.getTypedRuleContext(PrestoSQLParser.IntervalFieldContext,i)


        def TO(self):
            return self.getToken(PrestoSQLParser.TO, 0)

        def PLUS(self):
            return self.getToken(PrestoSQLParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(PrestoSQLParser.MINUS, 0)

        def getRuleIndex(self):
            return PrestoSQLParser.RULE_interval

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterval" ):
                listener.enterInterval(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterval" ):
                listener.exitInterval(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterval" ):
                return visitor.visitInterval(self)
            else:
                return visitor.visitChildren(self)




    def interval(self):

        localctx = PrestoSQLParser.IntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_interval)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1539
            self.match(PrestoSQLParser.INTERVAL)
            self.state = 1541
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PrestoSQLParser.PLUS or _la==PrestoSQLParser.MINUS:
                self.state = 1540
                localctx.sign = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==PrestoSQLParser.PLUS or _la==PrestoSQLParser.MINUS):
                    localctx.sign = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1543
            self.string()
            self.state = 1544
            localctx.r_from = self.intervalField()
            self.state = 1547
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,199,self._ctx)
            if la_ == 1:
                self.state = 1545
                self.match(PrestoSQLParser.TO)
                self.state = 1546
                localctx.to = self.intervalField()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalFieldContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YEAR(self):
            return self.getToken(PrestoSQLParser.YEAR, 0)

        def MONTH(self):
            return self.getToken(PrestoSQLParser.MONTH, 0)

        def DAY(self):
            return self.getToken(PrestoSQLParser.DAY, 0)

        def HOUR(self):
            return self.getToken(PrestoSQLParser.HOUR, 0)

        def MINUTE(self):
            return self.getToken(PrestoSQLParser.MINUTE, 0)

        def SECOND(self):
            return self.getToken(PrestoSQLParser.SECOND, 0)

        def getRuleIndex(self):
            return PrestoSQLParser.RULE_intervalField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalField" ):
                listener.enterIntervalField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalField" ):
                listener.exitIntervalField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntervalField" ):
                return visitor.visitIntervalField(self)
            else:
                return visitor.visitChildren(self)




    def intervalField(self):

        localctx = PrestoSQLParser.IntervalFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_intervalField)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1549
            _la = self._input.LA(1)
            if not(_la==PrestoSQLParser.DAY or ((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & ((1 << (PrestoSQLParser.HOUR - 84)) | (1 << (PrestoSQLParser.MINUTE - 84)) | (1 << (PrestoSQLParser.MONTH - 84)))) != 0) or _la==PrestoSQLParser.SECOND or _la==PrestoSQLParser.YEAR):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NormalFormContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NFD(self):
            return self.getToken(PrestoSQLParser.NFD, 0)

        def NFC(self):
            return self.getToken(PrestoSQLParser.NFC, 0)

        def NFKD(self):
            return self.getToken(PrestoSQLParser.NFKD, 0)

        def NFKC(self):
            return self.getToken(PrestoSQLParser.NFKC, 0)

        def getRuleIndex(self):
            return PrestoSQLParser.RULE_normalForm

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNormalForm" ):
                listener.enterNormalForm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNormalForm" ):
                listener.exitNormalForm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNormalForm" ):
                return visitor.visitNormalForm(self)
            else:
                return visitor.visitChildren(self)




    def normalForm(self):

        localctx = PrestoSQLParser.NormalFormContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_normalForm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1551
            _la = self._input.LA(1)
            if not(((((_la - 116)) & ~0x3f) == 0 and ((1 << (_la - 116)) & ((1 << (PrestoSQLParser.NFC - 116)) | (1 << (PrestoSQLParser.NFD - 116)) | (1 << (PrestoSQLParser.NFKC - 116)) | (1 << (PrestoSQLParser.NFKD - 116)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def r_type(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrestoSQLParser.R_typeContext)
            else:
                return self.getTypedRuleContext(PrestoSQLParser.R_typeContext,i)


        def getRuleIndex(self):
            return PrestoSQLParser.RULE_types

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypes" ):
                listener.enterTypes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypes" ):
                listener.exitTypes(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypes" ):
                return visitor.visitTypes(self)
            else:
                return visitor.visitChildren(self)




    def types(self):

        localctx = PrestoSQLParser.TypesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_types)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1553
            self.match(PrestoSQLParser.T__1)
            self.state = 1562
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PrestoSQLParser.ADD) | (1 << PrestoSQLParser.ADMIN) | (1 << PrestoSQLParser.ALL) | (1 << PrestoSQLParser.ANALYZE) | (1 << PrestoSQLParser.ANY) | (1 << PrestoSQLParser.ARRAY) | (1 << PrestoSQLParser.ASC) | (1 << PrestoSQLParser.AT) | (1 << PrestoSQLParser.BERNOULLI) | (1 << PrestoSQLParser.CALL) | (1 << PrestoSQLParser.CALLED) | (1 << PrestoSQLParser.CASCADE) | (1 << PrestoSQLParser.CATALOGS) | (1 << PrestoSQLParser.COLUMN) | (1 << PrestoSQLParser.COLUMNS) | (1 << PrestoSQLParser.COMMENT) | (1 << PrestoSQLParser.COMMIT) | (1 << PrestoSQLParser.COMMITTED) | (1 << PrestoSQLParser.CURRENT) | (1 << PrestoSQLParser.CURRENT_ROLE) | (1 << PrestoSQLParser.DATA) | (1 << PrestoSQLParser.DATE) | (1 << PrestoSQLParser.DAY) | (1 << PrestoSQLParser.DEFINER) | (1 << PrestoSQLParser.DESC) | (1 << PrestoSQLParser.DETERMINISTIC) | (1 << PrestoSQLParser.DISTRIBUTED) | (1 << PrestoSQLParser.EXCLUDING))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PrestoSQLParser.EXPLAIN - 64)) | (1 << (PrestoSQLParser.EXTERNAL - 64)) | (1 << (PrestoSQLParser.FILTER - 64)) | (1 << (PrestoSQLParser.FIRST - 64)) | (1 << (PrestoSQLParser.FOLLOWING - 64)) | (1 << (PrestoSQLParser.FORMAT - 64)) | (1 << (PrestoSQLParser.FUNCTION - 64)) | (1 << (PrestoSQLParser.FUNCTIONS - 64)) | (1 << (PrestoSQLParser.GRANT - 64)) | (1 << (PrestoSQLParser.GRANTED - 64)) | (1 << (PrestoSQLParser.GRANTS - 64)) | (1 << (PrestoSQLParser.GRAPHVIZ - 64)) | (1 << (PrestoSQLParser.HOUR - 64)) | (1 << (PrestoSQLParser.IF - 64)) | (1 << (PrestoSQLParser.IGNORE - 64)) | (1 << (PrestoSQLParser.INCLUDING - 64)) | (1 << (PrestoSQLParser.INPUT - 64)) | (1 << (PrestoSQLParser.INTERVAL - 64)) | (1 << (PrestoSQLParser.INVOKER - 64)) | (1 << (PrestoSQLParser.IO - 64)) | (1 << (PrestoSQLParser.ISOLATION - 64)) | (1 << (PrestoSQLParser.JSON - 64)) | (1 << (PrestoSQLParser.LANGUAGE - 64)) | (1 << (PrestoSQLParser.LAST - 64)) | (1 << (PrestoSQLParser.LATERAL - 64)) | (1 << (PrestoSQLParser.LEVEL - 64)) | (1 << (PrestoSQLParser.LIMIT - 64)) | (1 << (PrestoSQLParser.LOGICAL - 64)) | (1 << (PrestoSQLParser.MAP - 64)) | (1 << (PrestoSQLParser.MINUTE - 64)) | (1 << (PrestoSQLParser.MONTH - 64)) | (1 << (PrestoSQLParser.NAME - 64)) | (1 << (PrestoSQLParser.NFC - 64)) | (1 << (PrestoSQLParser.NFD - 64)) | (1 << (PrestoSQLParser.NFKC - 64)) | (1 << (PrestoSQLParser.NFKD - 64)) | (1 << (PrestoSQLParser.NO - 64)) | (1 << (PrestoSQLParser.NONE - 64)) | (1 << (PrestoSQLParser.NULLIF - 64)) | (1 << (PrestoSQLParser.NULLS - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (PrestoSQLParser.ONLY - 128)) | (1 << (PrestoSQLParser.OPTION - 128)) | (1 << (PrestoSQLParser.ORDINALITY - 128)) | (1 << (PrestoSQLParser.OUTPUT - 128)) | (1 << (PrestoSQLParser.OVER - 128)) | (1 << (PrestoSQLParser.PARTITION - 128)) | (1 << (PrestoSQLParser.PARTITIONS - 128)) | (1 << (PrestoSQLParser.POSITION - 128)) | (1 << (PrestoSQLParser.PRECEDING - 128)) | (1 << (PrestoSQLParser.PRIVILEGES - 128)) | (1 << (PrestoSQLParser.PROPERTIES - 128)) | (1 << (PrestoSQLParser.RANGE - 128)) | (1 << (PrestoSQLParser.READ - 128)) | (1 << (PrestoSQLParser.RENAME - 128)) | (1 << (PrestoSQLParser.REPEATABLE - 128)) | (1 << (PrestoSQLParser.REPLACE - 128)) | (1 << (PrestoSQLParser.RESET - 128)) | (1 << (PrestoSQLParser.RESPECT - 128)) | (1 << (PrestoSQLParser.RESTRICT - 128)) | (1 << (PrestoSQLParser.RETURN - 128)) | (1 << (PrestoSQLParser.RETURNS - 128)) | (1 << (PrestoSQLParser.REVOKE - 128)) | (1 << (PrestoSQLParser.ROLE - 128)) | (1 << (PrestoSQLParser.ROLES - 128)) | (1 << (PrestoSQLParser.ROLLBACK - 128)) | (1 << (PrestoSQLParser.ROW - 128)) | (1 << (PrestoSQLParser.ROWS - 128)) | (1 << (PrestoSQLParser.SCHEMA - 128)) | (1 << (PrestoSQLParser.SCHEMAS - 128)) | (1 << (PrestoSQLParser.SECOND - 128)) | (1 << (PrestoSQLParser.SECURITY - 128)) | (1 << (PrestoSQLParser.SERIALIZABLE - 128)) | (1 << (PrestoSQLParser.SESSION - 128)) | (1 << (PrestoSQLParser.SET - 128)) | (1 << (PrestoSQLParser.SETS - 128)) | (1 << (PrestoSQLParser.SHOW - 128)) | (1 << (PrestoSQLParser.SOME - 128)) | (1 << (PrestoSQLParser.SQL - 128)) | (1 << (PrestoSQLParser.START - 128)) | (1 << (PrestoSQLParser.STATS - 128)) | (1 << (PrestoSQLParser.SUBSTRING - 128)) | (1 << (PrestoSQLParser.SYSTEM - 128)) | (1 << (PrestoSQLParser.TABLES - 128)) | (1 << (PrestoSQLParser.TABLESAMPLE - 128)) | (1 << (PrestoSQLParser.TEXT - 128)) | (1 << (PrestoSQLParser.TIME - 128)) | (1 << (PrestoSQLParser.TIMESTAMP - 128)) | (1 << (PrestoSQLParser.TO - 128)) | (1 << (PrestoSQLParser.TRANSACTION - 128)) | (1 << (PrestoSQLParser.TRY_CAST - 128)) | (1 << (PrestoSQLParser.TYPE - 128)) | (1 << (PrestoSQLParser.UNBOUNDED - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (PrestoSQLParser.UNCOMMITTED - 192)) | (1 << (PrestoSQLParser.USE - 192)) | (1 << (PrestoSQLParser.USER - 192)) | (1 << (PrestoSQLParser.VALIDATE - 192)) | (1 << (PrestoSQLParser.VERBOSE - 192)) | (1 << (PrestoSQLParser.VIEW - 192)) | (1 << (PrestoSQLParser.WORK - 192)) | (1 << (PrestoSQLParser.WRITE - 192)) | (1 << (PrestoSQLParser.YEAR - 192)) | (1 << (PrestoSQLParser.ZONE - 192)) | (1 << (PrestoSQLParser.IDENTIFIER - 192)) | (1 << (PrestoSQLParser.DIGIT_IDENTIFIER - 192)) | (1 << (PrestoSQLParser.QUOTED_IDENTIFIER - 192)) | (1 << (PrestoSQLParser.BACKQUOTED_IDENTIFIER - 192)) | (1 << (PrestoSQLParser.TIME_WITH_TIME_ZONE - 192)) | (1 << (PrestoSQLParser.TIMESTAMP_WITH_TIME_ZONE - 192)) | (1 << (PrestoSQLParser.DOUBLE_PRECISION - 192)))) != 0):
                self.state = 1554
                self.r_type(0)
                self.state = 1559
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PrestoSQLParser.T__3:
                    self.state = 1555
                    self.match(PrestoSQLParser.T__3)
                    self.state = 1556
                    self.r_type(0)
                    self.state = 1561
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1564
            self.match(PrestoSQLParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class R_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.r_from = None # IntervalFieldContext
            self.to = None # IntervalFieldContext

        def ARRAY(self):
            return self.getToken(PrestoSQLParser.ARRAY, 0)

        def LT(self):
            return self.getToken(PrestoSQLParser.LT, 0)

        def r_type(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrestoSQLParser.R_typeContext)
            else:
                return self.getTypedRuleContext(PrestoSQLParser.R_typeContext,i)


        def GT(self):
            return self.getToken(PrestoSQLParser.GT, 0)

        def MAP(self):
            return self.getToken(PrestoSQLParser.MAP, 0)

        def ROW(self):
            return self.getToken(PrestoSQLParser.ROW, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrestoSQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(PrestoSQLParser.IdentifierContext,i)


        def baseType(self):
            return self.getTypedRuleContext(PrestoSQLParser.BaseTypeContext,0)


        def typeParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrestoSQLParser.TypeParameterContext)
            else:
                return self.getTypedRuleContext(PrestoSQLParser.TypeParameterContext,i)


        def INTERVAL(self):
            return self.getToken(PrestoSQLParser.INTERVAL, 0)

        def TO(self):
            return self.getToken(PrestoSQLParser.TO, 0)

        def intervalField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrestoSQLParser.IntervalFieldContext)
            else:
                return self.getTypedRuleContext(PrestoSQLParser.IntervalFieldContext,i)


        def getRuleIndex(self):
            return PrestoSQLParser.RULE_r_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterR_type" ):
                listener.enterR_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitR_type" ):
                listener.exitR_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitR_type" ):
                return visitor.visitR_type(self)
            else:
                return visitor.visitChildren(self)



    def r_type(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PrestoSQLParser.R_typeContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 114
        self.enterRecursionRule(localctx, 114, self.RULE_r_type, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1613
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,205,self._ctx)
            if la_ == 1:
                self.state = 1567
                self.match(PrestoSQLParser.ARRAY)
                self.state = 1568
                self.match(PrestoSQLParser.LT)
                self.state = 1569
                self.r_type(0)
                self.state = 1570
                self.match(PrestoSQLParser.GT)
                pass

            elif la_ == 2:
                self.state = 1572
                self.match(PrestoSQLParser.MAP)
                self.state = 1573
                self.match(PrestoSQLParser.LT)
                self.state = 1574
                self.r_type(0)
                self.state = 1575
                self.match(PrestoSQLParser.T__3)
                self.state = 1576
                self.r_type(0)
                self.state = 1577
                self.match(PrestoSQLParser.GT)
                pass

            elif la_ == 3:
                self.state = 1579
                self.match(PrestoSQLParser.ROW)
                self.state = 1580
                self.match(PrestoSQLParser.T__1)
                self.state = 1581
                self.identifier()
                self.state = 1582
                self.r_type(0)
                self.state = 1589
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PrestoSQLParser.T__3:
                    self.state = 1583
                    self.match(PrestoSQLParser.T__3)
                    self.state = 1584
                    self.identifier()
                    self.state = 1585
                    self.r_type(0)
                    self.state = 1591
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1592
                self.match(PrestoSQLParser.T__2)
                pass

            elif la_ == 4:
                self.state = 1594
                self.baseType()
                self.state = 1606
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,204,self._ctx)
                if la_ == 1:
                    self.state = 1595
                    self.match(PrestoSQLParser.T__1)
                    self.state = 1596
                    self.typeParameter()
                    self.state = 1601
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==PrestoSQLParser.T__3:
                        self.state = 1597
                        self.match(PrestoSQLParser.T__3)
                        self.state = 1598
                        self.typeParameter()
                        self.state = 1603
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1604
                    self.match(PrestoSQLParser.T__2)


                pass

            elif la_ == 5:
                self.state = 1608
                self.match(PrestoSQLParser.INTERVAL)
                self.state = 1609
                localctx.r_from = self.intervalField()
                self.state = 1610
                self.match(PrestoSQLParser.TO)
                self.state = 1611
                localctx.to = self.intervalField()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1619
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,206,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PrestoSQLParser.R_typeContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_r_type)
                    self.state = 1615
                    if not self.precpred(self._ctx, 6):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                    self.state = 1616
                    self.match(PrestoSQLParser.ARRAY) 
                self.state = 1621
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,206,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class TypeParameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER_VALUE(self):
            return self.getToken(PrestoSQLParser.INTEGER_VALUE, 0)

        def r_type(self):
            return self.getTypedRuleContext(PrestoSQLParser.R_typeContext,0)


        def getRuleIndex(self):
            return PrestoSQLParser.RULE_typeParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParameter" ):
                listener.enterTypeParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParameter" ):
                listener.exitTypeParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeParameter" ):
                return visitor.visitTypeParameter(self)
            else:
                return visitor.visitChildren(self)




    def typeParameter(self):

        localctx = PrestoSQLParser.TypeParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_typeParameter)
        try:
            self.state = 1624
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PrestoSQLParser.INTEGER_VALUE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1622
                self.match(PrestoSQLParser.INTEGER_VALUE)
                pass
            elif token in [PrestoSQLParser.ADD, PrestoSQLParser.ADMIN, PrestoSQLParser.ALL, PrestoSQLParser.ANALYZE, PrestoSQLParser.ANY, PrestoSQLParser.ARRAY, PrestoSQLParser.ASC, PrestoSQLParser.AT, PrestoSQLParser.BERNOULLI, PrestoSQLParser.CALL, PrestoSQLParser.CALLED, PrestoSQLParser.CASCADE, PrestoSQLParser.CATALOGS, PrestoSQLParser.COLUMN, PrestoSQLParser.COLUMNS, PrestoSQLParser.COMMENT, PrestoSQLParser.COMMIT, PrestoSQLParser.COMMITTED, PrestoSQLParser.CURRENT, PrestoSQLParser.CURRENT_ROLE, PrestoSQLParser.DATA, PrestoSQLParser.DATE, PrestoSQLParser.DAY, PrestoSQLParser.DEFINER, PrestoSQLParser.DESC, PrestoSQLParser.DETERMINISTIC, PrestoSQLParser.DISTRIBUTED, PrestoSQLParser.EXCLUDING, PrestoSQLParser.EXPLAIN, PrestoSQLParser.EXTERNAL, PrestoSQLParser.FILTER, PrestoSQLParser.FIRST, PrestoSQLParser.FOLLOWING, PrestoSQLParser.FORMAT, PrestoSQLParser.FUNCTION, PrestoSQLParser.FUNCTIONS, PrestoSQLParser.GRANT, PrestoSQLParser.GRANTED, PrestoSQLParser.GRANTS, PrestoSQLParser.GRAPHVIZ, PrestoSQLParser.HOUR, PrestoSQLParser.IF, PrestoSQLParser.IGNORE, PrestoSQLParser.INCLUDING, PrestoSQLParser.INPUT, PrestoSQLParser.INTERVAL, PrestoSQLParser.INVOKER, PrestoSQLParser.IO, PrestoSQLParser.ISOLATION, PrestoSQLParser.JSON, PrestoSQLParser.LANGUAGE, PrestoSQLParser.LAST, PrestoSQLParser.LATERAL, PrestoSQLParser.LEVEL, PrestoSQLParser.LIMIT, PrestoSQLParser.LOGICAL, PrestoSQLParser.MAP, PrestoSQLParser.MINUTE, PrestoSQLParser.MONTH, PrestoSQLParser.NAME, PrestoSQLParser.NFC, PrestoSQLParser.NFD, PrestoSQLParser.NFKC, PrestoSQLParser.NFKD, PrestoSQLParser.NO, PrestoSQLParser.NONE, PrestoSQLParser.NULLIF, PrestoSQLParser.NULLS, PrestoSQLParser.ONLY, PrestoSQLParser.OPTION, PrestoSQLParser.ORDINALITY, PrestoSQLParser.OUTPUT, PrestoSQLParser.OVER, PrestoSQLParser.PARTITION, PrestoSQLParser.PARTITIONS, PrestoSQLParser.POSITION, PrestoSQLParser.PRECEDING, PrestoSQLParser.PRIVILEGES, PrestoSQLParser.PROPERTIES, PrestoSQLParser.RANGE, PrestoSQLParser.READ, PrestoSQLParser.RENAME, PrestoSQLParser.REPEATABLE, PrestoSQLParser.REPLACE, PrestoSQLParser.RESET, PrestoSQLParser.RESPECT, PrestoSQLParser.RESTRICT, PrestoSQLParser.RETURN, PrestoSQLParser.RETURNS, PrestoSQLParser.REVOKE, PrestoSQLParser.ROLE, PrestoSQLParser.ROLES, PrestoSQLParser.ROLLBACK, PrestoSQLParser.ROW, PrestoSQLParser.ROWS, PrestoSQLParser.SCHEMA, PrestoSQLParser.SCHEMAS, PrestoSQLParser.SECOND, PrestoSQLParser.SECURITY, PrestoSQLParser.SERIALIZABLE, PrestoSQLParser.SESSION, PrestoSQLParser.SET, PrestoSQLParser.SETS, PrestoSQLParser.SHOW, PrestoSQLParser.SOME, PrestoSQLParser.SQL, PrestoSQLParser.START, PrestoSQLParser.STATS, PrestoSQLParser.SUBSTRING, PrestoSQLParser.SYSTEM, PrestoSQLParser.TABLES, PrestoSQLParser.TABLESAMPLE, PrestoSQLParser.TEXT, PrestoSQLParser.TIME, PrestoSQLParser.TIMESTAMP, PrestoSQLParser.TO, PrestoSQLParser.TRANSACTION, PrestoSQLParser.TRY_CAST, PrestoSQLParser.TYPE, PrestoSQLParser.UNBOUNDED, PrestoSQLParser.UNCOMMITTED, PrestoSQLParser.USE, PrestoSQLParser.USER, PrestoSQLParser.VALIDATE, PrestoSQLParser.VERBOSE, PrestoSQLParser.VIEW, PrestoSQLParser.WORK, PrestoSQLParser.WRITE, PrestoSQLParser.YEAR, PrestoSQLParser.ZONE, PrestoSQLParser.IDENTIFIER, PrestoSQLParser.DIGIT_IDENTIFIER, PrestoSQLParser.QUOTED_IDENTIFIER, PrestoSQLParser.BACKQUOTED_IDENTIFIER, PrestoSQLParser.TIME_WITH_TIME_ZONE, PrestoSQLParser.TIMESTAMP_WITH_TIME_ZONE, PrestoSQLParser.DOUBLE_PRECISION]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1623
                self.r_type(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BaseTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TIME_WITH_TIME_ZONE(self):
            return self.getToken(PrestoSQLParser.TIME_WITH_TIME_ZONE, 0)

        def TIMESTAMP_WITH_TIME_ZONE(self):
            return self.getToken(PrestoSQLParser.TIMESTAMP_WITH_TIME_ZONE, 0)

        def DOUBLE_PRECISION(self):
            return self.getToken(PrestoSQLParser.DOUBLE_PRECISION, 0)

        def identifier(self):
            return self.getTypedRuleContext(PrestoSQLParser.IdentifierContext,0)


        def getRuleIndex(self):
            return PrestoSQLParser.RULE_baseType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBaseType" ):
                listener.enterBaseType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBaseType" ):
                listener.exitBaseType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBaseType" ):
                return visitor.visitBaseType(self)
            else:
                return visitor.visitChildren(self)




    def baseType(self):

        localctx = PrestoSQLParser.BaseTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_baseType)
        try:
            self.state = 1630
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PrestoSQLParser.TIME_WITH_TIME_ZONE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1626
                self.match(PrestoSQLParser.TIME_WITH_TIME_ZONE)
                pass
            elif token in [PrestoSQLParser.TIMESTAMP_WITH_TIME_ZONE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1627
                self.match(PrestoSQLParser.TIMESTAMP_WITH_TIME_ZONE)
                pass
            elif token in [PrestoSQLParser.DOUBLE_PRECISION]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1628
                self.match(PrestoSQLParser.DOUBLE_PRECISION)
                pass
            elif token in [PrestoSQLParser.ADD, PrestoSQLParser.ADMIN, PrestoSQLParser.ALL, PrestoSQLParser.ANALYZE, PrestoSQLParser.ANY, PrestoSQLParser.ARRAY, PrestoSQLParser.ASC, PrestoSQLParser.AT, PrestoSQLParser.BERNOULLI, PrestoSQLParser.CALL, PrestoSQLParser.CALLED, PrestoSQLParser.CASCADE, PrestoSQLParser.CATALOGS, PrestoSQLParser.COLUMN, PrestoSQLParser.COLUMNS, PrestoSQLParser.COMMENT, PrestoSQLParser.COMMIT, PrestoSQLParser.COMMITTED, PrestoSQLParser.CURRENT, PrestoSQLParser.CURRENT_ROLE, PrestoSQLParser.DATA, PrestoSQLParser.DATE, PrestoSQLParser.DAY, PrestoSQLParser.DEFINER, PrestoSQLParser.DESC, PrestoSQLParser.DETERMINISTIC, PrestoSQLParser.DISTRIBUTED, PrestoSQLParser.EXCLUDING, PrestoSQLParser.EXPLAIN, PrestoSQLParser.EXTERNAL, PrestoSQLParser.FILTER, PrestoSQLParser.FIRST, PrestoSQLParser.FOLLOWING, PrestoSQLParser.FORMAT, PrestoSQLParser.FUNCTION, PrestoSQLParser.FUNCTIONS, PrestoSQLParser.GRANT, PrestoSQLParser.GRANTED, PrestoSQLParser.GRANTS, PrestoSQLParser.GRAPHVIZ, PrestoSQLParser.HOUR, PrestoSQLParser.IF, PrestoSQLParser.IGNORE, PrestoSQLParser.INCLUDING, PrestoSQLParser.INPUT, PrestoSQLParser.INTERVAL, PrestoSQLParser.INVOKER, PrestoSQLParser.IO, PrestoSQLParser.ISOLATION, PrestoSQLParser.JSON, PrestoSQLParser.LANGUAGE, PrestoSQLParser.LAST, PrestoSQLParser.LATERAL, PrestoSQLParser.LEVEL, PrestoSQLParser.LIMIT, PrestoSQLParser.LOGICAL, PrestoSQLParser.MAP, PrestoSQLParser.MINUTE, PrestoSQLParser.MONTH, PrestoSQLParser.NAME, PrestoSQLParser.NFC, PrestoSQLParser.NFD, PrestoSQLParser.NFKC, PrestoSQLParser.NFKD, PrestoSQLParser.NO, PrestoSQLParser.NONE, PrestoSQLParser.NULLIF, PrestoSQLParser.NULLS, PrestoSQLParser.ONLY, PrestoSQLParser.OPTION, PrestoSQLParser.ORDINALITY, PrestoSQLParser.OUTPUT, PrestoSQLParser.OVER, PrestoSQLParser.PARTITION, PrestoSQLParser.PARTITIONS, PrestoSQLParser.POSITION, PrestoSQLParser.PRECEDING, PrestoSQLParser.PRIVILEGES, PrestoSQLParser.PROPERTIES, PrestoSQLParser.RANGE, PrestoSQLParser.READ, PrestoSQLParser.RENAME, PrestoSQLParser.REPEATABLE, PrestoSQLParser.REPLACE, PrestoSQLParser.RESET, PrestoSQLParser.RESPECT, PrestoSQLParser.RESTRICT, PrestoSQLParser.RETURN, PrestoSQLParser.RETURNS, PrestoSQLParser.REVOKE, PrestoSQLParser.ROLE, PrestoSQLParser.ROLES, PrestoSQLParser.ROLLBACK, PrestoSQLParser.ROW, PrestoSQLParser.ROWS, PrestoSQLParser.SCHEMA, PrestoSQLParser.SCHEMAS, PrestoSQLParser.SECOND, PrestoSQLParser.SECURITY, PrestoSQLParser.SERIALIZABLE, PrestoSQLParser.SESSION, PrestoSQLParser.SET, PrestoSQLParser.SETS, PrestoSQLParser.SHOW, PrestoSQLParser.SOME, PrestoSQLParser.SQL, PrestoSQLParser.START, PrestoSQLParser.STATS, PrestoSQLParser.SUBSTRING, PrestoSQLParser.SYSTEM, PrestoSQLParser.TABLES, PrestoSQLParser.TABLESAMPLE, PrestoSQLParser.TEXT, PrestoSQLParser.TIME, PrestoSQLParser.TIMESTAMP, PrestoSQLParser.TO, PrestoSQLParser.TRANSACTION, PrestoSQLParser.TRY_CAST, PrestoSQLParser.TYPE, PrestoSQLParser.UNBOUNDED, PrestoSQLParser.UNCOMMITTED, PrestoSQLParser.USE, PrestoSQLParser.USER, PrestoSQLParser.VALIDATE, PrestoSQLParser.VERBOSE, PrestoSQLParser.VIEW, PrestoSQLParser.WORK, PrestoSQLParser.WRITE, PrestoSQLParser.YEAR, PrestoSQLParser.ZONE, PrestoSQLParser.IDENTIFIER, PrestoSQLParser.DIGIT_IDENTIFIER, PrestoSQLParser.QUOTED_IDENTIFIER, PrestoSQLParser.BACKQUOTED_IDENTIFIER]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1629
                self.identifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhenClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.condition = None # ExpressionContext
            self.result = None # ExpressionContext

        def WHEN(self):
            return self.getToken(PrestoSQLParser.WHEN, 0)

        def THEN(self):
            return self.getToken(PrestoSQLParser.THEN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrestoSQLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PrestoSQLParser.ExpressionContext,i)


        def getRuleIndex(self):
            return PrestoSQLParser.RULE_whenClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenClause" ):
                listener.enterWhenClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenClause" ):
                listener.exitWhenClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhenClause" ):
                return visitor.visitWhenClause(self)
            else:
                return visitor.visitChildren(self)




    def whenClause(self):

        localctx = PrestoSQLParser.WhenClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_whenClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1632
            self.match(PrestoSQLParser.WHEN)
            self.state = 1633
            localctx.condition = self.expression()
            self.state = 1634
            self.match(PrestoSQLParser.THEN)
            self.state = 1635
            localctx.result = self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class R_filterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILTER(self):
            return self.getToken(PrestoSQLParser.FILTER, 0)

        def WHERE(self):
            return self.getToken(PrestoSQLParser.WHERE, 0)

        def booleanExpression(self):
            return self.getTypedRuleContext(PrestoSQLParser.BooleanExpressionContext,0)


        def getRuleIndex(self):
            return PrestoSQLParser.RULE_r_filter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterR_filter" ):
                listener.enterR_filter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitR_filter" ):
                listener.exitR_filter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitR_filter" ):
                return visitor.visitR_filter(self)
            else:
                return visitor.visitChildren(self)




    def r_filter(self):

        localctx = PrestoSQLParser.R_filterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_r_filter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1637
            self.match(PrestoSQLParser.FILTER)
            self.state = 1638
            self.match(PrestoSQLParser.T__1)
            self.state = 1639
            self.match(PrestoSQLParser.WHERE)
            self.state = 1640
            self.booleanExpression(0)
            self.state = 1641
            self.match(PrestoSQLParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OverContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._expression = None # ExpressionContext
            self.partition = list() # of ExpressionContexts

        def OVER(self):
            return self.getToken(PrestoSQLParser.OVER, 0)

        def PARTITION(self):
            return self.getToken(PrestoSQLParser.PARTITION, 0)

        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(PrestoSQLParser.BY)
            else:
                return self.getToken(PrestoSQLParser.BY, i)

        def ORDER(self):
            return self.getToken(PrestoSQLParser.ORDER, 0)

        def sortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrestoSQLParser.SortItemContext)
            else:
                return self.getTypedRuleContext(PrestoSQLParser.SortItemContext,i)


        def windowFrame(self):
            return self.getTypedRuleContext(PrestoSQLParser.WindowFrameContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrestoSQLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PrestoSQLParser.ExpressionContext,i)


        def getRuleIndex(self):
            return PrestoSQLParser.RULE_over

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOver" ):
                listener.enterOver(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOver" ):
                listener.exitOver(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOver" ):
                return visitor.visitOver(self)
            else:
                return visitor.visitChildren(self)




    def over(self):

        localctx = PrestoSQLParser.OverContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_over)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1643
            self.match(PrestoSQLParser.OVER)
            self.state = 1644
            self.match(PrestoSQLParser.T__1)
            self.state = 1655
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PrestoSQLParser.PARTITION:
                self.state = 1645
                self.match(PrestoSQLParser.PARTITION)
                self.state = 1646
                self.match(PrestoSQLParser.BY)
                self.state = 1647
                localctx._expression = self.expression()
                localctx.partition.append(localctx._expression)
                self.state = 1652
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PrestoSQLParser.T__3:
                    self.state = 1648
                    self.match(PrestoSQLParser.T__3)
                    self.state = 1649
                    localctx._expression = self.expression()
                    localctx.partition.append(localctx._expression)
                    self.state = 1654
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1667
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PrestoSQLParser.ORDER:
                self.state = 1657
                self.match(PrestoSQLParser.ORDER)
                self.state = 1658
                self.match(PrestoSQLParser.BY)
                self.state = 1659
                self.sortItem()
                self.state = 1664
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PrestoSQLParser.T__3:
                    self.state = 1660
                    self.match(PrestoSQLParser.T__3)
                    self.state = 1661
                    self.sortItem()
                    self.state = 1666
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1670
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PrestoSQLParser.RANGE or _la==PrestoSQLParser.ROWS:
                self.state = 1669
                self.windowFrame()


            self.state = 1672
            self.match(PrestoSQLParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowFrameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.frameType = None # Token
            self.start = None # FrameBoundContext
            self.end = None # FrameBoundContext

        def RANGE(self):
            return self.getToken(PrestoSQLParser.RANGE, 0)

        def frameBound(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrestoSQLParser.FrameBoundContext)
            else:
                return self.getTypedRuleContext(PrestoSQLParser.FrameBoundContext,i)


        def ROWS(self):
            return self.getToken(PrestoSQLParser.ROWS, 0)

        def BETWEEN(self):
            return self.getToken(PrestoSQLParser.BETWEEN, 0)

        def AND(self):
            return self.getToken(PrestoSQLParser.AND, 0)

        def getRuleIndex(self):
            return PrestoSQLParser.RULE_windowFrame

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowFrame" ):
                listener.enterWindowFrame(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowFrame" ):
                listener.exitWindowFrame(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowFrame" ):
                return visitor.visitWindowFrame(self)
            else:
                return visitor.visitChildren(self)




    def windowFrame(self):

        localctx = PrestoSQLParser.WindowFrameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_windowFrame)
        try:
            self.state = 1690
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,214,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1674
                localctx.frameType = self.match(PrestoSQLParser.RANGE)
                self.state = 1675
                localctx.start = self.frameBound()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1676
                localctx.frameType = self.match(PrestoSQLParser.ROWS)
                self.state = 1677
                localctx.start = self.frameBound()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1678
                localctx.frameType = self.match(PrestoSQLParser.RANGE)
                self.state = 1679
                self.match(PrestoSQLParser.BETWEEN)
                self.state = 1680
                localctx.start = self.frameBound()
                self.state = 1681
                self.match(PrestoSQLParser.AND)
                self.state = 1682
                localctx.end = self.frameBound()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1684
                localctx.frameType = self.match(PrestoSQLParser.ROWS)
                self.state = 1685
                self.match(PrestoSQLParser.BETWEEN)
                self.state = 1686
                localctx.start = self.frameBound()
                self.state = 1687
                self.match(PrestoSQLParser.AND)
                self.state = 1688
                localctx.end = self.frameBound()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FrameBoundContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PrestoSQLParser.RULE_frameBound

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class BoundedFrameContext(FrameBoundContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.FrameBoundContext
            super().__init__(parser)
            self.boundType = None # Token
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(PrestoSQLParser.ExpressionContext,0)

        def PRECEDING(self):
            return self.getToken(PrestoSQLParser.PRECEDING, 0)
        def FOLLOWING(self):
            return self.getToken(PrestoSQLParser.FOLLOWING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoundedFrame" ):
                listener.enterBoundedFrame(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoundedFrame" ):
                listener.exitBoundedFrame(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBoundedFrame" ):
                return visitor.visitBoundedFrame(self)
            else:
                return visitor.visitChildren(self)


    class UnboundedFrameContext(FrameBoundContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.FrameBoundContext
            super().__init__(parser)
            self.boundType = None # Token
            self.copyFrom(ctx)

        def UNBOUNDED(self):
            return self.getToken(PrestoSQLParser.UNBOUNDED, 0)
        def PRECEDING(self):
            return self.getToken(PrestoSQLParser.PRECEDING, 0)
        def FOLLOWING(self):
            return self.getToken(PrestoSQLParser.FOLLOWING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnboundedFrame" ):
                listener.enterUnboundedFrame(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnboundedFrame" ):
                listener.exitUnboundedFrame(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnboundedFrame" ):
                return visitor.visitUnboundedFrame(self)
            else:
                return visitor.visitChildren(self)


    class CurrentRowBoundContext(FrameBoundContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.FrameBoundContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CURRENT(self):
            return self.getToken(PrestoSQLParser.CURRENT, 0)
        def ROW(self):
            return self.getToken(PrestoSQLParser.ROW, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCurrentRowBound" ):
                listener.enterCurrentRowBound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCurrentRowBound" ):
                listener.exitCurrentRowBound(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCurrentRowBound" ):
                return visitor.visitCurrentRowBound(self)
            else:
                return visitor.visitChildren(self)



    def frameBound(self):

        localctx = PrestoSQLParser.FrameBoundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_frameBound)
        self._la = 0 # Token type
        try:
            self.state = 1701
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,215,self._ctx)
            if la_ == 1:
                localctx = PrestoSQLParser.UnboundedFrameContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1692
                self.match(PrestoSQLParser.UNBOUNDED)
                self.state = 1693
                localctx.boundType = self.match(PrestoSQLParser.PRECEDING)
                pass

            elif la_ == 2:
                localctx = PrestoSQLParser.UnboundedFrameContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1694
                self.match(PrestoSQLParser.UNBOUNDED)
                self.state = 1695
                localctx.boundType = self.match(PrestoSQLParser.FOLLOWING)
                pass

            elif la_ == 3:
                localctx = PrestoSQLParser.CurrentRowBoundContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1696
                self.match(PrestoSQLParser.CURRENT)
                self.state = 1697
                self.match(PrestoSQLParser.ROW)
                pass

            elif la_ == 4:
                localctx = PrestoSQLParser.BoundedFrameContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1698
                self.expression()
                self.state = 1699
                localctx.boundType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==PrestoSQLParser.FOLLOWING or _la==PrestoSQLParser.PRECEDING):
                    localctx.boundType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplainOptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PrestoSQLParser.RULE_explainOption

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ExplainFormatContext(ExplainOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.ExplainOptionContext
            super().__init__(parser)
            self.value = None # Token
            self.copyFrom(ctx)

        def FORMAT(self):
            return self.getToken(PrestoSQLParser.FORMAT, 0)
        def TEXT(self):
            return self.getToken(PrestoSQLParser.TEXT, 0)
        def GRAPHVIZ(self):
            return self.getToken(PrestoSQLParser.GRAPHVIZ, 0)
        def JSON(self):
            return self.getToken(PrestoSQLParser.JSON, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplainFormat" ):
                listener.enterExplainFormat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplainFormat" ):
                listener.exitExplainFormat(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExplainFormat" ):
                return visitor.visitExplainFormat(self)
            else:
                return visitor.visitChildren(self)


    class ExplainTypeContext(ExplainOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.ExplainOptionContext
            super().__init__(parser)
            self.value = None # Token
            self.copyFrom(ctx)

        def TYPE(self):
            return self.getToken(PrestoSQLParser.TYPE, 0)
        def LOGICAL(self):
            return self.getToken(PrestoSQLParser.LOGICAL, 0)
        def DISTRIBUTED(self):
            return self.getToken(PrestoSQLParser.DISTRIBUTED, 0)
        def VALIDATE(self):
            return self.getToken(PrestoSQLParser.VALIDATE, 0)
        def IO(self):
            return self.getToken(PrestoSQLParser.IO, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplainType" ):
                listener.enterExplainType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplainType" ):
                listener.exitExplainType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExplainType" ):
                return visitor.visitExplainType(self)
            else:
                return visitor.visitChildren(self)



    def explainOption(self):

        localctx = PrestoSQLParser.ExplainOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_explainOption)
        self._la = 0 # Token type
        try:
            self.state = 1707
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PrestoSQLParser.FORMAT]:
                localctx = PrestoSQLParser.ExplainFormatContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1703
                self.match(PrestoSQLParser.FORMAT)
                self.state = 1704
                localctx.value = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==PrestoSQLParser.GRAPHVIZ or _la==PrestoSQLParser.JSON or _la==PrestoSQLParser.TEXT):
                    localctx.value = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [PrestoSQLParser.TYPE]:
                localctx = PrestoSQLParser.ExplainTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1705
                self.match(PrestoSQLParser.TYPE)
                self.state = 1706
                localctx.value = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 55)) & ~0x3f) == 0 and ((1 << (_la - 55)) & ((1 << (PrestoSQLParser.DISTRIBUTED - 55)) | (1 << (PrestoSQLParser.IO - 55)) | (1 << (PrestoSQLParser.LOGICAL - 55)))) != 0) or _la==PrestoSQLParser.VALIDATE):
                    localctx.value = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransactionModeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PrestoSQLParser.RULE_transactionMode

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TransactionAccessModeContext(TransactionModeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.TransactionModeContext
            super().__init__(parser)
            self.accessMode = None # Token
            self.copyFrom(ctx)

        def READ(self):
            return self.getToken(PrestoSQLParser.READ, 0)
        def ONLY(self):
            return self.getToken(PrestoSQLParser.ONLY, 0)
        def WRITE(self):
            return self.getToken(PrestoSQLParser.WRITE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransactionAccessMode" ):
                listener.enterTransactionAccessMode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransactionAccessMode" ):
                listener.exitTransactionAccessMode(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTransactionAccessMode" ):
                return visitor.visitTransactionAccessMode(self)
            else:
                return visitor.visitChildren(self)


    class IsolationLevelContext(TransactionModeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.TransactionModeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ISOLATION(self):
            return self.getToken(PrestoSQLParser.ISOLATION, 0)
        def LEVEL(self):
            return self.getToken(PrestoSQLParser.LEVEL, 0)
        def levelOfIsolation(self):
            return self.getTypedRuleContext(PrestoSQLParser.LevelOfIsolationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsolationLevel" ):
                listener.enterIsolationLevel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsolationLevel" ):
                listener.exitIsolationLevel(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIsolationLevel" ):
                return visitor.visitIsolationLevel(self)
            else:
                return visitor.visitChildren(self)



    def transactionMode(self):

        localctx = PrestoSQLParser.TransactionModeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_transactionMode)
        self._la = 0 # Token type
        try:
            self.state = 1714
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PrestoSQLParser.ISOLATION]:
                localctx = PrestoSQLParser.IsolationLevelContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1709
                self.match(PrestoSQLParser.ISOLATION)
                self.state = 1710
                self.match(PrestoSQLParser.LEVEL)
                self.state = 1711
                self.levelOfIsolation()
                pass
            elif token in [PrestoSQLParser.READ]:
                localctx = PrestoSQLParser.TransactionAccessModeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1712
                self.match(PrestoSQLParser.READ)
                self.state = 1713
                localctx.accessMode = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==PrestoSQLParser.ONLY or _la==PrestoSQLParser.WRITE):
                    localctx.accessMode = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LevelOfIsolationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PrestoSQLParser.RULE_levelOfIsolation

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ReadUncommittedContext(LevelOfIsolationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.LevelOfIsolationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def READ(self):
            return self.getToken(PrestoSQLParser.READ, 0)
        def UNCOMMITTED(self):
            return self.getToken(PrestoSQLParser.UNCOMMITTED, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReadUncommitted" ):
                listener.enterReadUncommitted(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReadUncommitted" ):
                listener.exitReadUncommitted(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReadUncommitted" ):
                return visitor.visitReadUncommitted(self)
            else:
                return visitor.visitChildren(self)


    class SerializableContext(LevelOfIsolationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.LevelOfIsolationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SERIALIZABLE(self):
            return self.getToken(PrestoSQLParser.SERIALIZABLE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSerializable" ):
                listener.enterSerializable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSerializable" ):
                listener.exitSerializable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSerializable" ):
                return visitor.visitSerializable(self)
            else:
                return visitor.visitChildren(self)


    class ReadCommittedContext(LevelOfIsolationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.LevelOfIsolationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def READ(self):
            return self.getToken(PrestoSQLParser.READ, 0)
        def COMMITTED(self):
            return self.getToken(PrestoSQLParser.COMMITTED, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReadCommitted" ):
                listener.enterReadCommitted(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReadCommitted" ):
                listener.exitReadCommitted(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReadCommitted" ):
                return visitor.visitReadCommitted(self)
            else:
                return visitor.visitChildren(self)


    class RepeatableReadContext(LevelOfIsolationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.LevelOfIsolationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REPEATABLE(self):
            return self.getToken(PrestoSQLParser.REPEATABLE, 0)
        def READ(self):
            return self.getToken(PrestoSQLParser.READ, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRepeatableRead" ):
                listener.enterRepeatableRead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRepeatableRead" ):
                listener.exitRepeatableRead(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRepeatableRead" ):
                return visitor.visitRepeatableRead(self)
            else:
                return visitor.visitChildren(self)



    def levelOfIsolation(self):

        localctx = PrestoSQLParser.LevelOfIsolationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_levelOfIsolation)
        try:
            self.state = 1723
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,218,self._ctx)
            if la_ == 1:
                localctx = PrestoSQLParser.ReadUncommittedContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1716
                self.match(PrestoSQLParser.READ)
                self.state = 1717
                self.match(PrestoSQLParser.UNCOMMITTED)
                pass

            elif la_ == 2:
                localctx = PrestoSQLParser.ReadCommittedContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1718
                self.match(PrestoSQLParser.READ)
                self.state = 1719
                self.match(PrestoSQLParser.COMMITTED)
                pass

            elif la_ == 3:
                localctx = PrestoSQLParser.RepeatableReadContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1720
                self.match(PrestoSQLParser.REPEATABLE)
                self.state = 1721
                self.match(PrestoSQLParser.READ)
                pass

            elif la_ == 4:
                localctx = PrestoSQLParser.SerializableContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1722
                self.match(PrestoSQLParser.SERIALIZABLE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallArgumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PrestoSQLParser.RULE_callArgument

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PositionalArgumentContext(CallArgumentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.CallArgumentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(PrestoSQLParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPositionalArgument" ):
                listener.enterPositionalArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPositionalArgument" ):
                listener.exitPositionalArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPositionalArgument" ):
                return visitor.visitPositionalArgument(self)
            else:
                return visitor.visitChildren(self)


    class NamedArgumentContext(CallArgumentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.CallArgumentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(PrestoSQLParser.IdentifierContext,0)

        def expression(self):
            return self.getTypedRuleContext(PrestoSQLParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedArgument" ):
                listener.enterNamedArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedArgument" ):
                listener.exitNamedArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamedArgument" ):
                return visitor.visitNamedArgument(self)
            else:
                return visitor.visitChildren(self)



    def callArgument(self):

        localctx = PrestoSQLParser.CallArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_callArgument)
        try:
            self.state = 1730
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,219,self._ctx)
            if la_ == 1:
                localctx = PrestoSQLParser.PositionalArgumentContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1725
                self.expression()
                pass

            elif la_ == 2:
                localctx = PrestoSQLParser.NamedArgumentContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1726
                self.identifier()
                self.state = 1727
                self.match(PrestoSQLParser.T__8)
                self.state = 1728
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivilegeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECT(self):
            return self.getToken(PrestoSQLParser.SELECT, 0)

        def DELETE(self):
            return self.getToken(PrestoSQLParser.DELETE, 0)

        def INSERT(self):
            return self.getToken(PrestoSQLParser.INSERT, 0)

        def identifier(self):
            return self.getTypedRuleContext(PrestoSQLParser.IdentifierContext,0)


        def getRuleIndex(self):
            return PrestoSQLParser.RULE_privilege

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivilege" ):
                listener.enterPrivilege(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivilege" ):
                listener.exitPrivilege(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrivilege" ):
                return visitor.visitPrivilege(self)
            else:
                return visitor.visitChildren(self)




    def privilege(self):

        localctx = PrestoSQLParser.PrivilegeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_privilege)
        try:
            self.state = 1736
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PrestoSQLParser.SELECT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1732
                self.match(PrestoSQLParser.SELECT)
                pass
            elif token in [PrestoSQLParser.DELETE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1733
                self.match(PrestoSQLParser.DELETE)
                pass
            elif token in [PrestoSQLParser.INSERT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1734
                self.match(PrestoSQLParser.INSERT)
                pass
            elif token in [PrestoSQLParser.ADD, PrestoSQLParser.ADMIN, PrestoSQLParser.ALL, PrestoSQLParser.ANALYZE, PrestoSQLParser.ANY, PrestoSQLParser.ARRAY, PrestoSQLParser.ASC, PrestoSQLParser.AT, PrestoSQLParser.BERNOULLI, PrestoSQLParser.CALL, PrestoSQLParser.CALLED, PrestoSQLParser.CASCADE, PrestoSQLParser.CATALOGS, PrestoSQLParser.COLUMN, PrestoSQLParser.COLUMNS, PrestoSQLParser.COMMENT, PrestoSQLParser.COMMIT, PrestoSQLParser.COMMITTED, PrestoSQLParser.CURRENT, PrestoSQLParser.CURRENT_ROLE, PrestoSQLParser.DATA, PrestoSQLParser.DATE, PrestoSQLParser.DAY, PrestoSQLParser.DEFINER, PrestoSQLParser.DESC, PrestoSQLParser.DETERMINISTIC, PrestoSQLParser.DISTRIBUTED, PrestoSQLParser.EXCLUDING, PrestoSQLParser.EXPLAIN, PrestoSQLParser.EXTERNAL, PrestoSQLParser.FILTER, PrestoSQLParser.FIRST, PrestoSQLParser.FOLLOWING, PrestoSQLParser.FORMAT, PrestoSQLParser.FUNCTION, PrestoSQLParser.FUNCTIONS, PrestoSQLParser.GRANT, PrestoSQLParser.GRANTED, PrestoSQLParser.GRANTS, PrestoSQLParser.GRAPHVIZ, PrestoSQLParser.HOUR, PrestoSQLParser.IF, PrestoSQLParser.IGNORE, PrestoSQLParser.INCLUDING, PrestoSQLParser.INPUT, PrestoSQLParser.INTERVAL, PrestoSQLParser.INVOKER, PrestoSQLParser.IO, PrestoSQLParser.ISOLATION, PrestoSQLParser.JSON, PrestoSQLParser.LANGUAGE, PrestoSQLParser.LAST, PrestoSQLParser.LATERAL, PrestoSQLParser.LEVEL, PrestoSQLParser.LIMIT, PrestoSQLParser.LOGICAL, PrestoSQLParser.MAP, PrestoSQLParser.MINUTE, PrestoSQLParser.MONTH, PrestoSQLParser.NAME, PrestoSQLParser.NFC, PrestoSQLParser.NFD, PrestoSQLParser.NFKC, PrestoSQLParser.NFKD, PrestoSQLParser.NO, PrestoSQLParser.NONE, PrestoSQLParser.NULLIF, PrestoSQLParser.NULLS, PrestoSQLParser.ONLY, PrestoSQLParser.OPTION, PrestoSQLParser.ORDINALITY, PrestoSQLParser.OUTPUT, PrestoSQLParser.OVER, PrestoSQLParser.PARTITION, PrestoSQLParser.PARTITIONS, PrestoSQLParser.POSITION, PrestoSQLParser.PRECEDING, PrestoSQLParser.PRIVILEGES, PrestoSQLParser.PROPERTIES, PrestoSQLParser.RANGE, PrestoSQLParser.READ, PrestoSQLParser.RENAME, PrestoSQLParser.REPEATABLE, PrestoSQLParser.REPLACE, PrestoSQLParser.RESET, PrestoSQLParser.RESPECT, PrestoSQLParser.RESTRICT, PrestoSQLParser.RETURN, PrestoSQLParser.RETURNS, PrestoSQLParser.REVOKE, PrestoSQLParser.ROLE, PrestoSQLParser.ROLES, PrestoSQLParser.ROLLBACK, PrestoSQLParser.ROW, PrestoSQLParser.ROWS, PrestoSQLParser.SCHEMA, PrestoSQLParser.SCHEMAS, PrestoSQLParser.SECOND, PrestoSQLParser.SECURITY, PrestoSQLParser.SERIALIZABLE, PrestoSQLParser.SESSION, PrestoSQLParser.SET, PrestoSQLParser.SETS, PrestoSQLParser.SHOW, PrestoSQLParser.SOME, PrestoSQLParser.SQL, PrestoSQLParser.START, PrestoSQLParser.STATS, PrestoSQLParser.SUBSTRING, PrestoSQLParser.SYSTEM, PrestoSQLParser.TABLES, PrestoSQLParser.TABLESAMPLE, PrestoSQLParser.TEXT, PrestoSQLParser.TIME, PrestoSQLParser.TIMESTAMP, PrestoSQLParser.TO, PrestoSQLParser.TRANSACTION, PrestoSQLParser.TRY_CAST, PrestoSQLParser.TYPE, PrestoSQLParser.UNBOUNDED, PrestoSQLParser.UNCOMMITTED, PrestoSQLParser.USE, PrestoSQLParser.USER, PrestoSQLParser.VALIDATE, PrestoSQLParser.VERBOSE, PrestoSQLParser.VIEW, PrestoSQLParser.WORK, PrestoSQLParser.WRITE, PrestoSQLParser.YEAR, PrestoSQLParser.ZONE, PrestoSQLParser.IDENTIFIER, PrestoSQLParser.DIGIT_IDENTIFIER, PrestoSQLParser.QUOTED_IDENTIFIER, PrestoSQLParser.BACKQUOTED_IDENTIFIER]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1735
                self.identifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrestoSQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(PrestoSQLParser.IdentifierContext,i)


        def getRuleIndex(self):
            return PrestoSQLParser.RULE_qualifiedName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedName" ):
                listener.enterQualifiedName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedName" ):
                listener.exitQualifiedName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiedName" ):
                return visitor.visitQualifiedName(self)
            else:
                return visitor.visitChildren(self)




    def qualifiedName(self):

        localctx = PrestoSQLParser.QualifiedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_qualifiedName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1738
            self.identifier()
            self.state = 1743
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,221,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1739
                    self.match(PrestoSQLParser.T__0)
                    self.state = 1740
                    self.identifier() 
                self.state = 1745
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,221,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GrantorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PrestoSQLParser.RULE_grantor

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class CurrentUserGrantorContext(GrantorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.GrantorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CURRENT_USER(self):
            return self.getToken(PrestoSQLParser.CURRENT_USER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCurrentUserGrantor" ):
                listener.enterCurrentUserGrantor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCurrentUserGrantor" ):
                listener.exitCurrentUserGrantor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCurrentUserGrantor" ):
                return visitor.visitCurrentUserGrantor(self)
            else:
                return visitor.visitChildren(self)


    class SpecifiedPrincipalContext(GrantorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.GrantorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def principal(self):
            return self.getTypedRuleContext(PrestoSQLParser.PrincipalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecifiedPrincipal" ):
                listener.enterSpecifiedPrincipal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecifiedPrincipal" ):
                listener.exitSpecifiedPrincipal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSpecifiedPrincipal" ):
                return visitor.visitSpecifiedPrincipal(self)
            else:
                return visitor.visitChildren(self)


    class CurrentRoleGrantorContext(GrantorContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.GrantorContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CURRENT_ROLE(self):
            return self.getToken(PrestoSQLParser.CURRENT_ROLE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCurrentRoleGrantor" ):
                listener.enterCurrentRoleGrantor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCurrentRoleGrantor" ):
                listener.exitCurrentRoleGrantor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCurrentRoleGrantor" ):
                return visitor.visitCurrentRoleGrantor(self)
            else:
                return visitor.visitChildren(self)



    def grantor(self):

        localctx = PrestoSQLParser.GrantorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_grantor)
        try:
            self.state = 1749
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,222,self._ctx)
            if la_ == 1:
                localctx = PrestoSQLParser.CurrentUserGrantorContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1746
                self.match(PrestoSQLParser.CURRENT_USER)
                pass

            elif la_ == 2:
                localctx = PrestoSQLParser.CurrentRoleGrantorContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1747
                self.match(PrestoSQLParser.CURRENT_ROLE)
                pass

            elif la_ == 3:
                localctx = PrestoSQLParser.SpecifiedPrincipalContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1748
                self.principal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrincipalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PrestoSQLParser.RULE_principal

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class UnspecifiedPrincipalContext(PrincipalContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.PrincipalContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(PrestoSQLParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnspecifiedPrincipal" ):
                listener.enterUnspecifiedPrincipal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnspecifiedPrincipal" ):
                listener.exitUnspecifiedPrincipal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnspecifiedPrincipal" ):
                return visitor.visitUnspecifiedPrincipal(self)
            else:
                return visitor.visitChildren(self)


    class UserPrincipalContext(PrincipalContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.PrincipalContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def USER(self):
            return self.getToken(PrestoSQLParser.USER, 0)
        def identifier(self):
            return self.getTypedRuleContext(PrestoSQLParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserPrincipal" ):
                listener.enterUserPrincipal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserPrincipal" ):
                listener.exitUserPrincipal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUserPrincipal" ):
                return visitor.visitUserPrincipal(self)
            else:
                return visitor.visitChildren(self)


    class RolePrincipalContext(PrincipalContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.PrincipalContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ROLE(self):
            return self.getToken(PrestoSQLParser.ROLE, 0)
        def identifier(self):
            return self.getTypedRuleContext(PrestoSQLParser.IdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRolePrincipal" ):
                listener.enterRolePrincipal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRolePrincipal" ):
                listener.exitRolePrincipal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRolePrincipal" ):
                return visitor.visitRolePrincipal(self)
            else:
                return visitor.visitChildren(self)



    def principal(self):

        localctx = PrestoSQLParser.PrincipalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_principal)
        try:
            self.state = 1756
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,223,self._ctx)
            if la_ == 1:
                localctx = PrestoSQLParser.UserPrincipalContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1751
                self.match(PrestoSQLParser.USER)
                self.state = 1752
                self.identifier()
                pass

            elif la_ == 2:
                localctx = PrestoSQLParser.RolePrincipalContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1753
                self.match(PrestoSQLParser.ROLE)
                self.state = 1754
                self.identifier()
                pass

            elif la_ == 3:
                localctx = PrestoSQLParser.UnspecifiedPrincipalContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1755
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RolesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PrestoSQLParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(PrestoSQLParser.IdentifierContext,i)


        def getRuleIndex(self):
            return PrestoSQLParser.RULE_roles

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoles" ):
                listener.enterRoles(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoles" ):
                listener.exitRoles(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRoles" ):
                return visitor.visitRoles(self)
            else:
                return visitor.visitChildren(self)




    def roles(self):

        localctx = PrestoSQLParser.RolesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_roles)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1758
            self.identifier()
            self.state = 1763
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PrestoSQLParser.T__3:
                self.state = 1759
                self.match(PrestoSQLParser.T__3)
                self.state = 1760
                self.identifier()
                self.state = 1765
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PrestoSQLParser.RULE_identifier

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class BackQuotedIdentifierContext(IdentifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.IdentifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BACKQUOTED_IDENTIFIER(self):
            return self.getToken(PrestoSQLParser.BACKQUOTED_IDENTIFIER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBackQuotedIdentifier" ):
                listener.enterBackQuotedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBackQuotedIdentifier" ):
                listener.exitBackQuotedIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBackQuotedIdentifier" ):
                return visitor.visitBackQuotedIdentifier(self)
            else:
                return visitor.visitChildren(self)


    class QuotedIdentifierContext(IdentifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.IdentifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def QUOTED_IDENTIFIER(self):
            return self.getToken(PrestoSQLParser.QUOTED_IDENTIFIER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuotedIdentifier" ):
                listener.enterQuotedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuotedIdentifier" ):
                listener.exitQuotedIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuotedIdentifier" ):
                return visitor.visitQuotedIdentifier(self)
            else:
                return visitor.visitChildren(self)


    class DigitIdentifierContext(IdentifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.IdentifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DIGIT_IDENTIFIER(self):
            return self.getToken(PrestoSQLParser.DIGIT_IDENTIFIER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDigitIdentifier" ):
                listener.enterDigitIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDigitIdentifier" ):
                listener.exitDigitIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDigitIdentifier" ):
                return visitor.visitDigitIdentifier(self)
            else:
                return visitor.visitChildren(self)


    class UnquotedIdentifierContext(IdentifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.IdentifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IDENTIFIER(self):
            return self.getToken(PrestoSQLParser.IDENTIFIER, 0)
        def nonReserved(self):
            return self.getTypedRuleContext(PrestoSQLParser.NonReservedContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnquotedIdentifier" ):
                listener.enterUnquotedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnquotedIdentifier" ):
                listener.exitUnquotedIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnquotedIdentifier" ):
                return visitor.visitUnquotedIdentifier(self)
            else:
                return visitor.visitChildren(self)



    def identifier(self):

        localctx = PrestoSQLParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_identifier)
        try:
            self.state = 1771
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PrestoSQLParser.IDENTIFIER]:
                localctx = PrestoSQLParser.UnquotedIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1766
                self.match(PrestoSQLParser.IDENTIFIER)
                pass
            elif token in [PrestoSQLParser.QUOTED_IDENTIFIER]:
                localctx = PrestoSQLParser.QuotedIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1767
                self.match(PrestoSQLParser.QUOTED_IDENTIFIER)
                pass
            elif token in [PrestoSQLParser.ADD, PrestoSQLParser.ADMIN, PrestoSQLParser.ALL, PrestoSQLParser.ANALYZE, PrestoSQLParser.ANY, PrestoSQLParser.ARRAY, PrestoSQLParser.ASC, PrestoSQLParser.AT, PrestoSQLParser.BERNOULLI, PrestoSQLParser.CALL, PrestoSQLParser.CALLED, PrestoSQLParser.CASCADE, PrestoSQLParser.CATALOGS, PrestoSQLParser.COLUMN, PrestoSQLParser.COLUMNS, PrestoSQLParser.COMMENT, PrestoSQLParser.COMMIT, PrestoSQLParser.COMMITTED, PrestoSQLParser.CURRENT, PrestoSQLParser.CURRENT_ROLE, PrestoSQLParser.DATA, PrestoSQLParser.DATE, PrestoSQLParser.DAY, PrestoSQLParser.DEFINER, PrestoSQLParser.DESC, PrestoSQLParser.DETERMINISTIC, PrestoSQLParser.DISTRIBUTED, PrestoSQLParser.EXCLUDING, PrestoSQLParser.EXPLAIN, PrestoSQLParser.EXTERNAL, PrestoSQLParser.FILTER, PrestoSQLParser.FIRST, PrestoSQLParser.FOLLOWING, PrestoSQLParser.FORMAT, PrestoSQLParser.FUNCTION, PrestoSQLParser.FUNCTIONS, PrestoSQLParser.GRANT, PrestoSQLParser.GRANTED, PrestoSQLParser.GRANTS, PrestoSQLParser.GRAPHVIZ, PrestoSQLParser.HOUR, PrestoSQLParser.IF, PrestoSQLParser.IGNORE, PrestoSQLParser.INCLUDING, PrestoSQLParser.INPUT, PrestoSQLParser.INTERVAL, PrestoSQLParser.INVOKER, PrestoSQLParser.IO, PrestoSQLParser.ISOLATION, PrestoSQLParser.JSON, PrestoSQLParser.LANGUAGE, PrestoSQLParser.LAST, PrestoSQLParser.LATERAL, PrestoSQLParser.LEVEL, PrestoSQLParser.LIMIT, PrestoSQLParser.LOGICAL, PrestoSQLParser.MAP, PrestoSQLParser.MINUTE, PrestoSQLParser.MONTH, PrestoSQLParser.NAME, PrestoSQLParser.NFC, PrestoSQLParser.NFD, PrestoSQLParser.NFKC, PrestoSQLParser.NFKD, PrestoSQLParser.NO, PrestoSQLParser.NONE, PrestoSQLParser.NULLIF, PrestoSQLParser.NULLS, PrestoSQLParser.ONLY, PrestoSQLParser.OPTION, PrestoSQLParser.ORDINALITY, PrestoSQLParser.OUTPUT, PrestoSQLParser.OVER, PrestoSQLParser.PARTITION, PrestoSQLParser.PARTITIONS, PrestoSQLParser.POSITION, PrestoSQLParser.PRECEDING, PrestoSQLParser.PRIVILEGES, PrestoSQLParser.PROPERTIES, PrestoSQLParser.RANGE, PrestoSQLParser.READ, PrestoSQLParser.RENAME, PrestoSQLParser.REPEATABLE, PrestoSQLParser.REPLACE, PrestoSQLParser.RESET, PrestoSQLParser.RESPECT, PrestoSQLParser.RESTRICT, PrestoSQLParser.RETURN, PrestoSQLParser.RETURNS, PrestoSQLParser.REVOKE, PrestoSQLParser.ROLE, PrestoSQLParser.ROLES, PrestoSQLParser.ROLLBACK, PrestoSQLParser.ROW, PrestoSQLParser.ROWS, PrestoSQLParser.SCHEMA, PrestoSQLParser.SCHEMAS, PrestoSQLParser.SECOND, PrestoSQLParser.SECURITY, PrestoSQLParser.SERIALIZABLE, PrestoSQLParser.SESSION, PrestoSQLParser.SET, PrestoSQLParser.SETS, PrestoSQLParser.SHOW, PrestoSQLParser.SOME, PrestoSQLParser.SQL, PrestoSQLParser.START, PrestoSQLParser.STATS, PrestoSQLParser.SUBSTRING, PrestoSQLParser.SYSTEM, PrestoSQLParser.TABLES, PrestoSQLParser.TABLESAMPLE, PrestoSQLParser.TEXT, PrestoSQLParser.TIME, PrestoSQLParser.TIMESTAMP, PrestoSQLParser.TO, PrestoSQLParser.TRANSACTION, PrestoSQLParser.TRY_CAST, PrestoSQLParser.TYPE, PrestoSQLParser.UNBOUNDED, PrestoSQLParser.UNCOMMITTED, PrestoSQLParser.USE, PrestoSQLParser.USER, PrestoSQLParser.VALIDATE, PrestoSQLParser.VERBOSE, PrestoSQLParser.VIEW, PrestoSQLParser.WORK, PrestoSQLParser.WRITE, PrestoSQLParser.YEAR, PrestoSQLParser.ZONE]:
                localctx = PrestoSQLParser.UnquotedIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1768
                self.nonReserved()
                pass
            elif token in [PrestoSQLParser.BACKQUOTED_IDENTIFIER]:
                localctx = PrestoSQLParser.BackQuotedIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1769
                self.match(PrestoSQLParser.BACKQUOTED_IDENTIFIER)
                pass
            elif token in [PrestoSQLParser.DIGIT_IDENTIFIER]:
                localctx = PrestoSQLParser.DigitIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1770
                self.match(PrestoSQLParser.DIGIT_IDENTIFIER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PrestoSQLParser.RULE_number

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class DecimalLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DECIMAL_VALUE(self):
            return self.getToken(PrestoSQLParser.DECIMAL_VALUE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecimalLiteral" ):
                listener.enterDecimalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecimalLiteral" ):
                listener.exitDecimalLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecimalLiteral" ):
                return visitor.visitDecimalLiteral(self)
            else:
                return visitor.visitChildren(self)


    class DoubleLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DOUBLE_VALUE(self):
            return self.getToken(PrestoSQLParser.DOUBLE_VALUE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoubleLiteral" ):
                listener.enterDoubleLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoubleLiteral" ):
                listener.exitDoubleLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDoubleLiteral" ):
                return visitor.visitDoubleLiteral(self)
            else:
                return visitor.visitChildren(self)


    class IntegerLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PrestoSQLParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INTEGER_VALUE(self):
            return self.getToken(PrestoSQLParser.INTEGER_VALUE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntegerLiteral" ):
                listener.enterIntegerLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntegerLiteral" ):
                listener.exitIntegerLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntegerLiteral" ):
                return visitor.visitIntegerLiteral(self)
            else:
                return visitor.visitChildren(self)



    def number(self):

        localctx = PrestoSQLParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_number)
        try:
            self.state = 1776
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PrestoSQLParser.DECIMAL_VALUE]:
                localctx = PrestoSQLParser.DecimalLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1773
                self.match(PrestoSQLParser.DECIMAL_VALUE)
                pass
            elif token in [PrestoSQLParser.DOUBLE_VALUE]:
                localctx = PrestoSQLParser.DoubleLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1774
                self.match(PrestoSQLParser.DOUBLE_VALUE)
                pass
            elif token in [PrestoSQLParser.INTEGER_VALUE]:
                localctx = PrestoSQLParser.IntegerLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1775
                self.match(PrestoSQLParser.INTEGER_VALUE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NonReservedContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(PrestoSQLParser.ADD, 0)

        def ADMIN(self):
            return self.getToken(PrestoSQLParser.ADMIN, 0)

        def ALL(self):
            return self.getToken(PrestoSQLParser.ALL, 0)

        def ANALYZE(self):
            return self.getToken(PrestoSQLParser.ANALYZE, 0)

        def ANY(self):
            return self.getToken(PrestoSQLParser.ANY, 0)

        def ARRAY(self):
            return self.getToken(PrestoSQLParser.ARRAY, 0)

        def ASC(self):
            return self.getToken(PrestoSQLParser.ASC, 0)

        def AT(self):
            return self.getToken(PrestoSQLParser.AT, 0)

        def BERNOULLI(self):
            return self.getToken(PrestoSQLParser.BERNOULLI, 0)

        def CALL(self):
            return self.getToken(PrestoSQLParser.CALL, 0)

        def CALLED(self):
            return self.getToken(PrestoSQLParser.CALLED, 0)

        def CASCADE(self):
            return self.getToken(PrestoSQLParser.CASCADE, 0)

        def CATALOGS(self):
            return self.getToken(PrestoSQLParser.CATALOGS, 0)

        def COLUMN(self):
            return self.getToken(PrestoSQLParser.COLUMN, 0)

        def COLUMNS(self):
            return self.getToken(PrestoSQLParser.COLUMNS, 0)

        def COMMENT(self):
            return self.getToken(PrestoSQLParser.COMMENT, 0)

        def COMMIT(self):
            return self.getToken(PrestoSQLParser.COMMIT, 0)

        def COMMITTED(self):
            return self.getToken(PrestoSQLParser.COMMITTED, 0)

        def CURRENT(self):
            return self.getToken(PrestoSQLParser.CURRENT, 0)

        def CURRENT_ROLE(self):
            return self.getToken(PrestoSQLParser.CURRENT_ROLE, 0)

        def DATA(self):
            return self.getToken(PrestoSQLParser.DATA, 0)

        def DATE(self):
            return self.getToken(PrestoSQLParser.DATE, 0)

        def DAY(self):
            return self.getToken(PrestoSQLParser.DAY, 0)

        def DEFINER(self):
            return self.getToken(PrestoSQLParser.DEFINER, 0)

        def DESC(self):
            return self.getToken(PrestoSQLParser.DESC, 0)

        def DETERMINISTIC(self):
            return self.getToken(PrestoSQLParser.DETERMINISTIC, 0)

        def DISTRIBUTED(self):
            return self.getToken(PrestoSQLParser.DISTRIBUTED, 0)

        def EXCLUDING(self):
            return self.getToken(PrestoSQLParser.EXCLUDING, 0)

        def EXPLAIN(self):
            return self.getToken(PrestoSQLParser.EXPLAIN, 0)

        def EXTERNAL(self):
            return self.getToken(PrestoSQLParser.EXTERNAL, 0)

        def FILTER(self):
            return self.getToken(PrestoSQLParser.FILTER, 0)

        def FIRST(self):
            return self.getToken(PrestoSQLParser.FIRST, 0)

        def FOLLOWING(self):
            return self.getToken(PrestoSQLParser.FOLLOWING, 0)

        def FORMAT(self):
            return self.getToken(PrestoSQLParser.FORMAT, 0)

        def FUNCTION(self):
            return self.getToken(PrestoSQLParser.FUNCTION, 0)

        def FUNCTIONS(self):
            return self.getToken(PrestoSQLParser.FUNCTIONS, 0)

        def GRANT(self):
            return self.getToken(PrestoSQLParser.GRANT, 0)

        def GRANTED(self):
            return self.getToken(PrestoSQLParser.GRANTED, 0)

        def GRANTS(self):
            return self.getToken(PrestoSQLParser.GRANTS, 0)

        def GRAPHVIZ(self):
            return self.getToken(PrestoSQLParser.GRAPHVIZ, 0)

        def HOUR(self):
            return self.getToken(PrestoSQLParser.HOUR, 0)

        def IF(self):
            return self.getToken(PrestoSQLParser.IF, 0)

        def IGNORE(self):
            return self.getToken(PrestoSQLParser.IGNORE, 0)

        def INCLUDING(self):
            return self.getToken(PrestoSQLParser.INCLUDING, 0)

        def INPUT(self):
            return self.getToken(PrestoSQLParser.INPUT, 0)

        def INTERVAL(self):
            return self.getToken(PrestoSQLParser.INTERVAL, 0)

        def INVOKER(self):
            return self.getToken(PrestoSQLParser.INVOKER, 0)

        def IO(self):
            return self.getToken(PrestoSQLParser.IO, 0)

        def ISOLATION(self):
            return self.getToken(PrestoSQLParser.ISOLATION, 0)

        def JSON(self):
            return self.getToken(PrestoSQLParser.JSON, 0)

        def LANGUAGE(self):
            return self.getToken(PrestoSQLParser.LANGUAGE, 0)

        def LAST(self):
            return self.getToken(PrestoSQLParser.LAST, 0)

        def LATERAL(self):
            return self.getToken(PrestoSQLParser.LATERAL, 0)

        def LEVEL(self):
            return self.getToken(PrestoSQLParser.LEVEL, 0)

        def LIMIT(self):
            return self.getToken(PrestoSQLParser.LIMIT, 0)

        def LOGICAL(self):
            return self.getToken(PrestoSQLParser.LOGICAL, 0)

        def MAP(self):
            return self.getToken(PrestoSQLParser.MAP, 0)

        def MINUTE(self):
            return self.getToken(PrestoSQLParser.MINUTE, 0)

        def MONTH(self):
            return self.getToken(PrestoSQLParser.MONTH, 0)

        def NAME(self):
            return self.getToken(PrestoSQLParser.NAME, 0)

        def NFC(self):
            return self.getToken(PrestoSQLParser.NFC, 0)

        def NFD(self):
            return self.getToken(PrestoSQLParser.NFD, 0)

        def NFKC(self):
            return self.getToken(PrestoSQLParser.NFKC, 0)

        def NFKD(self):
            return self.getToken(PrestoSQLParser.NFKD, 0)

        def NO(self):
            return self.getToken(PrestoSQLParser.NO, 0)

        def NONE(self):
            return self.getToken(PrestoSQLParser.NONE, 0)

        def NULLIF(self):
            return self.getToken(PrestoSQLParser.NULLIF, 0)

        def NULLS(self):
            return self.getToken(PrestoSQLParser.NULLS, 0)

        def ONLY(self):
            return self.getToken(PrestoSQLParser.ONLY, 0)

        def OPTION(self):
            return self.getToken(PrestoSQLParser.OPTION, 0)

        def ORDINALITY(self):
            return self.getToken(PrestoSQLParser.ORDINALITY, 0)

        def OUTPUT(self):
            return self.getToken(PrestoSQLParser.OUTPUT, 0)

        def OVER(self):
            return self.getToken(PrestoSQLParser.OVER, 0)

        def PARTITION(self):
            return self.getToken(PrestoSQLParser.PARTITION, 0)

        def PARTITIONS(self):
            return self.getToken(PrestoSQLParser.PARTITIONS, 0)

        def POSITION(self):
            return self.getToken(PrestoSQLParser.POSITION, 0)

        def PRECEDING(self):
            return self.getToken(PrestoSQLParser.PRECEDING, 0)

        def PRIVILEGES(self):
            return self.getToken(PrestoSQLParser.PRIVILEGES, 0)

        def PROPERTIES(self):
            return self.getToken(PrestoSQLParser.PROPERTIES, 0)

        def RANGE(self):
            return self.getToken(PrestoSQLParser.RANGE, 0)

        def READ(self):
            return self.getToken(PrestoSQLParser.READ, 0)

        def RENAME(self):
            return self.getToken(PrestoSQLParser.RENAME, 0)

        def REPEATABLE(self):
            return self.getToken(PrestoSQLParser.REPEATABLE, 0)

        def REPLACE(self):
            return self.getToken(PrestoSQLParser.REPLACE, 0)

        def RESET(self):
            return self.getToken(PrestoSQLParser.RESET, 0)

        def RESPECT(self):
            return self.getToken(PrestoSQLParser.RESPECT, 0)

        def RESTRICT(self):
            return self.getToken(PrestoSQLParser.RESTRICT, 0)

        def RETURN(self):
            return self.getToken(PrestoSQLParser.RETURN, 0)

        def RETURNS(self):
            return self.getToken(PrestoSQLParser.RETURNS, 0)

        def REVOKE(self):
            return self.getToken(PrestoSQLParser.REVOKE, 0)

        def ROLE(self):
            return self.getToken(PrestoSQLParser.ROLE, 0)

        def ROLES(self):
            return self.getToken(PrestoSQLParser.ROLES, 0)

        def ROLLBACK(self):
            return self.getToken(PrestoSQLParser.ROLLBACK, 0)

        def ROW(self):
            return self.getToken(PrestoSQLParser.ROW, 0)

        def ROWS(self):
            return self.getToken(PrestoSQLParser.ROWS, 0)

        def SCHEMA(self):
            return self.getToken(PrestoSQLParser.SCHEMA, 0)

        def SCHEMAS(self):
            return self.getToken(PrestoSQLParser.SCHEMAS, 0)

        def SECOND(self):
            return self.getToken(PrestoSQLParser.SECOND, 0)

        def SECURITY(self):
            return self.getToken(PrestoSQLParser.SECURITY, 0)

        def SERIALIZABLE(self):
            return self.getToken(PrestoSQLParser.SERIALIZABLE, 0)

        def SESSION(self):
            return self.getToken(PrestoSQLParser.SESSION, 0)

        def SET(self):
            return self.getToken(PrestoSQLParser.SET, 0)

        def SETS(self):
            return self.getToken(PrestoSQLParser.SETS, 0)

        def SQL(self):
            return self.getToken(PrestoSQLParser.SQL, 0)

        def SHOW(self):
            return self.getToken(PrestoSQLParser.SHOW, 0)

        def SOME(self):
            return self.getToken(PrestoSQLParser.SOME, 0)

        def START(self):
            return self.getToken(PrestoSQLParser.START, 0)

        def STATS(self):
            return self.getToken(PrestoSQLParser.STATS, 0)

        def SUBSTRING(self):
            return self.getToken(PrestoSQLParser.SUBSTRING, 0)

        def SYSTEM(self):
            return self.getToken(PrestoSQLParser.SYSTEM, 0)

        def TABLES(self):
            return self.getToken(PrestoSQLParser.TABLES, 0)

        def TABLESAMPLE(self):
            return self.getToken(PrestoSQLParser.TABLESAMPLE, 0)

        def TEXT(self):
            return self.getToken(PrestoSQLParser.TEXT, 0)

        def TIME(self):
            return self.getToken(PrestoSQLParser.TIME, 0)

        def TIMESTAMP(self):
            return self.getToken(PrestoSQLParser.TIMESTAMP, 0)

        def TO(self):
            return self.getToken(PrestoSQLParser.TO, 0)

        def TRANSACTION(self):
            return self.getToken(PrestoSQLParser.TRANSACTION, 0)

        def TRY_CAST(self):
            return self.getToken(PrestoSQLParser.TRY_CAST, 0)

        def TYPE(self):
            return self.getToken(PrestoSQLParser.TYPE, 0)

        def UNBOUNDED(self):
            return self.getToken(PrestoSQLParser.UNBOUNDED, 0)

        def UNCOMMITTED(self):
            return self.getToken(PrestoSQLParser.UNCOMMITTED, 0)

        def USE(self):
            return self.getToken(PrestoSQLParser.USE, 0)

        def USER(self):
            return self.getToken(PrestoSQLParser.USER, 0)

        def VALIDATE(self):
            return self.getToken(PrestoSQLParser.VALIDATE, 0)

        def VERBOSE(self):
            return self.getToken(PrestoSQLParser.VERBOSE, 0)

        def VIEW(self):
            return self.getToken(PrestoSQLParser.VIEW, 0)

        def WORK(self):
            return self.getToken(PrestoSQLParser.WORK, 0)

        def WRITE(self):
            return self.getToken(PrestoSQLParser.WRITE, 0)

        def YEAR(self):
            return self.getToken(PrestoSQLParser.YEAR, 0)

        def ZONE(self):
            return self.getToken(PrestoSQLParser.ZONE, 0)

        def getRuleIndex(self):
            return PrestoSQLParser.RULE_nonReserved

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonReserved" ):
                listener.enterNonReserved(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonReserved" ):
                listener.exitNonReserved(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNonReserved" ):
                return visitor.visitNonReserved(self)
            else:
                return visitor.visitChildren(self)




    def nonReserved(self):

        localctx = PrestoSQLParser.NonReservedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_nonReserved)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1778
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PrestoSQLParser.ADD) | (1 << PrestoSQLParser.ADMIN) | (1 << PrestoSQLParser.ALL) | (1 << PrestoSQLParser.ANALYZE) | (1 << PrestoSQLParser.ANY) | (1 << PrestoSQLParser.ARRAY) | (1 << PrestoSQLParser.ASC) | (1 << PrestoSQLParser.AT) | (1 << PrestoSQLParser.BERNOULLI) | (1 << PrestoSQLParser.CALL) | (1 << PrestoSQLParser.CALLED) | (1 << PrestoSQLParser.CASCADE) | (1 << PrestoSQLParser.CATALOGS) | (1 << PrestoSQLParser.COLUMN) | (1 << PrestoSQLParser.COLUMNS) | (1 << PrestoSQLParser.COMMENT) | (1 << PrestoSQLParser.COMMIT) | (1 << PrestoSQLParser.COMMITTED) | (1 << PrestoSQLParser.CURRENT) | (1 << PrestoSQLParser.CURRENT_ROLE) | (1 << PrestoSQLParser.DATA) | (1 << PrestoSQLParser.DATE) | (1 << PrestoSQLParser.DAY) | (1 << PrestoSQLParser.DEFINER) | (1 << PrestoSQLParser.DESC) | (1 << PrestoSQLParser.DETERMINISTIC) | (1 << PrestoSQLParser.DISTRIBUTED) | (1 << PrestoSQLParser.EXCLUDING))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PrestoSQLParser.EXPLAIN - 64)) | (1 << (PrestoSQLParser.EXTERNAL - 64)) | (1 << (PrestoSQLParser.FILTER - 64)) | (1 << (PrestoSQLParser.FIRST - 64)) | (1 << (PrestoSQLParser.FOLLOWING - 64)) | (1 << (PrestoSQLParser.FORMAT - 64)) | (1 << (PrestoSQLParser.FUNCTION - 64)) | (1 << (PrestoSQLParser.FUNCTIONS - 64)) | (1 << (PrestoSQLParser.GRANT - 64)) | (1 << (PrestoSQLParser.GRANTED - 64)) | (1 << (PrestoSQLParser.GRANTS - 64)) | (1 << (PrestoSQLParser.GRAPHVIZ - 64)) | (1 << (PrestoSQLParser.HOUR - 64)) | (1 << (PrestoSQLParser.IF - 64)) | (1 << (PrestoSQLParser.IGNORE - 64)) | (1 << (PrestoSQLParser.INCLUDING - 64)) | (1 << (PrestoSQLParser.INPUT - 64)) | (1 << (PrestoSQLParser.INTERVAL - 64)) | (1 << (PrestoSQLParser.INVOKER - 64)) | (1 << (PrestoSQLParser.IO - 64)) | (1 << (PrestoSQLParser.ISOLATION - 64)) | (1 << (PrestoSQLParser.JSON - 64)) | (1 << (PrestoSQLParser.LANGUAGE - 64)) | (1 << (PrestoSQLParser.LAST - 64)) | (1 << (PrestoSQLParser.LATERAL - 64)) | (1 << (PrestoSQLParser.LEVEL - 64)) | (1 << (PrestoSQLParser.LIMIT - 64)) | (1 << (PrestoSQLParser.LOGICAL - 64)) | (1 << (PrestoSQLParser.MAP - 64)) | (1 << (PrestoSQLParser.MINUTE - 64)) | (1 << (PrestoSQLParser.MONTH - 64)) | (1 << (PrestoSQLParser.NAME - 64)) | (1 << (PrestoSQLParser.NFC - 64)) | (1 << (PrestoSQLParser.NFD - 64)) | (1 << (PrestoSQLParser.NFKC - 64)) | (1 << (PrestoSQLParser.NFKD - 64)) | (1 << (PrestoSQLParser.NO - 64)) | (1 << (PrestoSQLParser.NONE - 64)) | (1 << (PrestoSQLParser.NULLIF - 64)) | (1 << (PrestoSQLParser.NULLS - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (PrestoSQLParser.ONLY - 128)) | (1 << (PrestoSQLParser.OPTION - 128)) | (1 << (PrestoSQLParser.ORDINALITY - 128)) | (1 << (PrestoSQLParser.OUTPUT - 128)) | (1 << (PrestoSQLParser.OVER - 128)) | (1 << (PrestoSQLParser.PARTITION - 128)) | (1 << (PrestoSQLParser.PARTITIONS - 128)) | (1 << (PrestoSQLParser.POSITION - 128)) | (1 << (PrestoSQLParser.PRECEDING - 128)) | (1 << (PrestoSQLParser.PRIVILEGES - 128)) | (1 << (PrestoSQLParser.PROPERTIES - 128)) | (1 << (PrestoSQLParser.RANGE - 128)) | (1 << (PrestoSQLParser.READ - 128)) | (1 << (PrestoSQLParser.RENAME - 128)) | (1 << (PrestoSQLParser.REPEATABLE - 128)) | (1 << (PrestoSQLParser.REPLACE - 128)) | (1 << (PrestoSQLParser.RESET - 128)) | (1 << (PrestoSQLParser.RESPECT - 128)) | (1 << (PrestoSQLParser.RESTRICT - 128)) | (1 << (PrestoSQLParser.RETURN - 128)) | (1 << (PrestoSQLParser.RETURNS - 128)) | (1 << (PrestoSQLParser.REVOKE - 128)) | (1 << (PrestoSQLParser.ROLE - 128)) | (1 << (PrestoSQLParser.ROLES - 128)) | (1 << (PrestoSQLParser.ROLLBACK - 128)) | (1 << (PrestoSQLParser.ROW - 128)) | (1 << (PrestoSQLParser.ROWS - 128)) | (1 << (PrestoSQLParser.SCHEMA - 128)) | (1 << (PrestoSQLParser.SCHEMAS - 128)) | (1 << (PrestoSQLParser.SECOND - 128)) | (1 << (PrestoSQLParser.SECURITY - 128)) | (1 << (PrestoSQLParser.SERIALIZABLE - 128)) | (1 << (PrestoSQLParser.SESSION - 128)) | (1 << (PrestoSQLParser.SET - 128)) | (1 << (PrestoSQLParser.SETS - 128)) | (1 << (PrestoSQLParser.SHOW - 128)) | (1 << (PrestoSQLParser.SOME - 128)) | (1 << (PrestoSQLParser.SQL - 128)) | (1 << (PrestoSQLParser.START - 128)) | (1 << (PrestoSQLParser.STATS - 128)) | (1 << (PrestoSQLParser.SUBSTRING - 128)) | (1 << (PrestoSQLParser.SYSTEM - 128)) | (1 << (PrestoSQLParser.TABLES - 128)) | (1 << (PrestoSQLParser.TABLESAMPLE - 128)) | (1 << (PrestoSQLParser.TEXT - 128)) | (1 << (PrestoSQLParser.TIME - 128)) | (1 << (PrestoSQLParser.TIMESTAMP - 128)) | (1 << (PrestoSQLParser.TO - 128)) | (1 << (PrestoSQLParser.TRANSACTION - 128)) | (1 << (PrestoSQLParser.TRY_CAST - 128)) | (1 << (PrestoSQLParser.TYPE - 128)) | (1 << (PrestoSQLParser.UNBOUNDED - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (PrestoSQLParser.UNCOMMITTED - 192)) | (1 << (PrestoSQLParser.USE - 192)) | (1 << (PrestoSQLParser.USER - 192)) | (1 << (PrestoSQLParser.VALIDATE - 192)) | (1 << (PrestoSQLParser.VERBOSE - 192)) | (1 << (PrestoSQLParser.VIEW - 192)) | (1 << (PrestoSQLParser.WORK - 192)) | (1 << (PrestoSQLParser.WRITE - 192)) | (1 << (PrestoSQLParser.YEAR - 192)) | (1 << (PrestoSQLParser.ZONE - 192)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[24] = self.queryTerm_sempred
        self._predicates[34] = self.relation_sempred
        self._predicates[43] = self.booleanExpression_sempred
        self._predicates[45] = self.valueExpression_sempred
        self._predicates[46] = self.primaryExpression_sempred
        self._predicates[57] = self.r_type_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def queryTerm_sempred(self, localctx:QueryTermContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 1)
         

    def relation_sempred(self, localctx:RelationContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 2)
         

    def booleanExpression_sempred(self, localctx:BooleanExpressionContext, predIndex:int):
            if predIndex == 3:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 1)
         

    def valueExpression_sempred(self, localctx:ValueExpressionContext, predIndex:int):
            if predIndex == 5:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 1)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 5)
         

    def primaryExpression_sempred(self, localctx:PrimaryExpressionContext, predIndex:int):
            if predIndex == 9:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 12)
         

    def r_type_sempred(self, localctx:R_typeContext, predIndex:int):
            if predIndex == 11:
                return self.precpred(self._ctx, 6)
         




